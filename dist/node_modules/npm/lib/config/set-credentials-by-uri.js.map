{"version":3,"sources":["../../../../../node_modules/npm/lib/config/set-credentials-by-uri.js"],"names":["assert","require","toNerfDart","module","exports","setCredentialsByURI","uri","c","nerfed","token","set","del","username","password","email","encoded","Buffer","from","toString","alwaysAuth","undefined","Error"],"mappings":";;;;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AAEA,IAAIC,aAAaD,QAAQ,gBAAR,CAAjB;;AAEAE,OAAOC,OAAP,GAAiBC,mBAAjB;;AAEA,SAASA,mBAAT,CAA8BC,GAA9B,EAAmCC,CAAnC,EAAsC;AACpCP,SAAOM,OAAO,OAAOA,GAAP,KAAe,QAA7B,EAAuC,0BAAvC;AACAN,SAAOO,KAAK,QAAOA,CAAP,yCAAOA,CAAP,OAAa,QAAzB,EAAmC,0BAAnC;;AAEA,MAAIC,SAASN,WAAWI,GAAX,CAAb;;AAEA,MAAIC,EAAEE,KAAN,EAAa;AACX,SAAKC,GAAL,CAASF,SAAS,aAAlB,EAAiCD,EAAEE,KAAnC,EAA0C,MAA1C;AACA,SAAKE,GAAL,CAASH,SAAS,YAAlB,EAAgC,MAAhC;AACA,SAAKG,GAAL,CAASH,SAAS,WAAlB,EAA+B,MAA/B;AACA,SAAKG,GAAL,CAASH,SAAS,QAAlB,EAA4B,MAA5B;AACA,SAAKG,GAAL,CAASH,SAAS,cAAlB,EAAkC,MAAlC;AACD,GAND,MAMO,IAAID,EAAEK,QAAF,IAAcL,EAAEM,QAAhB,IAA4BN,EAAEO,KAAlC,EAAyC;AAC9Cd,WAAOO,EAAEK,QAAT,EAAmB,uBAAnB;AACAZ,WAAOO,EAAEM,QAAT,EAAmB,uBAAnB;AACAb,WAAOO,EAAEO,KAAT,EAAgB,4BAAhB;;AAEA,SAAKH,GAAL,CAASH,SAAS,aAAlB,EAAiC,MAAjC;;AAEA,QAAIO,UAAUC,OAAOC,IAAP,CAAYV,EAAEM,QAAd,EAAwB,MAAxB,EAAgCK,QAAhC,CAAyC,QAAzC,CAAd;AACA,SAAKR,GAAL,CAASF,SAAS,YAAlB,EAAgCO,OAAhC,EAAyC,MAAzC;AACA,SAAKL,GAAL,CAASF,SAAS,WAAlB,EAA+BD,EAAEK,QAAjC,EAA2C,MAA3C;AACA,SAAKF,GAAL,CAASF,SAAS,QAAlB,EAA4BD,EAAEO,KAA9B,EAAqC,MAArC;;AAEA,QAAIP,EAAEY,UAAF,KAAiBC,SAArB,EAAgC;AAC9B,WAAKV,GAAL,CAASF,SAAS,cAAlB,EAAkCD,EAAEY,UAApC,EAAgD,MAAhD;AACD,KAFD,MAEO;AACL,WAAKR,GAAL,CAASH,SAAS,cAAlB,EAAkC,MAAlC;AACD;AACF,GAjBM,MAiBA;AACL,UAAM,IAAIa,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF","file":"set-credentials-by-uri.js","sourcesContent":["var assert = require('assert')\n\nvar toNerfDart = require('./nerf-dart.js')\n\nmodule.exports = setCredentialsByURI\n\nfunction setCredentialsByURI (uri, c) {\n  assert(uri && typeof uri === 'string', 'registry URL is required')\n  assert(c && typeof c === 'object', 'credentials are required')\n\n  var nerfed = toNerfDart(uri)\n\n  if (c.token) {\n    this.set(nerfed + ':_authToken', c.token, 'user')\n    this.del(nerfed + ':_password', 'user')\n    this.del(nerfed + ':username', 'user')\n    this.del(nerfed + ':email', 'user')\n    this.del(nerfed + ':always-auth', 'user')\n  } else if (c.username || c.password || c.email) {\n    assert(c.username, 'must include username')\n    assert(c.password, 'must include password')\n    assert(c.email, 'must include email address')\n\n    this.del(nerfed + ':_authToken', 'user')\n\n    var encoded = Buffer.from(c.password, 'utf8').toString('base64')\n    this.set(nerfed + ':_password', encoded, 'user')\n    this.set(nerfed + ':username', c.username, 'user')\n    this.set(nerfed + ':email', c.email, 'user')\n\n    if (c.alwaysAuth !== undefined) {\n      this.set(nerfed + ':always-auth', c.alwaysAuth, 'user')\n    } else {\n      this.del(nerfed + ':always-auth', 'user')\n    }\n  } else {\n    throw new Error('No credentials to set.')\n  }\n}\n"]}