{"version":3,"sources":["../../../../../node_modules/npm/lib/config/fetch-opts.js"],"names":["url","require","module","exports","fromPacote","opts","cache","getCacheMode","cacheManager","ca","cert","headers","getHeaders","registry","key","localAddress","maxSockets","proxy","referer","refer","retry","strictSSL","timeout","uid","gid","offline","preferOffline","preferOnline","uri","Object","assign","isFromCI","projectScope","npmSession","userAgent","auth","registryKey","shouldAuth","alwaysAuth","parse","host","token","authorization","username","password","encoded","Buffer","from","toString","_auth","parsed","formatted","format","pathname","slashes","resolve"],"mappings":"AAAA;;AAEA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;;AAEAC,OAAOC,OAAP,CAAeC,UAAf,GAA4BA,UAA5B;;AAEA,SAASA,UAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAO;AACLC,WAAOC,aAAaF,IAAb,CADF;AAELG,kBAAcH,KAAKC,KAFd;AAGLG,QAAIJ,KAAKI,EAHJ;AAILC,UAAML,KAAKK,IAJN;AAKLC,aAASC,WAAW,EAAX,EAAeP,KAAKQ,QAApB,EAA8BR,IAA9B,CALJ;AAMLS,SAAKT,KAAKS,GANL;AAOLC,kBAAcV,KAAKU,YAPd;AAQLC,gBAAYX,KAAKW,UARZ;AASLC,WAAOZ,KAAKY,KATP;AAULC,aAASb,KAAKc,KAVT;AAWLC,WAAOf,KAAKe,KAXP;AAYLC,eAAW,CAAC,CAAChB,KAAKgB,SAZb;AAaLC,aAASjB,KAAKiB,OAbT;AAcLC,SAAKlB,KAAKkB,GAdL;AAeLC,SAAKnB,KAAKmB;AAfL,GAAP;AAiBD;;AAED,SAASjB,YAAT,CAAuBF,IAAvB,EAA6B;AAC3B,SAAOA,KAAKoB,OAAL,GACH,gBADG,GAEHpB,KAAKqB,aAAL,GACE,aADF,GAEErB,KAAKsB,YAAL,GACE,UADF,GAEE,SANR;AAOD;;AAED,SAASf,UAAT,CAAqBgB,GAArB,EAA0Bf,QAA1B,EAAoCR,IAApC,EAA0C;AACxC,MAAMM,UAAUkB,OAAOC,MAAP,CAAc;AAC5B,iBAAazB,KAAK0B,QADU;AAE5B,iBAAa1B,KAAK2B,YAFU;AAG5B,mBAAe3B,KAAK4B,UAHQ;AAI5B,kBAAc5B,KAAK6B,SAJS;AAK5B,eAAW7B,KAAKc;AALY,GAAd,EAMbd,KAAKM,OANQ,CAAhB;AAOA;AACA,MAAIwB,OACF9B,KAAK8B,IAAL,IACA9B,KAAK8B,IAAL,CAAUC,YAAYvB,QAAZ,CAAV,CAFS,IAGNR,KAAK8B,IAHV;AAIA;AACA;AACA,MAAME,aAAaF,SACjBA,KAAKG,UAAL,IACAtC,IAAIuC,KAAJ,CAAUX,GAAV,EAAeY,IAAf,KAAwBxC,IAAIuC,KAAJ,CAAU1B,QAAV,EAAoB2B,IAF3B,CAAnB;AAIA,MAAIH,cAAcF,KAAKM,KAAvB,EAA8B;AAC5B9B,YAAQ+B,aAAR,eAAkCP,KAAKM,KAAvC;AACD,GAFD,MAEO,IAAIJ,cAAcF,KAAKQ,QAAnB,IAA+BR,KAAKS,QAAxC,EAAkD;AACvD,QAAMC,UAAUC,OAAOC,IAAP,CACXZ,KAAKQ,QADM,SACMR,KAAKS,QADX,EACuB,MADvB,EAEdI,QAFc,CAEL,QAFK,CAAhB;AAGArC,YAAQ+B,aAAR,cAAiCG,OAAjC;AACD,GALM,MAKA,IAAIR,cAAcF,KAAKc,KAAvB,EAA8B;AACnCtC,YAAQ+B,aAAR,cAAiCP,KAAKc,KAAtC;AACD;AACD,SAAOtC,OAAP;AACD;;AAED,SAASyB,WAAT,CAAsBvB,QAAtB,EAAgC;AAC9B,MAAMqC,SAASlD,IAAIuC,KAAJ,CAAU1B,QAAV,CAAf;AACA,MAAMsC,YAAYnD,IAAIoD,MAAJ,CAAW;AAC3BZ,UAAMU,OAAOV,IADc;AAE3Ba,cAAUH,OAAOG,QAFU;AAG3BC,aAASJ,OAAOI;AAHW,GAAX,CAAlB;AAKA,SAAOtD,IAAIuD,OAAJ,CAAYJ,SAAZ,EAAuB,GAAvB,CAAP;AACD","file":"fetch-opts.js","sourcesContent":["'use strict'\n\nconst url = require('url')\n\nmodule.exports.fromPacote = fromPacote\n\nfunction fromPacote (opts) {\n  return {\n    cache: getCacheMode(opts),\n    cacheManager: opts.cache,\n    ca: opts.ca,\n    cert: opts.cert,\n    headers: getHeaders('', opts.registry, opts),\n    key: opts.key,\n    localAddress: opts.localAddress,\n    maxSockets: opts.maxSockets,\n    proxy: opts.proxy,\n    referer: opts.refer,\n    retry: opts.retry,\n    strictSSL: !!opts.strictSSL,\n    timeout: opts.timeout,\n    uid: opts.uid,\n    gid: opts.gid\n  }\n}\n\nfunction getCacheMode (opts) {\n  return opts.offline\n    ? 'only-if-cached'\n    : opts.preferOffline\n      ? 'force-cache'\n      : opts.preferOnline\n        ? 'no-cache'\n        : 'default'\n}\n\nfunction getHeaders (uri, registry, opts) {\n  const headers = Object.assign({\n    'npm-in-ci': opts.isFromCI,\n    'npm-scope': opts.projectScope,\n    'npm-session': opts.npmSession,\n    'user-agent': opts.userAgent,\n    'referer': opts.refer\n  }, opts.headers)\n  // check for auth settings specific to this registry\n  let auth = (\n    opts.auth &&\n    opts.auth[registryKey(registry)]\n  ) || opts.auth\n  // If a tarball is hosted on a different place than the manifest, only send\n  // credentials on `alwaysAuth`\n  const shouldAuth = auth && (\n    auth.alwaysAuth ||\n    url.parse(uri).host === url.parse(registry).host\n  )\n  if (shouldAuth && auth.token) {\n    headers.authorization = `Bearer ${auth.token}`\n  } else if (shouldAuth && auth.username && auth.password) {\n    const encoded = Buffer.from(\n      `${auth.username}:${auth.password}`, 'utf8'\n    ).toString('base64')\n    headers.authorization = `Basic ${encoded}`\n  } else if (shouldAuth && auth._auth) {\n    headers.authorization = `Basic ${auth._auth}`\n  }\n  return headers\n}\n\nfunction registryKey (registry) {\n  const parsed = url.parse(registry)\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  })\n  return url.resolve(formatted, '.')\n}\n"]}