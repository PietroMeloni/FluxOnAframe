{"version":3,"sources":["../../../../../node_modules/npm/lib/config/get-credentials-by-uri.js"],"names":["assert","require","toNerfDart","module","exports","getCredentialsByURI","uri","nerfed","defnerf","get","c","scope","token","undefined","password","username","email","auth","alwaysAuth","val","authDef","userDef","passDef","Buffer","from","toString","split","shift","join"],"mappings":"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","file":"get-credentials-by-uri.js","sourcesContent":["var assert = require('assert')\n\nvar toNerfDart = require('./nerf-dart.js')\n\nmodule.exports = getCredentialsByURI\n\nfunction getCredentialsByURI (uri) {\n  assert(uri && typeof uri === 'string', 'registry URL is required')\n  var nerfed = toNerfDart(uri)\n  var defnerf = toNerfDart(this.get('registry'))\n\n  // hidden class micro-optimization\n  var c = {\n    scope: nerfed,\n    token: undefined,\n    password: undefined,\n    username: undefined,\n    email: undefined,\n    auth: undefined,\n    alwaysAuth: undefined\n  }\n\n  // used to override scope matching for tokens as well as legacy auth\n  if (this.get(nerfed + ':always-auth') !== undefined) {\n    var val = this.get(nerfed + ':always-auth')\n    c.alwaysAuth = val === 'false' ? false : !!val\n  } else if (this.get('always-auth') !== undefined) {\n    c.alwaysAuth = this.get('always-auth')\n  }\n\n  if (this.get(nerfed + ':_authToken')) {\n    c.token = this.get(nerfed + ':_authToken')\n    // the bearer token is enough, don't confuse things\n    return c\n  }\n\n  // Handle the old-style _auth=<base64> style for the default\n  // registry, if set.\n  var authDef = this.get('_auth')\n  var userDef = this.get('username')\n  var passDef = this.get('_password')\n  if (authDef && !(userDef && passDef)) {\n    authDef = Buffer.from(authDef, 'base64').toString()\n    authDef = authDef.split(':')\n    userDef = authDef.shift()\n    passDef = authDef.join(':')\n  }\n\n  if (this.get(nerfed + ':_password')) {\n    c.password = Buffer.from(this.get(nerfed + ':_password'), 'base64').toString('utf8')\n  } else if (nerfed === defnerf && passDef) {\n    c.password = passDef\n  }\n\n  if (this.get(nerfed + ':username')) {\n    c.username = this.get(nerfed + ':username')\n  } else if (nerfed === defnerf && userDef) {\n    c.username = userDef\n  }\n\n  if (this.get(nerfed + ':email')) {\n    c.email = this.get(nerfed + ':email')\n  } else if (this.get('email')) {\n    c.email = this.get('email')\n  }\n\n  if (c.username && c.password) {\n    c.auth = Buffer.from(c.username + ':' + c.password).toString('base64')\n  }\n\n  return c\n}\n"]}