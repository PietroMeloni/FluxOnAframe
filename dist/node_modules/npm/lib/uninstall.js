'use strict';
// remove a package.

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

module.exports = uninstall;

var path = require('path');
var validate = require('aproba');
var readJson = require('read-package-json');
var iferr = require('iferr');
var npm = require('./npm.js');
var Installer = require('./install.js').Installer;
var getSaveType = require('./install/save.js').getSaveType;
var removeDeps = require('./install/deps.js').removeDeps;
var log = require('npmlog');
var usage = require('./utils/usage');

uninstall.usage = usage('uninstall', 'npm uninstall [<@scope>/]<pkg>[@<version>]... [--save-prod|--save-dev|--save-optional] [--no-save]');

uninstall.completion = require('./utils/completion/installed-shallow.js');

function uninstall(args, cb) {
  validate('AF', arguments);
  // the /path/to/node_modules/..
  var dryrun = !!npm.config.get('dry-run');

  if (args.length === 1 && args[0] === '.') args = [];

  var where = npm.config.get('global') || !args.length ? path.resolve(npm.globalDir, '..') : npm.prefix;

  args = args.filter(function (a) {
    return path.resolve(a) !== where;
  });

  if (args.length) {
    new Uninstaller(where, dryrun, args).run(cb);
  } else {
    // remove this package from the global space, if it's installed there
    readJson(path.resolve(npm.localPrefix, 'package.json'), function (er, pkg) {
      if (er && er.code !== 'ENOENT' && er.code !== 'ENOTDIR') return cb(er);
      if (er) return cb(uninstall.usage);
      new Uninstaller(where, dryrun, [pkg.name]).run(cb);
    });
  }
}

var Uninstaller = function (_Installer) {
  _inherits(Uninstaller, _Installer);

  function Uninstaller(where, dryrun, args) {
    _classCallCheck(this, Uninstaller);

    var _this = _possibleConstructorReturn(this, (Uninstaller.__proto__ || Object.getPrototypeOf(Uninstaller)).call(this, where, dryrun, args));

    _this.remove = [];
    return _this;
  }

  _createClass(Uninstaller, [{
    key: 'loadArgMetadata',
    value: function loadArgMetadata(next) {
      this.args = this.args.map(function (arg) {
        return { name: arg };
      });
      next();
    }
  }, {
    key: 'loadAllDepsIntoIdealTree',
    value: function loadAllDepsIntoIdealTree(cb) {
      var _this2 = this;

      validate('F', arguments);
      this.remove = this.args;
      this.args = [];
      log.silly('uninstall', 'loadAllDepsIntoIdealTree');
      var saveDeps = getSaveType();

      _get(Uninstaller.prototype.__proto__ || Object.getPrototypeOf(Uninstaller.prototype), 'loadAllDepsIntoIdealTree', this).call(this, iferr(cb, function () {
        removeDeps(_this2.remove, _this2.idealTree, saveDeps, cb);
      }));
    }

    // no top level lifecycles on rm

  }, {
    key: 'runPreinstallTopLevelLifecycles',
    value: function runPreinstallTopLevelLifecycles(cb) {
      cb();
    }
  }, {
    key: 'runPostinstallTopLevelLifecycles',
    value: function runPostinstallTopLevelLifecycles(cb) {
      cb();
    }
  }]);

  return Uninstaller;
}(Installer);

module.exports.Uninstaller = Uninstaller;
//# sourceMappingURL=uninstall.js.map