{"version":3,"sources":["../../../../node_modules/npm/lib/uninstall.js"],"names":["module","exports","uninstall","path","require","validate","readJson","iferr","npm","Installer","getSaveType","removeDeps","log","usage","completion","args","cb","arguments","dryrun","config","get","length","where","resolve","globalDir","prefix","filter","a","Uninstaller","run","localPrefix","er","pkg","code","name","remove","next","map","arg","silly","saveDeps","idealTree"],"mappings":"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","file":"uninstall.js","sourcesContent":["'use strict'\n// remove a package.\n\nmodule.exports = uninstall\n\nconst path = require('path')\nconst validate = require('aproba')\nconst readJson = require('read-package-json')\nconst iferr = require('iferr')\nconst npm = require('./npm.js')\nconst Installer = require('./install.js').Installer\nconst getSaveType = require('./install/save.js').getSaveType\nconst removeDeps = require('./install/deps.js').removeDeps\nconst log = require('npmlog')\nconst usage = require('./utils/usage')\n\nuninstall.usage = usage(\n  'uninstall',\n  'npm uninstall [<@scope>/]<pkg>[@<version>]... [--save-prod|--save-dev|--save-optional] [--no-save]'\n)\n\nuninstall.completion = require('./utils/completion/installed-shallow.js')\n\nfunction uninstall (args, cb) {\n  validate('AF', arguments)\n  // the /path/to/node_modules/..\n  const dryrun = !!npm.config.get('dry-run')\n\n  if (args.length === 1 && args[0] === '.') args = []\n\n  const where = npm.config.get('global') || !args.length\n    ? path.resolve(npm.globalDir, '..')\n    : npm.prefix\n\n  args = args.filter(function (a) {\n    return path.resolve(a) !== where\n  })\n\n  if (args.length) {\n    new Uninstaller(where, dryrun, args).run(cb)\n  } else {\n    // remove this package from the global space, if it's installed there\n    readJson(path.resolve(npm.localPrefix, 'package.json'), function (er, pkg) {\n      if (er && er.code !== 'ENOENT' && er.code !== 'ENOTDIR') return cb(er)\n      if (er) return cb(uninstall.usage)\n      new Uninstaller(where, dryrun, [pkg.name]).run(cb)\n    })\n  }\n}\n\nclass Uninstaller extends Installer {\n  constructor (where, dryrun, args) {\n    super(where, dryrun, args)\n    this.remove = []\n  }\n\n  loadArgMetadata (next) {\n    this.args = this.args.map(function (arg) { return {name: arg} })\n    next()\n  }\n\n  loadAllDepsIntoIdealTree (cb) {\n    validate('F', arguments)\n    this.remove = this.args\n    this.args = []\n    log.silly('uninstall', 'loadAllDepsIntoIdealTree')\n    const saveDeps = getSaveType()\n\n    super.loadAllDepsIntoIdealTree(iferr(cb, () => {\n      removeDeps(this.remove, this.idealTree, saveDeps, cb)\n    }))\n  }\n\n  // no top level lifecycles on rm\n  runPreinstallTopLevelLifecycles (cb) { cb() }\n  runPostinstallTopLevelLifecycles (cb) { cb() }\n}\n\nmodule.exports.Uninstaller = Uninstaller\n"]}