'use strict';

module.exports = update;

var url = require('url');
var log = require('npmlog');
var Bluebird = require('bluebird');
var npm = require('./npm.js');
var Installer = require('./install.js').Installer;
var usage = require('./utils/usage');
var outdated = Bluebird.promisify(npm.commands.outdated);

update.usage = usage('update', 'npm update [-g] [<pkg>...]');

update.completion = npm.commands.outdated.completion;

function update(args, cb) {
  return update_(args).asCallback(cb);
}

function update_(args) {
  var dryrun = false;
  if (npm.config.get('dry-run')) dryrun = true;

  log.verbose('update', 'computing outdated modules to update');
  return outdated(args, true).then(function (rawOutdated) {
    var outdated = rawOutdated.map(function (ww) {
      return {
        dep: ww[0],
        depname: ww[1],
        current: ww[2],
        wanted: ww[3],
        latest: ww[4],
        req: ww[5],
        what: ww[1] + '@' + ww[3]
      };
    });

    var wanted = outdated.filter(function (ww) {
      if (ww.current === ww.wanted && ww.wanted !== ww.latest) {
        log.verbose('outdated', 'not updating', ww.depname, "because it's currently at the maximum version that matches its specified semver range");
      }
      return ww.current !== ww.wanted && ww.latest !== 'linked';
    });
    if (wanted.length === 0) return;

    log.info('outdated', 'updating', wanted);
    var toInstall = {};

    wanted.forEach(function (ww) {
      // use the initial installation method (repo, tar, git) for updating
      if (url.parse(ww.req).protocol) ww.what = ww.req;

      var where = ww.dep.parent && ww.dep.parent.path || ww.dep.path;
      var isTransitive = !(ww.dep.requiredBy || []).some(function (p) {
        return p.isTop;
      });
      var key = where + ':' + String(isTransitive);
      if (!toInstall[key]) toInstall[key] = { where: where, opts: { saveOnlyLock: isTransitive }, what: [] };
      if (toInstall[key].what.indexOf(ww.what) === -1) toInstall[key].what.push(ww.what);
    });
    return Bluebird.each(Object.keys(toInstall), function (key) {
      var deps = toInstall[key];
      var inst = new Installer(deps.where, dryrun, deps.what, deps.opts);
      return inst.run();
    });
  });
}
//# sourceMappingURL=update.js.map