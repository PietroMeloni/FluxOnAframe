{"version":3,"sources":["../../../../node_modules/npm/lib/completion.js"],"names":["module","exports","completion","usage","npm","require","npmconf","configDefs","defs","configTypes","types","shorthands","nopt","configNames","Object","keys","filter","e","charAt","shorthandNames","allConfs","concat","once","isWindowsShell","output","opts","cb","w","fs","path","bashExists","zshExists","stat","resolve","process","env","HOME","er","next","out","push","map","m","args","Error","code","errno","ENOTSUP","COMP_CWORD","undefined","COMP_LINE","COMP_POINT","dumpScript","console","error","words","unescape","word","line","point","partialLine","substr","partialWords","slice","partialWord","i","length","lineLength","raw","wrapCb","indexOf","configCompl","isFlag","configValueCompl","parsed","conf","cmd","argv","remain","cmdCompl","forEach","k","config","set","commands","p","__dirname","readFile","d","replace","stdout","write","on","escape","match","compls","Array","isArray","c","join","stack","split","dashes","no","flags","f","Boolean","fullList"],"mappings":"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","file":"completion.js","sourcesContent":["module.exports = completion\n\ncompletion.usage = 'source <(npm completion)'\n\nvar npm = require('./npm.js')\nvar npmconf = require('./config/core.js')\nvar configDefs = npmconf.defs\nvar configTypes = configDefs.types\nvar shorthands = configDefs.shorthands\nvar nopt = require('nopt')\nvar configNames = Object.keys(configTypes)\n  .filter(function (e) { return e.charAt(0) !== '_' })\nvar shorthandNames = Object.keys(shorthands)\nvar allConfs = configNames.concat(shorthandNames)\nvar once = require('once')\nvar isWindowsShell = require('./utils/is-windows-shell.js')\nvar output = require('./utils/output.js')\n\ncompletion.completion = function (opts, cb) {\n  if (opts.w > 3) return cb()\n\n  var fs = require('graceful-fs')\n  var path = require('path')\n  var bashExists = null\n  var zshExists = null\n  fs.stat(path.resolve(process.env.HOME, '.bashrc'), function (er) {\n    bashExists = !er\n    next()\n  })\n  fs.stat(path.resolve(process.env.HOME, '.zshrc'), function (er) {\n    zshExists = !er\n    next()\n  })\n  function next () {\n    if (zshExists === null || bashExists === null) return\n    var out = []\n    if (zshExists) out.push('~/.zshrc')\n    if (bashExists) out.push('~/.bashrc')\n    if (opts.w === 2) {\n      out = out.map(function (m) {\n        return ['>>', m]\n      })\n    }\n    cb(null, out)\n  }\n}\n\nfunction completion (args, cb) {\n  if (isWindowsShell) {\n    var e = new Error('npm completion supported only in MINGW / Git bash on Windows')\n    e.code = 'ENOTSUP'\n    e.errno = require('constants').ENOTSUP // eslint-disable-line node/no-deprecated-api\n    return cb(e)\n  }\n\n  // if the COMP_* isn't in the env, then just dump the script.\n  if (process.env.COMP_CWORD === undefined ||\n      process.env.COMP_LINE === undefined ||\n      process.env.COMP_POINT === undefined) {\n    return dumpScript(cb)\n  }\n\n  console.error(process.env.COMP_CWORD)\n  console.error(process.env.COMP_LINE)\n  console.error(process.env.COMP_POINT)\n\n  // get the partial line and partial word,\n  // if the point isn't at the end.\n  // ie, tabbing at: npm foo b|ar\n  var w = +process.env.COMP_CWORD\n  var words = args.map(unescape)\n  var word = words[w]\n  var line = process.env.COMP_LINE\n  var point = +process.env.COMP_POINT\n  var partialLine = line.substr(0, point)\n  var partialWords = words.slice(0, w)\n\n  // figure out where in that last word the point is.\n  var partialWord = args[w]\n  var i = partialWord.length\n  while (partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) {\n    i--\n  }\n  partialWord = unescape(partialWord.substr(0, i))\n  partialWords.push(partialWord)\n\n  var opts = {\n    words: words,\n    w: w,\n    word: word,\n    line: line,\n    lineLength: line.length,\n    point: point,\n    partialLine: partialLine,\n    partialWords: partialWords,\n    partialWord: partialWord,\n    raw: args\n  }\n\n  cb = wrapCb(cb, opts)\n\n  console.error(opts)\n\n  if (partialWords.slice(0, -1).indexOf('--') === -1) {\n    if (word.charAt(0) === '-') return configCompl(opts, cb)\n    if (words[w - 1] &&\n        words[w - 1].charAt(0) === '-' &&\n        !isFlag(words[w - 1])) {\n      // awaiting a value for a non-bool config.\n      // don't even try to do this for now\n      console.error('configValueCompl')\n      return configValueCompl(opts, cb)\n    }\n  }\n\n  // try to find the npm command.\n  // it's the first thing after all the configs.\n  // take a little shortcut and use npm's arg parsing logic.\n  // don't have to worry about the last arg being implicitly\n  // boolean'ed, since the last block will catch that.\n  var parsed = opts.conf =\n    nopt(configTypes, shorthands, partialWords.slice(0, -1), 0)\n  // check if there's a command already.\n  console.error(parsed)\n  var cmd = parsed.argv.remain[1]\n  if (!cmd) return cmdCompl(opts, cb)\n\n  Object.keys(parsed).forEach(function (k) {\n    npm.config.set(k, parsed[k])\n  })\n\n  // at this point, if words[1] is some kind of npm command,\n  // then complete on it.\n  // otherwise, do nothing\n  cmd = npm.commands[cmd]\n  if (cmd && cmd.completion) return cmd.completion(opts, cb)\n\n  // nothing to do.\n  cb()\n}\n\nfunction dumpScript (cb) {\n  var fs = require('graceful-fs')\n  var path = require('path')\n  var p = path.resolve(__dirname, 'utils/completion.sh')\n\n  // The Darwin patch below results in callbacks first for the write and then\n  // for the error handler, so make sure we only call our callback once.\n  cb = once(cb)\n\n  fs.readFile(p, 'utf8', function (er, d) {\n    if (er) return cb(er)\n    d = d.replace(/^#!.*?\\n/, '')\n\n    process.stdout.write(d, function () { cb() })\n    process.stdout.on('error', function (er) {\n      // Darwin is a pain sometimes.\n      //\n      // This is necessary because the \"source\" or \".\" program in\n      // bash on OS X closes its file argument before reading\n      // from it, meaning that you get exactly 1 write, which will\n      // work most of the time, and will always raise an EPIPE.\n      //\n      // Really, one should not be tossing away EPIPE errors, or any\n      // errors, so casually.  But, without this, `. <(npm completion)`\n      // can never ever work on OS X.\n      if (er.errno === 'EPIPE') er = null\n      cb(er)\n    })\n  })\n}\n\nfunction unescape (w) {\n  if (w.charAt(0) === '\\'') return w.replace(/^'|'$/g, '')\n  else return w.replace(/\\\\ /g, ' ')\n}\n\nfunction escape (w) {\n  if (!w.match(/\\s+/)) return w\n  return '\\'' + w + '\\''\n}\n\n// The command should respond with an array.  Loop over that,\n// wrapping quotes around any that have spaces, and writing\n// them to stdout.  Use console.log, not the outfd config.\n// If any of the items are arrays, then join them with a space.\n// Ie, returning ['a', 'b c', ['d', 'e']] would allow it to expand\n// to: 'a', 'b c', or 'd' 'e'\nfunction wrapCb (cb, opts) {\n  return function (er, compls) {\n    if (!Array.isArray(compls)) compls = compls ? [compls] : []\n    compls = compls.map(function (c) {\n      if (Array.isArray(c)) c = c.map(escape).join(' ')\n      else c = escape(c)\n      return c\n    })\n\n    if (opts.partialWord) {\n      compls = compls.filter(function (c) {\n        return c.indexOf(opts.partialWord) === 0\n      })\n    }\n\n    console.error([er && er.stack, compls, opts.partialWord])\n    if (er || compls.length === 0) return cb(er)\n\n    output(compls.join('\\n'))\n    cb()\n  }\n}\n\n// the current word has a dash.  Return the config names,\n// with the same number of dashes as the current word has.\nfunction configCompl (opts, cb) {\n  var word = opts.word\n  var split = word.match(/^(-+)((?:no-)*)(.*)$/)\n  var dashes = split[1]\n  var no = split[2]\n  var flags = configNames.filter(isFlag)\n  console.error(flags)\n\n  return cb(null, allConfs.map(function (c) {\n    return dashes + c\n  }).concat(flags.map(function (f) {\n    return dashes + (no || 'no-') + f\n  })))\n}\n\n// expand with the valid values of various config values.\n// not yet implemented.\nfunction configValueCompl (opts, cb) {\n  console.error('configValue', opts)\n  return cb(null, [])\n}\n\n// check if the thing is a flag or not.\nfunction isFlag (word) {\n  // shorthands never take args.\n  var split = word.match(/^(-*)((?:no-)+)?(.*)$/)\n  var no = split[2]\n  var conf = split[3]\n  return no || configTypes[conf] === Boolean || shorthands[conf]\n}\n\n// complete against the npm commands\nfunction cmdCompl (opts, cb) {\n  return cb(null, npm.fullList)\n}\n"]}