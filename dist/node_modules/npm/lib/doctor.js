'use strict';

var ansiTrim = require('./utils/ansi-trim');
var chain = require('slide').chain;
var color = require('ansicolors');
var defaultRegistry = require('./config/defaults').defaults.registry;
var log = require('npmlog');
var npm = require('./npm');
var output = require('./utils/output');
var path = require('path');
var semver = require('semver');
var styles = require('ansistyles');
var table = require('text-table');

// steps
var checkFilesPermission = require('./doctor/check-files-permission');
var checkPing = require('./doctor/check-ping');
var getGitPath = require('./doctor/get-git-path');
var getLatestNodejsVersion = require('./doctor/get-latest-nodejs-version');
var getLatestNpmVersion = require('./doctor/get-latest-npm-version');
var verifyCachedFiles = require('./doctor/verify-cached-files');

var globalNodeModules = path.join(npm.config.globalPrefix, 'lib', 'node_modules');
var localNodeModules = path.join(npm.config.localPrefix, 'node_modules');

module.exports = doctor;

doctor.usage = 'npm doctor';

function doctor(args, silent, cb) {
  args = args || {};
  if (typeof cb !== 'function') {
    cb = silent;
    silent = false;
  }

  var actionsToRun = [[checkPing], [getLatestNpmVersion], [getLatestNodejsVersion, args['node-url']], [getGitPath], [checkFilesPermission, npm.cache, 4, 6], [checkFilesPermission, globalNodeModules, 4, 4], [checkFilesPermission, localNodeModules, 6, 6], [verifyCachedFiles, path.join(npm.cache, '_cacache')]];

  log.info('doctor', 'Running checkup');
  chain(actionsToRun, function (stderr, stdout) {
    if (stderr && stderr.message !== 'not found: git') return cb(stderr);
    var list = makePretty(stdout);
    var outHead = ['Check', 'Value', 'Recommendation'];
    var outBody = list;

    if (npm.color) {
      outHead = outHead.map(function (item) {
        return styles.underline(item);
      });
      outBody = outBody.map(function (item) {
        if (item[2]) {
          item[0] = color.red(item[0]);
          item[2] = color.magenta(item[2]);
        }
        return item;
      });
    }

    var outTable = [outHead].concat(outBody);
    var tableOpts = {
      stringLength: function stringLength(s) {
        return ansiTrim(s).length;
      }
    };

    if (!silent) output(table(outTable, tableOpts));

    cb(null, list);
  });
}

function makePretty(p) {
  var ping = p[1];
  var npmLTS = p[2];
  var nodeLTS = p[3].replace('v', '');
  var whichGit = p[4] || 'not installed';
  var readbleCaches = p[5] ? 'ok' : 'notOk';
  var executableGlobalModules = p[6] ? 'ok' : 'notOk';
  var executableLocalModules = p[7] ? 'ok' : 'notOk';
  var cacheStatus = p[8] ? 'verified ' + p[8].verifiedContent + ' tarballs' : 'notOk';
  var npmV = npm.version;
  var nodeV = process.version.replace('v', '');
  var registry = npm.config.get('registry');
  var list = [['npm ping', ping], ['npm -v', 'v' + npmV], ['node -v', 'v' + nodeV], ['npm config get registry', registry], ['which git', whichGit], ['Perms check on cached files', readbleCaches], ['Perms check on global node_modules', executableGlobalModules], ['Perms check on local node_modules', executableLocalModules], ['Verify cache contents', cacheStatus]];

  if (p[0] !== 200) list[0][2] = 'Check your internet connection';
  if (!semver.satisfies(npmV, '>=' + npmLTS)) list[1][2] = 'Use npm v' + npmLTS;
  if (!semver.satisfies(nodeV, '>=' + nodeLTS)) list[2][2] = 'Use node v' + nodeLTS;
  if (registry !== defaultRegistry) list[3][2] = 'Try `npm config set registry ' + defaultRegistry + '`';
  if (whichGit === 'not installed') list[4][2] = 'Install git and ensure it\'s in your PATH.';
  if (readbleCaches !== 'ok') list[5][2] = 'Check the permissions of your files in ' + npm.config.get('cache');
  if (executableGlobalModules !== 'ok') list[6][2] = globalNodeModules + ' must be readable and writable by the current user.';
  if (executableLocalModules !== 'ok') list[7][2] = localNodeModules + ' must be readable and writable by the current user.';

  return list;
}
//# sourceMappingURL=doctor.js.map