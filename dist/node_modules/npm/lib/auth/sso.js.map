{"version":3,"sources":["../../../../../node_modules/npm/lib/auth/sso.js"],"names":["log","require","npm","output","openUrl","module","exports","login","creds","registry","scope","cb","ssoType","config","get","Error","params","auth","username","password","email","authType","adduser","er","doc","token","sso","pollForSession","err","info","scopeMessage","whoami","statusCode","setTimeout"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,MAAMD,QAAQ,WAAR,CAAV;AACA,IAAIE,SAASF,QAAQ,iBAAR,CAAb;AACA,IAAIG,UAAUH,QAAQ,mBAAR,CAAd;;AAEAI,OAAOC,OAAP,CAAeC,KAAf,GAAuB,SAASA,KAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,KAAjC,EAAwCC,EAAxC,EAA4C;AACjE,MAAIC,UAAUV,IAAIW,MAAJ,CAAWC,GAAX,CAAe,UAAf,CAAd;AACA,MAAI,CAACF,OAAL,EAAc;AAAE,WAAOD,GAAG,IAAII,KAAJ,CAAU,0BAAV,CAAH,CAAP;AAAkD;;AAElE,MAAIC,SAAS;AACX;AACA;AACAC,UAAM;AACJC,gBAAU,SAASN,OAAT,GAAmB,kBADzB;AAEJO,gBAAU,aAFN;AAGJC,aAAO,mBAHH;AAIJC,gBAAUT;AAJN;AAHK,GAAb;AAUAV,MAAIO,QAAJ,CAAaa,OAAb,CAAqBb,QAArB,EAA+BO,MAA/B,EAAuC,UAAUO,EAAV,EAAcC,GAAd,EAAmB;AACxD,QAAID,EAAJ,EAAQ,OAAOZ,GAAGY,EAAH,CAAP;AACR,QAAI,CAACC,GAAD,IAAQ,CAACA,IAAIC,KAAjB,EAAwB,OAAOd,GAAG,IAAII,KAAJ,CAAU,uBAAV,CAAH,CAAP;AACxB,QAAI,CAACS,IAAIE,GAAT,EAAc,OAAOf,GAAG,IAAII,KAAJ,CAAU,iCAAV,CAAH,CAAP;;AAEdX,YAAQoB,IAAIE,GAAZ,EAAiB,qCAAjB,EAAwD,YAAY;AAClEC,qBAAelB,QAAf,EAAyBe,IAAIC,KAA7B,EAAoC,UAAUG,GAAV,EAAeV,QAAf,EAAyB;AAC3D,YAAIU,GAAJ,EAAS,OAAOjB,GAAGiB,GAAH,CAAP;;AAET5B,YAAI6B,IAAJ,CAAS,SAAT,EAAoB,oBAApB,EAA0CX,QAA1C;AACA,YAAIY,eAAepB,QAAQ,eAAeA,KAAvB,GAA+B,EAAlD;AACAP,eAAO,0BAAP,EAAmCe,QAAnC,EAA6CY,YAA7C,EAA2DrB,QAA3D;;AAEAE,WAAG,IAAH,EAAS,EAAEc,OAAOD,IAAIC,KAAb,EAAT;AACD,OARD;AASD,KAVD;AAWD,GAhBD;AAiBD,CA/BD;;AAiCA,SAASE,cAAT,CAAyBlB,QAAzB,EAAmCgB,KAAnC,EAA0Cd,EAA1C,EAA8C;AAC5CX,MAAI6B,IAAJ,CAAS,SAAT,EAAoB,mCAApB;AACA3B,MAAIO,QAAJ,CAAasB,MAAb,CAAoBtB,QAApB,EAA8B;AAC5BQ,UAAM;AACJQ,aAAOA;AADH;AADsB,GAA9B,EAIG,UAAUF,EAAV,EAAcL,QAAd,EAAwB;AACzB,QAAIK,MAAMA,GAAGS,UAAH,KAAkB,GAA5B,EAAiC;AAC/BrB,SAAGY,EAAH;AACD,KAFD,MAEO,IAAI,CAACL,QAAL,EAAe;AACpBe,iBAAW,YAAY;AACrBN,uBAAelB,QAAf,EAAyBgB,KAAzB,EAAgCd,EAAhC;AACD,OAFD,EAEGT,IAAIW,MAAJ,CAAWC,GAAX,CAAe,oBAAf,CAFH;AAGD,KAJM,MAIA;AACLH,SAAG,IAAH,EAASO,QAAT;AACD;AACF,GAdD;AAeD","file":"sso.js","sourcesContent":["var log = require('npmlog')\nvar npm = require('../npm.js')\nvar output = require('../utils/output')\nvar openUrl = require('../utils/open-url')\n\nmodule.exports.login = function login (creds, registry, scope, cb) {\n  var ssoType = npm.config.get('sso-type')\n  if (!ssoType) { return cb(new Error('Missing option: sso-type')) }\n\n  var params = {\n    // We're reusing the legacy login endpoint, so we need some dummy\n    // stuff here to pass validation. They're never used.\n    auth: {\n      username: 'npm_' + ssoType + '_auth_dummy_user',\n      password: 'placeholder',\n      email: 'support@npmjs.com',\n      authType: ssoType\n    }\n  }\n  npm.registry.adduser(registry, params, function (er, doc) {\n    if (er) return cb(er)\n    if (!doc || !doc.token) return cb(new Error('no SSO token returned'))\n    if (!doc.sso) return cb(new Error('no SSO URL returned by services'))\n\n    openUrl(doc.sso, 'to complete your login please visit', function () {\n      pollForSession(registry, doc.token, function (err, username) {\n        if (err) return cb(err)\n\n        log.info('adduser', 'Authorized user %s', username)\n        var scopeMessage = scope ? ' to scope ' + scope : ''\n        output('Logged in as %s%s on %s.', username, scopeMessage, registry)\n\n        cb(null, { token: doc.token })\n      })\n    })\n  })\n}\n\nfunction pollForSession (registry, token, cb) {\n  log.info('adduser', 'Polling for validated SSO session')\n  npm.registry.whoami(registry, {\n    auth: {\n      token: token\n    }\n  }, function (er, username) {\n    if (er && er.statusCode !== 401) {\n      cb(er)\n    } else if (!username) {\n      setTimeout(function () {\n        pollForSession(registry, token, cb)\n      }, npm.config.get('sso-poll-frequency'))\n    } else {\n      cb(null, username)\n    }\n  })\n}\n"]}