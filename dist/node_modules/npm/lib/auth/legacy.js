'use strict';

var read = require('../utils/read-user-info.js');
var profile = require('npm-profile');
var log = require('npmlog');
var npm = require('../npm.js');
var output = require('../utils/output.js');
var pacoteOpts = require('../config/pacote');
var fetchOpts = require('../config/fetch-opts');
var openUrl = require('../utils/open-url');

var openerPromise = function openerPromise(url) {
  return new Promise(function (resolve, reject) {
    openUrl(url, 'to complete your login please visit', function (er) {
      return er ? reject(er) : resolve();
    });
  });
};

var loginPrompter = function loginPrompter(creds) {
  var opts = { log: log };
  return read.username('Username:', creds.username, opts).then(function (u) {
    creds.username = u;
    return read.password('Password:', creds.password);
  }).then(function (p) {
    creds.password = p;
    return read.email('Email: (this IS public) ', creds.email, opts);
  }).then(function (e) {
    creds.email = e;
    return creds;
  });
};

module.exports.login = function (creds, registry, scope, cb) {
  var conf = {
    log: log,
    creds: creds,
    registry: registry,
    auth: {
      otp: npm.config.get('otp')
    },
    scope: scope,
    opts: fetchOpts.fromPacote(pacoteOpts())
  };
  login(conf).then(function (newCreds) {
    return cb(null, newCreds);
  }).catch(cb);
};

function login(conf) {
  return profile.login(openerPromise, loginPrompter, conf).catch(function (err) {
    if (err.code === 'EOTP') throw err;
    var u = conf.creds.username;
    var p = conf.creds.password;
    var e = conf.creds.email;
    if (!(u && p && e)) throw err;
    return profile.adduserCouch(u, e, p, conf);
  }).catch(function (err) {
    if (err.code !== 'EOTP') throw err;
    return read.otp('Authenticator provided OTP:').then(function (otp) {
      conf.auth.otp = otp;
      var u = conf.creds.username;
      var p = conf.creds.password;
      return profile.loginCouch(u, p, conf);
    });
  }).then(function (result) {
    var newCreds = {};
    if (result && result.token) {
      newCreds.token = result.token;
    } else {
      newCreds.username = conf.creds.username;
      newCreds.password = conf.creds.password;
      newCreds.email = conf.creds.email;
      newCreds.alwaysAuth = npm.config.get('always-auth');
    }

    var usermsg = conf.creds.username ? ' user ' + conf.creds.username : '';
    conf.log.info('login', 'Authorized' + usermsg);
    var scopeMessage = conf.scope ? ' to scope ' + conf.scope : '';
    var userout = conf.creds.username ? ' as ' + conf.creds.username : '';
    output('Logged in%s%s on %s.', userout, scopeMessage, conf.registry);
    return newCreds;
  });
}
//# sourceMappingURL=legacy.js.map