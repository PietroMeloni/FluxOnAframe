{"version":3,"sources":["../../../../../node_modules/npm/lib/auth/legacy.js"],"names":["read","require","profile","log","npm","output","pacoteOpts","fetchOpts","openUrl","openerPromise","url","Promise","resolve","reject","er","loginPrompter","creds","opts","username","then","u","password","p","email","e","module","exports","login","registry","scope","cb","conf","auth","otp","config","get","fromPacote","newCreds","catch","err","code","adduserCouch","loginCouch","result","token","alwaysAuth","usermsg","info","scopeMessage","userout"],"mappings":"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","file":"legacy.js","sourcesContent":["'use strict'\nconst read = require('../utils/read-user-info.js')\nconst profile = require('npm-profile')\nconst log = require('npmlog')\nconst npm = require('../npm.js')\nconst output = require('../utils/output.js')\nconst pacoteOpts = require('../config/pacote')\nconst fetchOpts = require('../config/fetch-opts')\nconst openUrl = require('../utils/open-url')\n\nconst openerPromise = (url) => new Promise((resolve, reject) => {\n  openUrl(url, 'to complete your login please visit', (er) => er ? reject(er) : resolve())\n})\n\nconst loginPrompter = (creds) => {\n  const opts = { log: log }\n  return read.username('Username:', creds.username, opts).then((u) => {\n    creds.username = u\n    return read.password('Password:', creds.password)\n  }).then((p) => {\n    creds.password = p\n    return read.email('Email: (this IS public) ', creds.email, opts)\n  }).then((e) => {\n    creds.email = e\n    return creds\n  })\n}\n\nmodule.exports.login = (creds, registry, scope, cb) => {\n  const conf = {\n    log: log,\n    creds: creds,\n    registry: registry,\n    auth: {\n      otp: npm.config.get('otp')\n    },\n    scope: scope,\n    opts: fetchOpts.fromPacote(pacoteOpts())\n  }\n  login(conf).then((newCreds) => cb(null, newCreds)).catch(cb)\n}\n\nfunction login (conf) {\n  return profile.login(openerPromise, loginPrompter, conf)\n    .catch((err) => {\n      if (err.code === 'EOTP') throw err\n      const u = conf.creds.username\n      const p = conf.creds.password\n      const e = conf.creds.email\n      if (!(u && p && e)) throw err\n      return profile.adduserCouch(u, e, p, conf)\n    })\n    .catch((err) => {\n      if (err.code !== 'EOTP') throw err\n      return read.otp('Authenticator provided OTP:').then((otp) => {\n        conf.auth.otp = otp\n        const u = conf.creds.username\n        const p = conf.creds.password\n        return profile.loginCouch(u, p, conf)\n      })\n    }).then((result) => {\n      const newCreds = {}\n      if (result && result.token) {\n        newCreds.token = result.token\n      } else {\n        newCreds.username = conf.creds.username\n        newCreds.password = conf.creds.password\n        newCreds.email = conf.creds.email\n        newCreds.alwaysAuth = npm.config.get('always-auth')\n      }\n\n      const usermsg = conf.creds.username ? ' user ' + conf.creds.username : ''\n      conf.log.info('login', 'Authorized' + usermsg)\n      const scopeMessage = conf.scope ? ' to scope ' + conf.scope : ''\n      const userout = conf.creds.username ? ' as ' + conf.creds.username : ''\n      output('Logged in%s%s on %s.', userout, scopeMessage, conf.registry)\n      return newCreds\n    })\n}\n"]}