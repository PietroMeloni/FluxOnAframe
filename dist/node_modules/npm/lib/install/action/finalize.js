'use strict';

var path = require('path');
var fs = require('graceful-fs');
var Bluebird = require('bluebird');
var rimraf = Bluebird.promisify(require('rimraf'));
var mkdirp = Bluebird.promisify(require('mkdirp'));
var lstat = Bluebird.promisify(fs.lstat);
var readdir = Bluebird.promisify(fs.readdir);
var symlink = Bluebird.promisify(fs.symlink);
var gentlyRm = Bluebird.promisify(require('../../utils/gently-rm'));
var moduleStagingPath = require('../module-staging-path.js');
var move = require('move-concurrently');
var moveOpts = { fs: fs, Promise: Bluebird, maxConcurrency: 4 };
var getRequested = require('../get-requested.js');
var log = require('npmlog');
var packageId = require('../../utils/package-id.js');

module.exports = function (staging, pkg, log) {
  log.silly('finalize', pkg.realpath);

  var extractedTo = moduleStagingPath(staging, pkg);

  var delpath = path.join(path.dirname(pkg.realpath), '.' + path.basename(pkg.realpath) + '.DELETE');
  var movedDestAway = false;

  var requested = pkg.package._requested || getRequested(pkg);
  if (requested.type === 'directory') {
    var relative = path.relative(path.dirname(pkg.path), pkg.realpath);
    return makeParentPath(pkg.path).then(function () {
      return symlink(relative, pkg.path, 'junction');
    }).catch(function (ex) {
      return rimraf(pkg.path).then(function () {
        return symlink(relative, pkg.path, 'junction');
      });
    });
  } else {
    return makeParentPath(pkg.realpath).then(moveStagingToDestination).then(restoreOldNodeModules).catch(function (err) {
      if (movedDestAway) {
        return rimraf(pkg.realpath).then(moveOldDestinationBack).then(function () {
          throw err;
        });
      } else {
        throw err;
      }
    }).then(function () {
      return rimraf(delpath);
    });
  }

  function makeParentPath(dir) {
    return mkdirp(path.dirname(dir));
  }

  function moveStagingToDestination() {
    return destinationIsClear().then(actuallyMoveStaging).catch(function () {
      return moveOldDestinationAway().then(actuallyMoveStaging);
    });
  }

  function destinationIsClear() {
    return lstat(pkg.realpath).then(function () {
      throw new Error('destination exists');
    }, function () {});
  }

  function actuallyMoveStaging() {
    return move(extractedTo, pkg.realpath, moveOpts);
  }

  function moveOldDestinationAway() {
    return rimraf(delpath).then(function () {
      return move(pkg.realpath, delpath, moveOpts);
    }).then(function () {
      movedDestAway = true;
    });
  }

  function moveOldDestinationBack() {
    return move(delpath, pkg.realpath, moveOpts).then(function () {
      movedDestAway = false;
    });
  }

  function restoreOldNodeModules() {
    if (!movedDestAway) return;
    return readdir(path.join(delpath, 'node_modules')).catch(function () {
      return [];
    }).then(function (modules) {
      if (!modules.length) return;
      return mkdirp(path.join(pkg.realpath, 'node_modules')).then(function () {
        return Bluebird.map(modules, function (file) {
          var from = path.join(delpath, 'node_modules', file);
          var to = path.join(pkg.realpath, 'node_modules', file);
          return move(from, to, moveOpts);
        });
      });
    });
  }
};

module.exports.rollback = function (top, staging, pkg) {
  return Bluebird.try(function () {
    var requested = pkg.package._requested || getRequested(pkg);
    if (requested && requested.type === 'directory') return Promise.resolve();
    // strictly speaking rolling back a finalize should ONLY remove module that
    // was being finalized, not any of the things under it. But currently
    // those modules are guaranteed to be useless so we may as well remove them too.
    // When/if we separate `commit` step and can rollback to previous versions
    // of upgraded modules then we'll need to revisit thisâ€¦
    return gentlyRm(pkg.path, false, top).catch(function (err) {
      log.warn('rollback', 'Rolling back ' + packageId(pkg) + ' failed (this is probably harmless): ' + (err.message ? err.message : err));
    });
  });
};
//# sourceMappingURL=finalize.js.map