'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Bluebird = require('bluebird');

var checkPlatform = Bluebird.promisify(require('npm-install-checks').checkPlatform);
var getRequested = require('../get-requested.js');
var npm = require('../../npm.js');
var path = require('path');
var readJson = Bluebird.promisify(require('read-package-json'));
var updatePackageJson = Bluebird.promisify(require('../update-package-json'));

module.exports = function (staging, pkg, log) {
  log.silly('refresh-package-json', pkg.realpath);

  return readJson(path.join(pkg.path, 'package.json'), false).then(function (metadata) {
    Object.keys(pkg.package).forEach(function (key) {
      if (key !== 'version' && key !== 'dependencies' && !isEmpty(pkg.package[key])) {
        metadata[key] = pkg.package[key];
      }
    });
    if (metadata._resolved == null && pkg.fakeChild) {
      metadata._resolved = pkg.fakeChild.resolved;
    }
    // These two sneak in and it's awful
    delete metadata.readme;
    delete metadata.readmeFilename;

    pkg.package = metadata;
    pkg.fakeChild = false;
  }).catch(function () {
    return 'ignore';
  }).then(function () {
    return checkPlatform(pkg.package, npm.config.get('force'));
  }).then(function () {
    var requested = pkg.package._requested || getRequested(pkg);
    if (requested.type !== 'directory') {
      return updatePackageJson(pkg, pkg.path);
    }
  });
};

function isEmpty(value) {
  if (value == null) return true;
  if (Array.isArray(value)) return !value.length;
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return !Object.keys(value).length;
  return false;
}
//# sourceMappingURL=refresh-package-json.js.map