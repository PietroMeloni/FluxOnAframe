{"version":3,"sources":["../../../../../node_modules/npm/lib/utils/map-to-registry.js"],"names":["url","require","log","npa","config","module","exports","mapToRegistry","name","cb","silly","registry","data","scope","replace","get","verbose","charAt","auth","getCredentialsByURI","normalized","slice","uri","type","fetchSpec","resolve","scopeAuth","cleaned","email","alwaysAuth","token","undefined","username","password","requestHost","registryHost","parse","hostname","otp"],"mappings":"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","file":"map-to-registry.js","sourcesContent":["var url = require('url')\n\nvar log = require('npmlog')\nvar npa = require('npm-package-arg')\nvar config\n\nmodule.exports = mapToRegistry\n\nfunction mapToRegistry (name, config, cb) {\n  log.silly('mapToRegistry', 'name', name)\n  var registry\n\n  // the name itself takes precedence\n  var data = npa(name)\n  if (data.scope) {\n    // the name is definitely scoped, so escape now\n    name = name.replace('/', '%2f')\n\n    log.silly('mapToRegistry', 'scope (from package name)', data.scope)\n\n    registry = config.get(data.scope + ':registry')\n    if (!registry) {\n      log.verbose('mapToRegistry', 'no registry URL found in name for scope', data.scope)\n    }\n  }\n\n  // ...then --scope=@scope or --scope=scope\n  var scope = config.get('scope')\n  if (!registry && scope) {\n    // I'm an enabler, sorry\n    if (scope.charAt(0) !== '@') scope = '@' + scope\n\n    log.silly('mapToRegistry', 'scope (from config)', scope)\n\n    registry = config.get(scope + ':registry')\n    if (!registry) {\n      log.verbose('mapToRegistry', 'no registry URL found in config for scope', scope)\n    }\n  }\n\n  // ...and finally use the default registry\n  if (!registry) {\n    log.silly('mapToRegistry', 'using default registry')\n    registry = config.get('registry')\n  }\n\n  log.silly('mapToRegistry', 'registry', registry)\n\n  var auth = config.getCredentialsByURI(registry)\n\n  // normalize registry URL so resolution doesn't drop a piece of registry URL\n  var normalized = registry.slice(-1) !== '/' ? registry + '/' : registry\n  var uri\n  log.silly('mapToRegistry', 'data', data)\n  if (data.type === 'remote') {\n    uri = data.fetchSpec\n  } else {\n    uri = url.resolve(normalized, name)\n  }\n\n  log.silly('mapToRegistry', 'uri', uri)\n\n  cb(null, uri, scopeAuth(uri, registry, auth), normalized)\n}\n\nfunction scopeAuth (uri, registry, auth) {\n  var cleaned = {\n    scope: auth.scope,\n    email: auth.email,\n    alwaysAuth: auth.alwaysAuth,\n    token: undefined,\n    username: undefined,\n    password: undefined,\n    auth: undefined\n  }\n\n  var requestHost\n  var registryHost\n\n  if (auth.token || auth.auth || (auth.username && auth.password)) {\n    requestHost = url.parse(uri).hostname\n    registryHost = url.parse(registry).hostname\n\n    if (requestHost === registryHost) {\n      cleaned.token = auth.token\n      cleaned.auth = auth.auth\n      cleaned.username = auth.username\n      cleaned.password = auth.password\n    } else if (auth.alwaysAuth) {\n      log.verbose('scopeAuth', 'alwaysAuth set for', registry)\n      cleaned.token = auth.token\n      cleaned.auth = auth.auth\n      cleaned.username = auth.username\n      cleaned.password = auth.password\n    } else {\n      log.silly('scopeAuth', uri, \"doesn't share host with registry\", registry)\n    }\n    if (!config) config = require('../npm').config\n    if (config.get('otp')) cleaned.otp = config.get('otp')\n  }\n\n  return cleaned\n}\n"]}