{"version":3,"sources":["../../../../../node_modules/npm/lib/utils/metrics.js"],"names":["exports","start","startMetrics","stop","stopMetrics","save","saveMetrics","send","sendMetrics","fs","require","path","npm","uuid","inMetrics","metricsLaunch","metricsProcess","kill","itWorked","metricsFile","join","config","get","metrics","JSON","parse","readFileSync","to","Date","toISOString","successfulInstalls","failedInstalls","ex","metricId","v4","from","writeFileSync","stringify","metricsRegistry","cliMetrics","load","err","registry","retry","retries","sendAnonymousCLIMetrics","dirname","stack","unlinkSync"],"mappings":"AAAA;;AACAA,QAAQC,KAAR,GAAgBC,YAAhB;AACAF,QAAQG,IAAR,GAAeC,WAAf;AACAJ,QAAQK,IAAR,GAAeC,WAAf;AACAN,QAAQO,IAAR,GAAeC,WAAf;;AAEA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,MAAMF,QAAQ,WAAR,CAAV;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;;AAEA,IAAII,YAAY,KAAhB;;AAEA,SAASZ,YAAT,GAAyB;AACvB,MAAIY,SAAJ,EAAe;AACf;AACA,MAAIC,gBAAgBL,QAAQ,qBAAR,CAApB;AACAE,MAAII,cAAJ,GAAqBD,eAArB;AACD;;AAED,SAASX,WAAT,GAAwB;AACtB,MAAIU,SAAJ,EAAe;AACf,MAAIF,IAAII,cAAR,EAAwBJ,IAAII,cAAJ,CAAmBC,IAAnB,CAAwB,SAAxB;AACzB;;AAED,SAASX,WAAT,CAAsBY,QAAtB,EAAgC;AAC9B,MAAIJ,SAAJ,EAAe;AACf;AACA;AACAV;AACA,MAAIe,cAAcR,KAAKS,IAAL,CAAUR,IAAIS,MAAJ,CAAWC,GAAX,CAAe,OAAf,CAAV,EAAmC,4BAAnC,CAAlB;AACA,MAAIC,OAAJ;AACA,MAAI;AACFA,cAAUC,KAAKC,KAAL,CAAWhB,GAAGiB,YAAH,CAAgBP,WAAhB,CAAX,CAAV;AACAI,YAAQA,OAAR,CAAgBI,EAAhB,GAAqB,IAAIC,IAAJ,GAAWC,WAAX,EAArB;AACA,QAAIX,QAAJ,EAAc;AACZ,QAAEK,QAAQA,OAAR,CAAgBO,kBAAlB;AACD,KAFD,MAEO;AACL,QAAEP,QAAQA,OAAR,CAAgBQ,cAAlB;AACD;AACF,GARD,CAQE,OAAOC,EAAP,EAAW;AACXT,cAAU;AACRU,gBAAUpB,KAAKqB,EAAL,EADF;AAERX,eAAS;AACPY,cAAM,IAAIP,IAAJ,GAAWC,WAAX,EADC;AAEPF,YAAI,IAAIC,IAAJ,GAAWC,WAAX,EAFG;AAGPC,4BAAoBZ,WAAW,CAAX,GAAe,CAH5B;AAIPa,wBAAgBb,WAAW,CAAX,GAAe;AAJxB;AAFD,KAAV;AASD;AACD,MAAI;AACFT,OAAG2B,aAAH,CAAiBjB,WAAjB,EAA8BK,KAAKa,SAAL,CAAed,OAAf,CAA9B;AACD,GAFD,CAEE,OAAOS,EAAP,EAAW;AACX;AACD;AACF;;AAED,SAASxB,WAAT,CAAsBW,WAAtB,EAAmCmB,eAAnC,EAAoD;AAClDxB,cAAY,IAAZ;AACA,MAAIyB,aAAaf,KAAKC,KAAL,CAAWhB,GAAGiB,YAAH,CAAgBP,WAAhB,CAAX,CAAjB;AACAP,MAAI4B,IAAJ,CAAS,EAAT,EAAa,UAAUC,GAAV,EAAe;AAC1B,QAAIA,GAAJ,EAAS;AACT7B,QAAI8B,QAAJ,CAAarB,MAAb,CAAoBsB,KAApB,CAA0BC,OAA1B,GAAoC,CAApC;AACAhC,QAAI8B,QAAJ,CAAaG,uBAAb,CAAqCP,eAArC,EAAsDC,UAAtD,EAAkE,UAAUE,GAAV,EAAe;AAC/E,UAAIA,GAAJ,EAAS;AACPhC,WAAG2B,aAAH,CAAiBzB,KAAKS,IAAL,CAAUT,KAAKmC,OAAL,CAAa3B,WAAb,CAAV,EAAqC,6BAArC,CAAjB,EAAsFsB,IAAIM,KAA1F;AACD,OAFD,MAEO;AACLtC,WAAGuC,UAAH,CAAc7B,WAAd;AACD;AACF,KAND;AAOD,GAVD;AAWD","file":"metrics.js","sourcesContent":["'use strict'\nexports.start = startMetrics\nexports.stop = stopMetrics\nexports.save = saveMetrics\nexports.send = sendMetrics\n\nvar fs = require('fs')\nvar path = require('path')\nvar npm = require('../npm.js')\nvar uuid = require('uuid')\n\nvar inMetrics = false\n\nfunction startMetrics () {\n  if (inMetrics) return\n  // loaded on demand to avoid any recursive deps when `./metrics-launch` requires us.\n  var metricsLaunch = require('./metrics-launch.js')\n  npm.metricsProcess = metricsLaunch()\n}\n\nfunction stopMetrics () {\n  if (inMetrics) return\n  if (npm.metricsProcess) npm.metricsProcess.kill('SIGKILL')\n}\n\nfunction saveMetrics (itWorked) {\n  if (inMetrics) return\n  // If the metrics reporter hasn't managed to PUT yet then kill it so that it doesn't\n  // step on our updating the anonymous-cli-metrics json\n  stopMetrics()\n  var metricsFile = path.join(npm.config.get('cache'), 'anonymous-cli-metrics.json')\n  var metrics\n  try {\n    metrics = JSON.parse(fs.readFileSync(metricsFile))\n    metrics.metrics.to = new Date().toISOString()\n    if (itWorked) {\n      ++metrics.metrics.successfulInstalls\n    } else {\n      ++metrics.metrics.failedInstalls\n    }\n  } catch (ex) {\n    metrics = {\n      metricId: uuid.v4(),\n      metrics: {\n        from: new Date().toISOString(),\n        to: new Date().toISOString(),\n        successfulInstalls: itWorked ? 1 : 0,\n        failedInstalls: itWorked ? 0 : 1\n      }\n    }\n  }\n  try {\n    fs.writeFileSync(metricsFile, JSON.stringify(metrics))\n  } catch (ex) {\n    // we couldn't write the error metrics file, um, well, oh well.\n  }\n}\n\nfunction sendMetrics (metricsFile, metricsRegistry) {\n  inMetrics = true\n  var cliMetrics = JSON.parse(fs.readFileSync(metricsFile))\n  npm.load({}, function (err) {\n    if (err) return\n    npm.registry.config.retry.retries = 0\n    npm.registry.sendAnonymousCLIMetrics(metricsRegistry, cliMetrics, function (err) {\n      if (err) {\n        fs.writeFileSync(path.join(path.dirname(metricsFile), 'last-send-metrics-error.txt'), err.stack)\n      } else {\n        fs.unlinkSync(metricsFile)\n      }\n    })\n  })\n}\n"]}