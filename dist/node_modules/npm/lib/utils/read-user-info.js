'use strict';

var Bluebird = require('bluebird');
var readAsync = Bluebird.promisify(require('read'));
var userValidate = require('npm-user-validate');
var log = require('npmlog');

exports.otp = readOTP;
exports.password = readPassword;
exports.username = readUsername;
exports.email = readEmail;

function read(opts) {
  return Bluebird.try(function () {
    log.clearProgress();
    return readAsync(opts);
  }).finally(function () {
    log.showProgress();
  });
}

function readOTP(msg, otp, isRetry) {
  if (!msg) {
    msg = ['There was an error while trying authentication due to OTP (One-Time-Password).', 'The One-Time-Password is generated via applications like Authy or', 'Google Authenticator, for more information see:', 'https://docs.npmjs.com/getting-started/using-two-factor-authentication', 'Enter OTP: '].join('\n');
  }
  if (isRetry && otp && /^[\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) return otp.replace(/\s+/g, '');

  return read({ prompt: msg, default: otp || '' }).then(function (otp) {
    return readOTP(msg, otp, true);
  });
}

function readPassword(msg, password, isRetry) {
  if (!msg) msg = 'npm password: ';
  if (isRetry && password) return password;

  return read({ prompt: msg, silent: true, default: password || '' }).then(function (password) {
    return readPassword(msg, password, true);
  });
}

function readUsername(msg, username, opts, isRetry) {
  if (!msg) msg = 'npm username: ';
  if (isRetry && username) {
    var error = userValidate.username(username);
    if (error) {
      opts.log && opts.log.warn(error.message);
    } else {
      return Promise.resolve(username.trim());
    }
  }

  return read({ prompt: msg, default: username || '' }).then(function (username) {
    return readUsername(msg, username, opts, true);
  });
}

function readEmail(msg, email, opts, isRetry) {
  if (!msg) msg = 'email (this IS public): ';
  if (isRetry && email) {
    var error = userValidate.email(email);
    if (error) {
      opts.log && opts.log.warn(error.message);
    } else {
      return email.trim();
    }
  }

  return read({ prompt: msg, default: email || '' }).then(function (username) {
    return readEmail(msg, username, opts, true);
  });
}
//# sourceMappingURL=read-user-info.js.map