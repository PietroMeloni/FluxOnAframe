{"version":3,"sources":["../../../../../node_modules/npm/lib/utils/read-user-info.js"],"names":["Bluebird","require","readAsync","promisify","userValidate","log","exports","otp","readOTP","password","readPassword","username","readUsername","email","readEmail","read","opts","try","clearProgress","finally","showProgress","msg","isRetry","join","test","replace","prompt","default","then","silent","error","warn","message","Promise","resolve","trim"],"mappings":"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","file":"read-user-info.js","sourcesContent":["'use strict'\nconst Bluebird = require('bluebird')\nconst readAsync = Bluebird.promisify(require('read'))\nconst userValidate = require('npm-user-validate')\nconst log = require('npmlog')\n\nexports.otp = readOTP\nexports.password = readPassword\nexports.username = readUsername\nexports.email = readEmail\n\nfunction read (opts) {\n  return Bluebird.try(() => {\n    log.clearProgress()\n    return readAsync(opts)\n  }).finally(() => {\n    log.showProgress()\n  })\n}\n\nfunction readOTP (msg, otp, isRetry) {\n  if (!msg) {\n    msg = [\n      'There was an error while trying authentication due to OTP (One-Time-Password).',\n      'The One-Time-Password is generated via applications like Authy or',\n      'Google Authenticator, for more information see:',\n      'https://docs.npmjs.com/getting-started/using-two-factor-authentication',\n      'Enter OTP: '\n    ].join('\\n')\n  }\n  if (isRetry && otp && /^[\\d ]+$|^[A-Fa-f0-9]{64,64}$/.test(otp)) return otp.replace(/\\s+/g, '')\n\n  return read({prompt: msg, default: otp || ''})\n    .then((otp) => readOTP(msg, otp, true))\n}\n\nfunction readPassword (msg, password, isRetry) {\n  if (!msg) msg = 'npm password: '\n  if (isRetry && password) return password\n\n  return read({prompt: msg, silent: true, default: password || ''})\n    .then((password) => readPassword(msg, password, true))\n}\n\nfunction readUsername (msg, username, opts, isRetry) {\n  if (!msg) msg = 'npm username: '\n  if (isRetry && username) {\n    const error = userValidate.username(username)\n    if (error) {\n      opts.log && opts.log.warn(error.message)\n    } else {\n      return Promise.resolve(username.trim())\n    }\n  }\n\n  return read({prompt: msg, default: username || ''})\n    .then((username) => readUsername(msg, username, opts, true))\n}\n\nfunction readEmail (msg, email, opts, isRetry) {\n  if (!msg) msg = 'email (this IS public): '\n  if (isRetry && email) {\n    const error = userValidate.email(email)\n    if (error) {\n      opts.log && opts.log.warn(error.message)\n    } else {\n      return email.trim()\n    }\n  }\n\n  return read({prompt: msg, default: email || ''})\n    .then((username) => readEmail(msg, username, opts, true))\n}\n"]}