{"version":3,"sources":["../../../../../node_modules/npm/lib/utils/pick-manifest-from-registry-metadata.js"],"names":["module","exports","pickManifestFromRegistryMetadata","log","require","semver","spec","tag","versions","metadata","silly","tagged","satisfies","resolvedTo","manifest","ms","maxSatisfying","length"],"mappings":"AAAA;;AACAA,OAAOC,OAAP,GAAiBC,gCAAjB;;AAEA,IAAIC,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;;AAEA,SAASF,gCAAT,CAA2CI,IAA3C,EAAiDC,GAAjD,EAAsDC,QAAtD,EAAgEC,QAAhE,EAA0E;AACxEN,MAAIO,KAAJ,CAAU,kCAAV,EAA8C,MAA9C,EAAsDJ,IAAtD,EAA4D,KAA5D,EAAmEC,GAAnE,EAAwE,UAAxE,EAAoFC,QAApF;;AAEA;AACA,MAAIG,SAASF,SAAS,WAAT,EAAsBF,GAAtB,CAAb;AACA,MAAII,UACAF,SAASD,QAAT,CAAkBG,MAAlB,CADA,IAEAN,OAAOO,SAAP,CAAiBD,MAAjB,EAAyBL,IAAzB,EAA+B,IAA/B,CAFJ,EAE0C;AACxC,WAAO,EAACO,YAAYN,GAAb,EAAkBO,UAAUL,SAASD,QAAT,CAAkBG,MAAlB,CAA5B,EAAP;AACD;AACD;AACA,MAAII,KAAKV,OAAOW,aAAP,CAAqBR,QAArB,EAA+BF,IAA/B,EAAqC,IAArC,CAAT;AACA,MAAIS,EAAJ,EAAQ;AACN,WAAO,EAACF,YAAYE,EAAb,EAAiBD,UAAUL,SAASD,QAAT,CAAkBO,EAAlB,CAA3B,EAAP;AACD,GAFD,MAEO,IAAIT,SAAS,GAAT,IAAgBE,SAASS,MAAzB,IAAmCN,MAAnC,IAA6CF,SAASD,QAAT,CAAkBG,MAAlB,CAAjD,EAA4E;AACjF,WAAO,EAACE,YAAYN,GAAb,EAAkBO,UAAUL,SAASD,QAAT,CAAkBG,MAAlB,CAA5B,EAAP;AACD,GAFM,MAEA,CAEN;AACF","file":"pick-manifest-from-registry-metadata.js","sourcesContent":["'use strict'\nmodule.exports = pickManifestFromRegistryMetadata\n\nvar log = require('npmlog')\nvar semver = require('semver')\n\nfunction pickManifestFromRegistryMetadata (spec, tag, versions, metadata) {\n  log.silly('pickManifestFromRegistryMetadata', 'spec', spec, 'tag', tag, 'versions', versions)\n\n  // if the tagged version satisfies, then use that.\n  var tagged = metadata['dist-tags'][tag]\n  if (tagged &&\n      metadata.versions[tagged] &&\n      semver.satisfies(tagged, spec, true)) {\n    return {resolvedTo: tag, manifest: metadata.versions[tagged]}\n  }\n  // find the max satisfying version.\n  var ms = semver.maxSatisfying(versions, spec, true)\n  if (ms) {\n    return {resolvedTo: ms, manifest: metadata.versions[ms]}\n  } else if (spec === '*' && versions.length && tagged && metadata.versions[tagged]) {\n    return {resolvedTo: tag, manifest: metadata.versions[tagged]}\n  } else {\n\n  }\n}\n"]}