{"version":3,"sources":["../../../../../node_modules/npm/lib/utils/git.js"],"names":["BB","require","exec","execFile","spawn","npm","which","git","config","get","assert","log","noProgressTillDone","tillDone","exports","spawnGit","promisify","execGit","chainableExec","whichAndExec","prefixGitArgs","process","platform","args","options","cb","info","fullArgs","concat","Array","prototype","slice","call","arguments","equal","err","code"],"mappings":"AAAA;;;;AAEA,IAAMA,KAAKC,QAAQ,UAAR,CAAX;;AAEA,IAAMC,OAAOD,QAAQ,eAAR,EAAyBE,QAAtC;AACA,IAAMC,QAAQH,QAAQ,SAAR,CAAd;AACA,IAAMI,MAAMJ,QAAQ,WAAR,CAAZ;AACA,IAAMK,QAAQL,QAAQ,OAAR,CAAd;AACA,IAAMM,MAAMF,IAAIG,MAAJ,CAAWC,GAAX,CAAe,KAAf,CAAZ;AACA,IAAMC,SAAST,QAAQ,QAAR,CAAf;AACA,IAAMU,MAAMV,QAAQ,QAAR,CAAZ;AACA,IAAMW,qBAAqBX,QAAQ,gCAAR,EAA0CY,QAArE;;AAEAC,QAAQV,KAAR,GAAgBW,QAAhB;AACAD,QAAQZ,IAAR,GAAeF,GAAGgB,SAAH,CAAaC,OAAb,CAAf;AACAH,QAAQI,aAAR,GAAwBA,aAAxB;AACAJ,QAAQK,YAAR,GAAuBA,YAAvB;;AAEA,SAASC,aAAT,GAA0B;AACxB,SAAOC,QAAQC,QAAR,KAAqB,OAArB,GAA+B,CAAC,IAAD,EAAO,qBAAP,CAA/B,GAA+D,EAAtE;AACD;;AAED,SAASL,OAAT,CAAkBM,IAAlB,EAAwBC,OAAxB,EAAiCC,EAAjC,EAAqC;AACnCd,MAAIe,IAAJ,CAAS,KAAT,EAAgBH,IAAhB;AACA,MAAMI,WAAWP,gBAAgBQ,MAAhB,CAAuBL,QAAQ,EAA/B,CAAjB;AACA,SAAOrB,KAAKK,GAAL,EAAUoB,QAAV,EAAoBH,OAApB,EAA6BZ,mBAAmBa,EAAnB,CAA7B,CAAP;AACD;;AAED,SAASV,QAAT,CAAmBQ,IAAnB,EAAyBC,OAAzB,EAAkC;AAChCb,MAAIe,IAAJ,CAAS,KAAT,EAAgBH,IAAhB;AACA,SAAOnB,MAAMG,GAAN,EAAWa,gBAAgBQ,MAAhB,CAAuBL,QAAQ,EAA/B,CAAX,EAA+CC,OAA/C,CAAP;AACD;;AAED,SAASN,aAAT,GAA0B;AACxB,MAAIK,OAAOM,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX;AACA,SAAO,CAAChB,OAAD,EAAUW,MAAV,CAAiBL,IAAjB,CAAP;AACD;;AAED,SAASJ,YAAT,CAAuBI,IAAvB,EAA6BC,OAA7B,EAAsCC,EAAtC,EAA0C;AACxCf,SAAOwB,KAAP,QAAoBT,EAApB,yCAAoBA,EAApB,GAAwB,UAAxB,EAAoC,sBAApC;AACA;AACAnB,QAAMC,GAAN,EAAW,UAAU4B,GAAV,EAAe;AACxB,QAAIA,GAAJ,EAAS;AACPA,UAAIC,IAAJ,GAAW,QAAX;AACA,aAAOX,GAAGU,GAAH,CAAP;AACD;;AAEDlB,YAAQM,IAAR,EAAcC,OAAd,EAAuBC,EAAvB;AACD,GAPD;AAQD","file":"git.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst exec = require('child_process').execFile\nconst spawn = require('./spawn')\nconst npm = require('../npm.js')\nconst which = require('which')\nconst git = npm.config.get('git')\nconst assert = require('assert')\nconst log = require('npmlog')\nconst noProgressTillDone = require('./no-progress-while-running.js').tillDone\n\nexports.spawn = spawnGit\nexports.exec = BB.promisify(execGit)\nexports.chainableExec = chainableExec\nexports.whichAndExec = whichAndExec\n\nfunction prefixGitArgs () {\n  return process.platform === 'win32' ? ['-c', 'core.longpaths=true'] : []\n}\n\nfunction execGit (args, options, cb) {\n  log.info('git', args)\n  const fullArgs = prefixGitArgs().concat(args || [])\n  return exec(git, fullArgs, options, noProgressTillDone(cb))\n}\n\nfunction spawnGit (args, options) {\n  log.info('git', args)\n  return spawn(git, prefixGitArgs().concat(args || []), options)\n}\n\nfunction chainableExec () {\n  var args = Array.prototype.slice.call(arguments)\n  return [execGit].concat(args)\n}\n\nfunction whichAndExec (args, options, cb) {\n  assert.equal(typeof cb, 'function', 'no callback provided')\n  // check for git\n  which(git, function (err) {\n    if (err) {\n      err.code = 'ENOGIT'\n      return cb(err)\n    }\n\n    execGit(args, options, cb)\n  })\n}\n"]}