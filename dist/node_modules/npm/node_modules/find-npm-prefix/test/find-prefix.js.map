{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/find-npm-prefix/test/find-prefix.js"],"names":["Bluebird","require","test","requireInject","findPrefix","fs","readdir","mockReaddir","tests","t","plan","Object","keys","length","map","dir","then","is","pre","fail","catch","err","code","fixture","cb","Error","parts","split","slice","cwd","part","shift"],"mappings":"AAAA;;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,KAAR,EAAeC,IAA5B;AACA,IAAMC,gBAAgBF,QAAQ,gBAAR,CAAtB;AACA,IAAMG,aAAaD,cAAc,mBAAd,EAAmC;AACpDE,MAAI;AACFC,aAASC;AADP;AADgD,CAAnC,CAAnB;;AAMAL,KAAK,aAAL,EAAoB,aAAK;AACvB,MAAMM,QAAQ;AACZ,8CAA0C,2BAD9B;AAEZ,2DAAuD,2BAF3C;AAGZ,sCAAkC,2BAHtB;AAIZ,4CAAwC,2BAJ5B;AAKZ,iCAA6B,2BALjB;AAMZ,sCAAkC,2BANtB;AAOZ,2BAAuB,qBAPX;AAQZ,sBAAkB,gBARN;AASZ,uBAAmB;AATP,GAAd;AAWAC,IAAEC,IAAF,CAAOC,OAAOC,IAAP,CAAYJ,KAAZ,EAAmBK,MAA1B;AACA,SAAOb,SAASc,GAAT,CAAaH,OAAOC,IAAP,CAAYJ,KAAZ,CAAb,EAAiC,eAAO;AAC7C,WAAOJ,WAAWW,GAAX,EAAgBC,IAAhB,CAAqB,eAAO;AACjCP,QAAEQ,EAAF,CAAKC,GAAL,EAAUV,MAAMO,GAAN,CAAV,EAAsBA,GAAtB;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD,CAlBD;;AAoBAb,KAAK,aAAL,EAAoB,aAAK;AACvB,SAAOE,WAAW,sBAAX,EAAmCY,IAAnC,CAAwC,eAAO;AACpDP,MAAEU,IAAF,CAAO,UAAP;AACD,GAFM,EAEJC,KAFI,CAEE,eAAO;AACdX,MAAEQ,EAAF,CAAKI,IAAIC,IAAT,EAAe,OAAf,EAAwB,gBAAxB;AACD,GAJM,CAAP;AAKD,CAND;;AAQA,IAAMC,UAAU;AACd,WAAS;AACP,eAAW;AACT,cAAQ;AACN,iBAAS;AACP,0BAAgB;AACd,4BAAgB;AADF,WADT;AAIP,kBAAQ;AACN,qBAAS;AADH;AAJD,SADH;AASN,iBAAS;AACP,0BAAgB,EADT;AAEP,kBAAQ;AAFD;AATH;AADC;AADJ;AADK,CAAhB;;AAqBA,SAAShB,WAAT,CAAsBQ,GAAtB,EAA2BS,EAA3B,EAA+B;AAC7B,MAAI,QAAQtB,IAAR,CAAaa,GAAb,CAAJ,EAAuB;AACrB,QAAMM,MAAM,IAAII,KAAJ,CAAU,mBAAmBV,GAA7B,CAAZ;AACAM,QAAIC,IAAJ,GAAW,OAAX;AACA,WAAOE,GAAGH,GAAH,CAAP;AACD;AACD,MAAMK,QAAQX,IAAIY,KAAJ,CAAU,IAAV,EAAgBC,KAAhB,CAAsB,CAAtB,CAAd;AACA,MAAIC,MAAMN,OAAV;AACA,MAAIO,aAAJ;AACA,SAAQA,OAAOJ,MAAMK,KAAN,EAAf,EAA+B;AAC7B,QAAID,QAAQD,GAAZ,EAAiB;AACfA,YAAMA,IAAIC,IAAJ,CAAN;AACD,KAFD,MAEO;AACL,UAAMT,OAAM,IAAII,KAAJ,CAAU,qBAAqBV,GAArB,GAA2B,KAA3B,GAAmCe,IAA7C,CAAZ;AACAT,WAAIC,IAAJ,GAAW,QAAX;AACA,aAAOE,GAAGH,IAAH,CAAP;AACD;AACF;AACD,SAAOG,GAAG,IAAH,EAASb,OAAOC,IAAP,CAAYiB,GAAZ,CAAT,CAAP;AACD","file":"find-prefix.js","sourcesContent":["'use strict'\nconst Bluebird = require('bluebird')\nconst test = require('tap').test\nconst requireInject = require('require-inject')\nconst findPrefix = requireInject('../find-prefix.js', {\n  fs: {\n    readdir: mockReaddir\n  }\n})\n\ntest('find-prefix', t => {\n  const tests = {\n    '/Users/example/code/test1/node_modules': '/Users/example/code/test1',\n    '/Users/example/code/test1/node_modules/node_modules': '/Users/example/code/test1',\n    '/Users/example/code/test1/sub1': '/Users/example/code/test1',\n    '/Users/example/code/test1/sub1/sub1a': '/Users/example/code/test1',\n    '/Users/example/code/test2': '/Users/example/code/test2',\n    '/Users/example/code/test2/sub2': '/Users/example/code/test2',\n    '/Users/example/code': '/Users/example/code',\n    '/Users/example': '/Users/example',\n    '/does/not/exist': '/does/not/exist'\n  }\n  t.plan(Object.keys(tests).length)\n  return Bluebird.map(Object.keys(tests), dir => {\n    return findPrefix(dir).then(pre => {\n      t.is(pre, tests[dir], dir)\n    })\n  })\n})\n\ntest('fail-prefix', t => {\n  return findPrefix('/Users/example/eperm').then(pre => {\n    t.fail('no eperm')\n  }).catch(err => {\n    t.is(err.code, 'EPERM', 'got perm error')\n  })\n})\n\nconst fixture = {\n  'Users': {\n    'example': {\n      'code': {\n        'test1': {\n          'node_modules': {\n            'node_modules': {}\n          },\n          'sub1': {\n            'sub1a': {}\n          }\n        },\n        'test2': {\n          'package.json': {},\n          'sub2': {}\n        }\n      }\n    }\n  }\n}\n\nfunction mockReaddir (dir, cb) {\n  if (/eperm/.test(dir)) {\n    const err = new Error('Can not read: ' + dir)\n    err.code = 'EPERM'\n    return cb(err)\n  }\n  const parts = dir.split(/\\//).slice(1)\n  let cwd = fixture\n  let part\n  while ((part = parts.shift())) {\n    if (part in cwd) {\n      cwd = cwd[part]\n    } else {\n      const err = new Error('Does not exist: ' + dir + ' * ' + part)\n      err.code = 'ENOENT'\n      return cb(err)\n    }\n  }\n  return cb(null, Object.keys(cwd))\n}\n"]}