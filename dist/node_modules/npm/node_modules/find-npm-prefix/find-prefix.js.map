{"version":3,"sources":["../../../../../node_modules/npm/node_modules/find-npm-prefix/find-prefix.js"],"names":["module","exports","findPrefix","fs","require","path","dir","Promise","resolve","reject","walkedUp","basename","dirname","findPrefix_","original","parent","readdir","err","files","code","indexOf"],"mappings":"AAAA;AACA;;AAEAA,OAAOC,OAAP,GAAiBC,UAAjB;;AAEA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,SAASF,UAAT,CAAqBI,GAArB,EAA0B;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,UAAMD,KAAKG,OAAL,CAAaF,GAAb,CAAN;;AAEA;AACA;AACA;AACA,QAAII,WAAW,KAAf;AACA,WAAOL,KAAKM,QAAL,CAAcL,GAAd,MAAuB,cAA9B,EAA8C;AAC5CA,YAAMD,KAAKO,OAAL,CAAaN,GAAb,CAAN;AACAI,iBAAW,IAAX;AACD;AACD,QAAIA,QAAJ,EAAc;AACZF,cAAQF,GAAR;AACD,KAFD,MAEO;AACLE,cAAQK,YAAYP,GAAZ,CAAR;AACD;AACF,GAhBM,CAAP;AAiBD;;AAED,SAASO,WAAT,CAAsBP,GAAtB,EAA2BQ,QAA3B,EAAqC;AACnC,MAAI,CAACA,QAAL,EAAeA,WAAWR,GAAX;;AAEf,MAAMS,SAASV,KAAKO,OAAL,CAAaN,GAAb,CAAf;AACA;AACA;AACA,MAAIS,WAAWT,GAAf,EAAoB,OAAOC,QAAQC,OAAR,CAAgBM,QAAhB,CAAP;;AAEpB,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCN,OAAGa,OAAH,CAAWV,GAAX,EAAgB,UAACW,GAAD,EAAMC,KAAN,EAAgB;AAC9B,UAAID,GAAJ,EAAS;AACP;AACA;AACA;AACA,YAAIA,OAAOX,QAAQQ,QAAf,IAA2BG,IAAIE,IAAJ,KAAa,QAA5C,EAAsD;AACpDV,iBAAOQ,GAAP;AACD,SAFD,MAEO;AACLT,kBAAQM,QAAR;AACD;AACF,OATD,MASO,IAAII,MAAME,OAAN,CAAc,cAAd,MAAkC,CAAC,CAAnC,IACAF,MAAME,OAAN,CAAc,cAAd,MAAkC,CAAC,CADvC,EAC0C;AAC/CZ,gBAAQF,GAAR;AACD,OAHM,MAGA;AACLE,gBAAQK,YAAYE,MAAZ,EAAoBD,QAApB,CAAR;AACD;AACF,KAhBD;AAiBD,GAlBM,CAAP;AAmBD","file":"find-prefix.js","sourcesContent":["'use strict'\n// try to find the most reasonable prefix to use\n\nmodule.exports = findPrefix\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction findPrefix (dir) {\n  return new Promise((resolve, reject) => {\n    dir = path.resolve(dir)\n\n    // this is a weird special case where an infinite recurse of\n    // node_modules folders resolves to the level that contains the\n    // very first node_modules folder\n    let walkedUp = false\n    while (path.basename(dir) === 'node_modules') {\n      dir = path.dirname(dir)\n      walkedUp = true\n    }\n    if (walkedUp) {\n      resolve(dir)\n    } else {\n      resolve(findPrefix_(dir))\n    }\n  })\n}\n\nfunction findPrefix_ (dir, original) {\n  if (!original) original = dir\n\n  const parent = path.dirname(dir)\n  // this is a platform independent way of checking if we're in the root\n  // directory\n  if (parent === dir) return Promise.resolve(original)\n\n  return new Promise((resolve, reject) => {\n    fs.readdir(dir, (err, files) => {\n      if (err) {\n        // an error right away is a bad sign.\n        // unless the prefix was simply a non\n        // existent directory.\n        if (err && dir === original && err.code !== 'ENOENT') {\n          reject(err)\n        } else {\n          resolve(original)\n        }\n      } else if (files.indexOf('node_modules') !== -1 ||\n                 files.indexOf('package.json') !== -1) {\n        resolve(dir)\n      } else {\n        resolve(findPrefix_(parent, original))\n      }\n    })\n  })\n}\n"]}