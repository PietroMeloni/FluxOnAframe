{"version":3,"sources":["../../../../../node_modules/npm/node_modules/ecc-jsbn/index.js"],"names":["crypto","require","BigInteger","ECPointFp","exports","ECCurves","unstupid","hex","len","length","ECKey","curve","key","isPublic","priv","c","n","getN","bytes","Math","floor","bitLength","getCurve","P","decodePointHex","toString","n1","subtract","ONE","r","randomBytes","mod","add","getG","multiply","PublicKey","Buffer","encodeCompressedPointHex","PrivateKey","deriveSharedSecret","S","getX","toBigInteger"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,MAAR,EAAgBC,UAAjC;AACA,IAAIC,YAAYF,QAAQ,aAAR,EAAuBE,SAAvC;AACAC,QAAQC,QAAR,GAAmBJ,QAAQ,cAAR,CAAnB;;AAEA;AACA,SAASK,QAAT,CAAkBC,GAAlB,EAAsBC,GAAtB,EACA;AACC,SAAQD,IAAIE,MAAJ,IAAcD,GAAf,GAAsBD,GAAtB,GAA4BD,SAAS,MAAIC,GAAb,EAAiBC,GAAjB,CAAnC;AACA;;AAEDJ,QAAQM,KAAR,GAAgB,UAASC,KAAT,EAAgBC,GAAhB,EAAqBC,QAArB,EAChB;AACE,MAAIC,IAAJ;AACD,MAAIC,IAAIJ,OAAR;AACA,MAAIK,IAAID,EAAEE,IAAF,EAAR;AACC,MAAIC,QAAQC,KAAKC,KAAL,CAAWJ,EAAEK,SAAF,KAAc,CAAzB,CAAZ;;AAEA,MAAGT,GAAH,EACA;AACE,QAAGC,QAAH,EACA;AACE,UAAIF,QAAQI,EAAEO,QAAF,EAAZ;AACN;AACA;AACA;AACA;AACA;AACM,WAAKC,CAAL,GAASZ,MAAMa,cAAN,CAAqBZ,IAAIa,QAAJ,CAAa,KAAb,CAArB,CAAT;AACD,KATD,MASK;AACH,UAAGb,IAAIH,MAAJ,IAAcS,KAAjB,EAAwB,OAAO,KAAP;AACxBJ,aAAO,IAAIZ,UAAJ,CAAeU,IAAIa,QAAJ,CAAa,KAAb,CAAf,EAAoC,EAApC,CAAP;AACD;AACF,GAfD,MAeK;AACH,QAAIC,KAAKV,EAAEW,QAAF,CAAWzB,WAAW0B,GAAtB,CAAT;AACA,QAAIC,IAAI,IAAI3B,UAAJ,CAAeF,OAAO8B,WAAP,CAAmBd,EAAEK,SAAF,EAAnB,CAAf,CAAR;AACAP,WAAOe,EAAEE,GAAF,CAAML,EAAN,EAAUM,GAAV,CAAc9B,WAAW0B,GAAzB,CAAP;AACA,SAAKL,CAAL,GAASR,EAAEkB,IAAF,GAASC,QAAT,CAAkBpB,IAAlB,CAAT;AACD;AACD,MAAG,KAAKS,CAAR,EACA;AACF;AACA;AACI,SAAKY,SAAL,GAAiB,IAAIC,MAAJ,CAAWrB,EAAEO,QAAF,GAAae,wBAAb,CAAsC,KAAKd,CAA3C,CAAX,EAAyD,KAAzD,CAAjB;AACD;AACD,MAAGT,IAAH,EACA;AACE,SAAKwB,UAAL,GAAkB,IAAIF,MAAJ,CAAW9B,SAASQ,KAAKW,QAAL,CAAc,EAAd,CAAT,EAA2BP,QAAM,CAAjC,CAAX,EAA+C,KAA/C,CAAlB;AACA,SAAKqB,kBAAL,GAA0B,UAAS3B,GAAT,EAC1B;AACE,UAAG,CAACA,GAAD,IAAQ,CAACA,IAAIW,CAAhB,EAAmB,OAAO,KAAP;AACnB,UAAIiB,IAAI5B,IAAIW,CAAJ,CAAMW,QAAN,CAAepB,IAAf,CAAR;AACA,aAAO,IAAIsB,MAAJ,CAAW9B,SAASkC,EAAEC,IAAF,GAASC,YAAT,GAAwBjB,QAAxB,CAAiC,EAAjC,CAAT,EAA8CP,QAAM,CAApD,CAAX,EAAkE,KAAlE,CAAP;AACF,KALA;AAMD;AACF,CA5CD","file":"index.js","sourcesContent":["var crypto = require(\"crypto\");\nvar BigInteger = require(\"jsbn\").BigInteger;\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\nexports.ECCurves = require(\"./lib/sec.js\");\n\n// zero prepad\nfunction unstupid(hex,len)\n{\n\treturn (hex.length >= len) ? hex : unstupid(\"0\"+hex,len);\n}\n\nexports.ECKey = function(curve, key, isPublic)\n{\n  var priv;\n\tvar c = curve();\n\tvar n = c.getN();\n  var bytes = Math.floor(n.bitLength()/8);\n\n  if(key)\n  {\n    if(isPublic)\n    {\n      var curve = c.getCurve();\n//      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n//      var y = key.slice(bytes+1);\n//      this.P = new ECPointFp(curve,\n//        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n//        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n      this.P = curve.decodePointHex(key.toString(\"hex\"));\n    }else{\n      if(key.length != bytes) return false;\n      priv = new BigInteger(key.toString(\"hex\"), 16);      \n    }\n  }else{\n    var n1 = n.subtract(BigInteger.ONE);\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n    priv = r.mod(n1).add(BigInteger.ONE);\n    this.P = c.getG().multiply(priv);\n  }\n  if(this.P)\n  {\n//  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n//  this.PublicKey = new Buffer(\"04\"+pubhex,\"hex\");\n    this.PublicKey = new Buffer(c.getCurve().encodeCompressedPointHex(this.P),\"hex\");\n  }\n  if(priv)\n  {\n    this.PrivateKey = new Buffer(unstupid(priv.toString(16),bytes*2),\"hex\");\n    this.deriveSharedSecret = function(key)\n    {\n      if(!key || !key.P) return false;\n      var S = key.P.multiply(priv);\n      return new Buffer(unstupid(S.getX().toBigInteger().toString(16),bytes*2),\"hex\");\n   }     \n  }\n}\n\n"]}