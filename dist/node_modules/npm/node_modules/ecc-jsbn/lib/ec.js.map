{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/ecc-jsbn/lib/ec.js"],"names":["BigInteger","require","Barrett","prototype","ECFieldElementFp","q","x","feFpEquals","other","equals","feFpToBigInteger","feFpNegate","negate","mod","feFpAdd","b","add","toBigInteger","feFpSubtract","subtract","feFpMultiply","multiply","feFpSquare","square","feFpDivide","modInverse","divide","ECPointFp","curve","y","z","ONE","zinv","pointFpGetX","r","reduce","fromBigInteger","pointFpGetY","pointFpEquals","isInfinity","u","v","ZERO","pointFpIsInfinity","pointFpNegate","pointFpAdd","twice","getInfinity","THREE","x1","y1","x2","y2","v2","v3","x1v2","zu2","x3","shiftLeft","y3","z3","pointFpTwice","signum","y1z1","y1sqz1","a","w","pointFpMultiply","k","e","h","neg","R","i","bitLength","hBit","testBit","eBit","pointFpMultiplyTwo","j","both","getX","getY","multiplyTwo","ECCurveFp","infinity","reducer","curveFpGetQ","curveFpGetA","curveFpGetB","curveFpEquals","curveFpGetInfinity","curveFpFromBigInteger","curveReduce","curveFpDecodePointHex","s","parseInt","substr","len","length","xHex","yHex","curveFpEncodePointHex","p","toString","oLen","getQ","getA","getB","encodePointHex","decodePointHex","yIsEven","undefined","alpha","beta","sqrt","betaValue","encodeCompressedPointHex","yPrefix","isEven","getR","firstWord","shiftRight","intValue","modMult","modReduce","qLen","compareTo","modPow","qMinusOne","legendreExponent","Q","fourQ","modDouble","U","V","P","SecureRandom","result","lucasSequence","n","getLowestSetBit","Uh","Vl","TWO","Vh","Ql","Qh","exports","module"],"mappings":"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","file":"ec.js","sourcesContent":["// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar Barrett = BigInteger.prototype.Barrett\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q,x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q;\n}\n\nfunction feFpEquals(other) {\n    if(other == this) return true;\n    return (this.q.equals(other.q) && this.x.equals(other.x));\n}\n\nfunction feFpToBigInteger() {\n    return this.x;\n}\n\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\n\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\n\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\n\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve,x,y,z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if(z == null) {\n      this.z = BigInteger.ONE;\n    }\n    else {\n      this.z = z;\n    }\n    this.zinv = null;\n    //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpGetY() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpEquals(other) {\n    if(other == this) return true;\n    if(this.isInfinity()) return other.isInfinity();\n    if(other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if(!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\n\nfunction pointFpIsInfinity() {\n    if((this.x == null) && (this.y == null)) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\n\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\n\nfunction pointFpAdd(b) {\n    if(this.isInfinity()) return b;\n    if(b.isInfinity()) return this;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n\n    if(BigInteger.ZERO.equals(v)) {\n        if(BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n\treturn this.curve.getInfinity(); // this = -b, so infinity\n    }\n\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\nfunction pointFpTwice() {\n    if(this.isInfinity()) return this;\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if(!BigInteger.ZERO.equals(a)) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if(this.isInfinity()) return this;\n    if(k.signum() == 0) return this.curve.getInfinity();\n\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n\n    var neg = this.negate();\n    var R = this;\n\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i) {\n\tR = R.twice();\n\n\tvar hBit = h.testBit(i);\n\tvar eBit = e.testBit(i);\n\n\tif (hBit != eBit) {\n\t    R = R.add(hBit ? this : neg);\n\t}\n    }\n\n    return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j,x,k) {\n  var i;\n  if(j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1;\n  else\n    i = k.bitLength() - 1;\n\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while(i >= 0) {\n    R = R.twice();\n    if(j.testBit(i)) {\n      if(k.testBit(i)) {\n        R = R.add(both);\n      }\n      else {\n        R = R.add(this);\n      }\n    }\n    else {\n      if(k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n\n  return R;\n}\n\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q,a,b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\n\nfunction curveFpGetQ() {\n    return this.q;\n}\n\nfunction curveFpGetA() {\n    return this.a;\n}\n\nfunction curveFpGetB() {\n    return this.b;\n}\n\nfunction curveFpEquals(other) {\n    if(other == this) return true;\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n}\n\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\n\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\n\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n    case 3:\n\t// point compression not supported yet\n\treturn null;\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\n\nfunction curveFpEncodePointHex(p) {\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar yHex = p.getY().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen) {\n\t\txHex = \"0\" + xHex;\n\t}\n\twhile (yHex.length < oLen) {\n\t\tyHex = \"0\" + yHex;\n\t}\n\treturn \"04\" + xHex + yHex;\n}\n\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s)\n{\n\tvar yIsEven;\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n\tyIsEven = false;\n    case 3:\n\tif(yIsEven == undefined) yIsEven = true;\n\tvar len = s.length - 2;\n\tvar xHex = s.substr(2, len);\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n\tvar beta = alpha.sqrt();\n\n    if (beta == null) throw \"Invalid point compression\";\n\n    var betaValue = beta.toBigInteger();\n    if (betaValue.testBit(0) != yIsEven)\n    {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n    }\n    return new ECPointFp(this,x,beta);\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\n{\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen)\n\t\txHex = \"0\" + xHex;\n\tvar yPrefix;\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n\telse                                 yPrefix = \"03\";\n\n\treturn yPrefix + xHex;\n}\n\n\nECFieldElementFp.prototype.getR = function()\n{\n\tif(this.r != undefined) return this.r;\n\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128)\n    {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1)\n        {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n}\nECFieldElementFp.prototype.modMult = function(x1,x2)\n{\n    return this.modReduce(x1.multiply(x2));\n}\nECFieldElementFp.prototype.modReduce = function(x)\n{\n    if (this.getR() != null)\n    {\n        var qLen = q.bitLength();\n        while (x.bitLength() > (qLen + 1))\n        {\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE))\n            {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v); \n        }\n        while (x.compareTo(q) >= 0)\n        {\n            x = x.subtract(q);\n        }\n    }\n    else\n    {\n        x = x.mod(q);\n    }\n    return x;\n}\nECFieldElementFp.prototype.sqrt = function()\n{\n    if (!this.q.testBit(0)) throw \"unsupported\";\n\n    // p mod 4 == 3\n    if (this.q.testBit(1))\n    {\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\n    \treturn z.square().equals(this) ? z : null;\n    }\n\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\n    {\n        return null;\n    }\n\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n\n    var U, V;\n    do\n    {\n        var P;\n        do\n        {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }\n        while (P.compareTo(this.q) >= 0\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\n\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n\n        if (this.modMult(V, V).equals(fourQ))\n        {\n            // Integer division by 2, mod q\n            if (V.testBit(0))\n            {\n                V = V.add(q);\n            }\n\n            V = V.shiftRight(1);\n\n            return new ECFieldElementFp(q,V);\n        }\n    }\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n\n    return null;\n}\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\n{\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n\n    for (var j = n - 1; j >= s + 1; --j)\n    {\n        Ql = this.modMult(Ql, Qh);\n\n        if (k.testBit(j))\n        {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        }\n        else\n        {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n\n    for (var j = 1; j <= s; ++j)\n    {\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n\n    return [ Uh, Vl ];\n}\n\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n}\n\nmodule.exports = exports\n"]}