{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/es6-promise/lib/es6-promise/promise/reject.js"],"names":["reject","reason","Constructor","promise","noop"],"mappings":";;;;;kBAuCwBA,M;;AAvCxB;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCe,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AACrC;AACA,MAAIC,cAAc,IAAlB;AACA,MAAIC,UAAU,IAAID,WAAJ,CAAgBE,cAAhB,CAAd;AACA,wBAAQD,OAAR,EAAiBF,MAAjB;AACA,SAAOE,OAAP;AACD","file":"reject.js","sourcesContent":["import {\n  noop,\n  reject as _reject\n} from '../-internal';\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nexport default function reject(reason) {\n  /*jshint validthis:true */\n  let Constructor = this;\n  let promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n"]}