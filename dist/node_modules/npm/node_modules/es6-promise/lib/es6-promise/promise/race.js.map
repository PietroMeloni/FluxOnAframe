{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/es6-promise/lib/es6-promise/promise/race.js"],"names":["race","entries","Constructor","_","reject","TypeError","resolve","length","i","then"],"mappings":";;;;;kBAqEwBA,I;;AArExB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEe,SAASA,IAAT,CAAcC,OAAd,EAAuB;AACpC;AACA,MAAIC,cAAc,IAAlB;;AAEA,MAAI,CAAC,oBAAQD,OAAR,CAAL,EAAuB;AACrB,WAAO,IAAIC,WAAJ,CAAgB,UAACC,CAAD,EAAIC,MAAJ;AAAA,aAAeA,OAAO,IAAIC,SAAJ,CAAc,iCAAd,CAAP,CAAf;AAAA,KAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIH,WAAJ,CAAgB,UAACI,OAAD,EAAUF,MAAV,EAAqB;AAC1C,UAAIG,SAASN,QAAQM,MAArB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/BN,oBAAYI,OAAZ,CAAoBL,QAAQO,CAAR,CAApB,EAAgCC,IAAhC,CAAqCH,OAArC,EAA8CF,MAA9C;AACD;AACF,KALM,CAAP;AAMD;AACF","file":"race.js","sourcesContent":["import {\n  isArray\n} from \"../utils\";\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nexport default function race(entries) {\n  /*jshint validthis:true */\n  let Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor((_, reject) => reject(new TypeError('You must pass an array to race.')));\n  } else {\n    return new Constructor((resolve, reject) => {\n      let length = entries.length;\n      for (let i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n"]}