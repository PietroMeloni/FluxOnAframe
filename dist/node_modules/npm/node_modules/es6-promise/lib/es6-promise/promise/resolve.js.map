{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/es6-promise/lib/es6-promise/promise/resolve.js"],"names":["resolve","object","Constructor","constructor","promise","noop"],"mappings":";;;;;;;;kBAoCwBA,O;;AApCxB;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+Be,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AACtC;AACA,MAAIC,cAAc,IAAlB;;AAEA,MAAID,UAAU,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAA5B,IAAwCA,OAAOE,WAAP,KAAuBD,WAAnE,EAAgF;AAC9E,WAAOD,MAAP;AACD;;AAED,MAAIG,UAAU,IAAIF,WAAJ,CAAgBG,cAAhB,CAAd;AACA,yBAASD,OAAT,EAAkBH,MAAlB;AACA,SAAOG,OAAP;AACD","file":"resolve.js","sourcesContent":["import {\n  noop,\n  resolve as _resolve\n} from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object) {\n  /*jshint validthis:true */\n  let Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  let promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n"]}