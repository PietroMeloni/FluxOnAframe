'use strict';

var Utils = require('../lib/utils');

module.exports = report;
function report(data, options) {
  var msg = summary(data, options);
  if (!Object.keys(data.advisories).length) {
    return {
      report: msg,
      exitCode: 0
    };
  } else {
    msg += '\n  run `npm audit fix` to fix them, or `npm audit` for details';
    return {
      report: msg,
      exitCode: 1
    };
  }
}

module.exports.summary = summary;
function summary(data, options) {
  var defaults = {
    severityThreshold: 'info'
  };

  var config = Object.assign({}, defaults, options);

  function clr(str, clr) {
    return Utils.color(str, clr, config.withColor);
  }
  function green(str) {
    return clr(str, 'brightGreen');
  }
  function red(str) {
    return clr(str, 'brightRed');
  }

  var output = '';

  var log = function log(value) {
    output = output + value + '\n';
  };

  output += 'found ';

  if (Object.keys(data.advisories).length === 0) {
    log(green('0') + ' vulnerabilities');
    return output;
  } else {
    var total = Utils.totalVulnCount(data.metadata.vulnerabilities);
    var sev = Utils.severities(data.metadata.vulnerabilities);

    if (sev.length > 1) {
      var severities = sev.map(function (value) {
        return value[1] + ' ' + Utils.severityLabel(value[0], config.withColor).toLowerCase();
      }).join(', ');
      log(red(total) + ' vulnerabilities (' + severities + ')');
    } else {
      var vulnCount = sev[0][1];
      var vulnLabel = Utils.severityLabel(sev[0][0], config.withColor).toLowerCase();
      log(vulnCount + ' ' + vulnLabel + ' severity vulnerabilit' + (vulnCount === 1 ? 'y' : 'ies'));
    }
  }
  return output.trim();
}
//# sourceMappingURL=install.js.map