'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var summary = require('./install.js').summary;
var Table = require('cli-table3');
var Utils = require('../lib/utils');

var report = function report(data, options) {
  var defaults = {
    severityThreshold: 'info'
  };

  var blankChars = {
    'top': ' ',
    'top-mid': ' ',
    'top-left': ' ',
    'top-right': ' ',
    'bottom': ' ',
    'bottom-mid': ' ',
    'bottom-left': ' ',
    'bottom-right': ' ',
    'left': ' ',
    'left-mid': ' ',
    'mid': ' ',
    'mid-mid': ' ',
    'right': ' ',
    'right-mid': ' ',
    'middle': ' '
  };

  var config = Object.assign({}, defaults, options);

  var output = '';
  var exit = 0;

  var log = function log(value) {
    output = output + value + '\n';
  };

  var footer = function footer(data) {
    var total = Utils.totalVulnCount(data.metadata.vulnerabilities);

    if (total > 0) {
      exit = 1;
    }
    log(summary(data, config) + ' in ' + data.metadata.totalDependencies + ' scanned package' + (data.metadata.totalDependencies === 1 ? '' : 's'));
    if (total) {
      var counts = data.actions.reduce(function (acc, _ref) {
        var action = _ref.action,
            isMajor = _ref.isMajor,
            resolves = _ref.resolves;

        if (action === 'update' || action === 'install' && !isMajor) {
          resolves.forEach(function (_ref2) {
            var id = _ref2.id,
                path = _ref2.path;
            return acc.advisories.add(id + '::' + path);
          });
        }
        if (isMajor) {
          resolves.forEach(function (_ref3) {
            var id = _ref3.id,
                path = _ref3.path;
            return acc.major.add(id + '::' + path);
          });
        }
        if (action === 'review') {
          resolves.forEach(function (_ref4) {
            var id = _ref4.id,
                path = _ref4.path;
            return acc.review.add(id + '::' + path);
          });
        }
        return acc;
      }, { advisories: new Set(), major: new Set(), review: new Set() });
      if (counts.advisories.size) {
        log('  run `npm audit fix` to fix ' + counts.advisories.size + ' of them.');
      }
      if (counts.major.size) {
        var maj = counts.major.size;
        log('  ' + maj + ' vulnerabilit' + (maj === 1 ? 'y' : 'ies') + ' require' + (maj === 1 ? 's' : '') + ' semver-major dependency updates.');
      }
      if (counts.review.size) {
        var rev = counts.review.size;
        log('  ' + rev + ' vulnerabilit' + (rev === 1 ? 'y' : 'ies') + ' require' + (rev === 1 ? 's' : '') + ' manual review. See the full report for details.');
      }
    }
  };

  var reportTitle = function reportTitle() {
    var tableOptions = {
      colWidths: [78]
    };
    tableOptions.chars = blankChars;
    var table = new Table(tableOptions);
    table.push([{
      content: '=== npm audit security report ===',
      vAlign: 'center',
      hAlign: 'center'
    }]);
    log(table.toString());
  };

  var actions = function actions(data, config) {
    reportTitle();

    if (Object.keys(data.advisories).length !== 0) {
      // vulns found display a report.

      var reviewFlag = false;

      data.actions.forEach(function (action) {
        if (action.action === 'update' || action.action === 'install') {
          var recommendation = getRecommendation(action, config);
          var label = action.resolves.length === 1 ? 'vulnerability' : 'vulnerabilities';
          log('# Run ' + Utils.color(' ' + recommendation.cmd + ' ', 'inverse', config.withColor) + ' to resolve ' + action.resolves.length + ' ' + label);
          if (recommendation.isBreaking) {
            log('SEMVER WARNING: Recommended action is a potentially breaking change');
          }

          action.resolves.forEach(function (resolution) {
            var advisory = data.advisories[resolution.id];
            var tableOptions = {
              colWidths: [15, 62],
              wordWrap: true
            };
            if (!config.withUnicode) {
              tableOptions.chars = blankChars;
            }
            var table = new Table(tableOptions);

            table.push(_defineProperty({}, Utils.severityLabel(advisory.severity, config.withColor, true), Utils.color(advisory.title, 'bold', config.withColor)), { 'Package': advisory.module_name }, { 'Dependency of': resolution.path.split('>')[0] + ' ' + (resolution.dev ? '[dev]' : '') }, { 'Path': '' + resolution.path.split('>').join(Utils.color(' > ', 'grey', config.withColor)) }, { 'More info': 'https://nodesecurity.io/advisories/' + advisory.id });

            log(table.toString() + '\n\n');
          });
        }
        if (action.action === 'review') {
          if (!reviewFlag) {
            var tableOptions = {
              colWidths: [78]
            };
            if (!config.withUnicode) {
              tableOptions.chars = blankChars;
            }
            var table = new Table(tableOptions);
            table.push([{
              content: 'Manual Review\nSome vulnerabilities require your attention to resolve\n\nVisit https://go.npm.me/audit-guide for additional guidance',
              vAlign: 'center',
              hAlign: 'center'
            }]);

            log(table.toString());
          }
          reviewFlag = true;

          action.resolves.forEach(function (resolution) {
            var advisory = data.advisories[resolution.id];
            var tableOptions = {
              colWidths: [15, 62],
              wordWrap: true
            };
            if (!config.withUnicode) {
              tableOptions.chars = blankChars;
            }
            var table = new Table(tableOptions);
            var patchedIn = advisory.patched_versions.replace(' ', '') === '<0.0.0' ? 'No patch available' : advisory.patched_versions;

            table.push(_defineProperty({}, Utils.severityLabel(advisory.severity, config.withColor, true), Utils.color(advisory.title, 'bold', config.withColor)), { 'Package': advisory.module_name }, { 'Patched in': patchedIn }, { 'Dependency of': resolution.path.split('>')[0] + ' ' + (resolution.dev ? '[dev]' : '') }, { 'Path': '' + resolution.path.split('>').join(Utils.color(' > ', 'grey', config.withColor)) }, { 'More info': 'https://nodesecurity.io/advisories/' + advisory.id });
            log(table.toString());
          });
        }
      });
    }
  };

  actions(data, config);
  footer(data);

  return {
    report: output.trim(),
    exitCode: exit
  };
};

var getRecommendation = function getRecommendation(action, config) {
  if (action.action === 'install') {
    var isDev = action.resolves[0].dev;

    return {
      cmd: 'npm install ' + (isDev ? '--save-dev ' : '') + action.module + '@' + action.target,
      isBreaking: action.isMajor
    };
  } else {
    return {
      cmd: 'npm update ' + action.module + ' --depth ' + action.depth,
      isBreaking: false
    };
  }
};

module.exports = report;
//# sourceMappingURL=detail.js.map