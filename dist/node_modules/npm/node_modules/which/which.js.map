{"version":3,"sources":["../../../../../node_modules/npm/node_modules/which/which.js"],"names":["module","exports","which","sync","whichSync","isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","er","Error","code","getPathInfo","opt","colon","pathEnv","PATH","pathExt","split","pathExtExe","unshift","cwd","PATHEXT","indexOf","match","ext","extExe","cb","info","found","F","i","l","all","length","pathPart","charAt","slice","p","join","test","E","ii","ll","is","push","j","cur","ex","nothrow"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiBC,KAAjB;AACAA,MAAMC,IAAN,GAAaC,SAAb;;AAEA,IAAIC,YAAYC,QAAQC,QAAR,KAAqB,OAArB,IACZD,QAAQE,GAAR,CAAYC,MAAZ,KAAuB,QADX,IAEZH,QAAQE,GAAR,CAAYC,MAAZ,KAAuB,MAF3B;;AAIA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,QAAQP,YAAY,GAAZ,GAAkB,GAA9B;AACA,IAAIQ,QAAQF,QAAQ,OAAR,CAAZ;;AAEA,SAASG,gBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIC,KAAK,IAAIC,KAAJ,CAAU,gBAAgBF,GAA1B,CAAT;AACAC,KAAGE,IAAH,GAAU,QAAV;;AAEA,SAAOF,EAAP;AACD;;AAED,SAASG,WAAT,CAAsBJ,GAAtB,EAA2BK,GAA3B,EAAgC;AAC9B,MAAIC,QAAQD,IAAIC,KAAJ,IAAaT,KAAzB;AACA,MAAIU,UAAUF,IAAIV,IAAJ,IAAYJ,QAAQE,GAAR,CAAYe,IAAxB,IAAgC,EAA9C;AACA,MAAIC,UAAU,CAAC,EAAD,CAAd;;AAEAF,YAAUA,QAAQG,KAAR,CAAcJ,KAAd,CAAV;;AAEA,MAAIK,aAAa,EAAjB;AACA,MAAIrB,SAAJ,EAAe;AACbiB,YAAQK,OAAR,CAAgBrB,QAAQsB,GAAR,EAAhB;AACAF,iBAAcN,IAAII,OAAJ,IAAelB,QAAQE,GAAR,CAAYqB,OAA3B,IAAsC,qBAApD;AACAL,cAAUE,WAAWD,KAAX,CAAiBJ,KAAjB,CAAV;;AAGA;AACA;AACA,QAAIN,IAAIe,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,IAA2BN,QAAQ,CAAR,MAAe,EAA9C,EACEA,QAAQG,OAAR,CAAgB,EAAhB;AACH;;AAED;AACA;AACA,MAAIZ,IAAIgB,KAAJ,CAAU,IAAV,KAAmB1B,aAAaU,IAAIgB,KAAJ,CAAU,IAAV,CAApC,EACET,UAAU,CAAC,EAAD,CAAV;;AAEF,SAAO;AACLd,SAAKc,OADA;AAELU,SAAKR,OAFA;AAGLS,YAAQP;AAHH,GAAP;AAKD;;AAED,SAASxB,KAAT,CAAgBa,GAAhB,EAAqBK,GAArB,EAA0Bc,EAA1B,EAA8B;AAC5B,MAAI,OAAOd,GAAP,KAAe,UAAnB,EAA+B;AAC7Bc,SAAKd,GAAL;AACAA,UAAM,EAAN;AACD;;AAED,MAAIe,OAAOhB,YAAYJ,GAAZ,EAAiBK,GAAjB,CAAX;AACA,MAAIE,UAAUa,KAAK3B,GAAnB;AACA,MAAIgB,UAAUW,KAAKH,GAAnB;AACA,MAAIN,aAAaS,KAAKF,MAAtB;AACA,MAAIG,QAAQ,EAAZ,CAEC,CAAC,SAASC,CAAT,CAAYC,CAAZ,EAAeC,CAAf,EAAkB;AAClB,QAAID,MAAMC,CAAV,EAAa;AACX,UAAInB,IAAIoB,GAAJ,IAAWJ,MAAMK,MAArB,EACE,OAAOP,GAAG,IAAH,EAASE,KAAT,CAAP,CADF,KAGE,OAAOF,GAAGpB,iBAAiBC,GAAjB,CAAH,CAAP;AACH;;AAED,QAAI2B,WAAWpB,QAAQgB,CAAR,CAAf;AACA,QAAII,SAASC,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA8BD,SAASE,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAAzD,EACEF,WAAWA,SAASE,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;;AAEF,QAAIC,IAAInC,KAAKoC,IAAL,CAAUJ,QAAV,EAAoB3B,GAApB,CAAR;AACA,QAAI,CAAC2B,QAAD,IAAc,WAAD,CAAcK,IAAd,CAAmBhC,GAAnB,CAAjB,EAA0C;AACxC8B,UAAI9B,IAAI6B,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkBC,CAAtB;AACD;AACD,KAAC,CAAC,SAASG,CAAT,CAAYC,EAAZ,EAAgBC,EAAhB,EAAoB;AACpB,UAAID,OAAOC,EAAX,EAAe,OAAOb,EAAEC,IAAI,CAAN,EAASC,CAAT,CAAP;AACf,UAAIP,MAAMR,QAAQyB,EAAR,CAAV;AACApC,YAAMgC,IAAIb,GAAV,EAAe,EAAER,SAASE,UAAX,EAAf,EAAwC,UAAUV,EAAV,EAAcmC,EAAd,EAAkB;AACxD,YAAI,CAACnC,EAAD,IAAOmC,EAAX,EAAe;AACb,cAAI/B,IAAIoB,GAAR,EACEJ,MAAMgB,IAAN,CAAWP,IAAIb,GAAf,EADF,KAGE,OAAOE,GAAG,IAAH,EAASW,IAAIb,GAAb,CAAP;AACH;AACD,eAAOgB,EAAEC,KAAK,CAAP,EAAUC,EAAV,CAAP;AACD,OARD;AASD,KAZA,EAYE,CAZF,EAYK1B,QAAQiB,MAZb;AAaF,GA7BA,EA6BE,CA7BF,EA6BKnB,QAAQmB,MA7Bb;AA8BF;;AAED,SAASrC,SAAT,CAAoBW,GAApB,EAAyBK,GAAzB,EAA8B;AAC5BA,QAAMA,OAAO,EAAb;;AAEA,MAAIe,OAAOhB,YAAYJ,GAAZ,EAAiBK,GAAjB,CAAX;AACA,MAAIE,UAAUa,KAAK3B,GAAnB;AACA,MAAIgB,UAAUW,KAAKH,GAAnB;AACA,MAAIN,aAAaS,KAAKF,MAAtB;AACA,MAAIG,QAAQ,EAAZ;;AAEA,OAAK,IAAIE,IAAI,CAAR,EAAWC,IAAIjB,QAAQmB,MAA5B,EAAoCH,IAAIC,CAAxC,EAA2CD,GAA3C,EAAiD;AAC/C,QAAII,WAAWpB,QAAQgB,CAAR,CAAf;AACA,QAAII,SAASC,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA8BD,SAASE,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAAzD,EACEF,WAAWA,SAASE,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;;AAEF,QAAIC,IAAInC,KAAKoC,IAAL,CAAUJ,QAAV,EAAoB3B,GAApB,CAAR;AACA,QAAI,CAAC2B,QAAD,IAAa,YAAYK,IAAZ,CAAiBhC,GAAjB,CAAjB,EAAwC;AACtC8B,UAAI9B,IAAI6B,KAAJ,CAAU,CAAV,EAAa,CAAb,IAAkBC,CAAtB;AACD;AACD,SAAK,IAAIQ,IAAI,CAAR,EAAWH,KAAK1B,QAAQiB,MAA7B,EAAqCY,IAAIH,EAAzC,EAA6CG,GAA7C,EAAmD;AACjD,UAAIC,MAAMT,IAAIrB,QAAQ6B,CAAR,CAAd;AACA,UAAIF,EAAJ;AACA,UAAI;AACFA,aAAKtC,MAAMV,IAAN,CAAWmD,GAAX,EAAgB,EAAE9B,SAASE,UAAX,EAAhB,CAAL;AACA,YAAIyB,EAAJ,EAAQ;AACN,cAAI/B,IAAIoB,GAAR,EACEJ,MAAMgB,IAAN,CAAWE,GAAX,EADF,KAGE,OAAOA,GAAP;AACH;AACF,OARD,CAQE,OAAOC,EAAP,EAAW,CAAE;AAChB;AACF;;AAED,MAAInC,IAAIoB,GAAJ,IAAWJ,MAAMK,MAArB,EACE,OAAOL,KAAP;;AAEF,MAAIhB,IAAIoC,OAAR,EACE,OAAO,IAAP;;AAEF,QAAM1C,iBAAiBC,GAAjB,CAAN;AACD","file":"which.js","sourcesContent":["module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = require('path')\nvar COLON = isWindows ? ';' : ':'\nvar isexe = require('isexe')\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n"]}