{"version":3,"sources":["../../../../../node_modules/npm/node_modules/wcwidth/index.js"],"names":["defaults","require","combining","DEFAULTS","nul","control","module","exports","wcwidth","str","wcswidth","config","opts","s","i","length","n","charCodeAt","ucs","bisearch","min","max","mid","Math","floor"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\"\n\nvar defaults = require('defaults')\nvar combining = require('./combining')\n\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n}\n\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS)\n}\n\nmodule.exports.config = function(opts) {\n  opts = defaults(opts || {}, DEFAULTS)\n  return function wcwidth(str) {\n    return wcswidth(str, opts)\n  }\n}\n\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts)\n\n  var s = 0\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts)\n    if (n < 0) return -1\n    s += n\n  }\n\n  return s\n}\n\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul\n  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control\n\n  // binary search in table of non-spacing characters\n  if (bisearch(ucs)) return 0\n\n  // if we arrive here, ucs is not a combining or C0/C1 control character\n  return 1 +\n      (ucs >= 0x1100 &&\n       (ucs <= 0x115f ||                       // Hangul Jamo init. consonants\n        ucs == 0x2329 || ucs == 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n         ucs != 0x303f) ||                     // CJK ... Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n        (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n        (ucs >= 0x30000 && ucs <= 0x3fffd)));\n}\n\nfunction bisearch(ucs) {\n  var min = 0\n  var max = combining.length - 1\n  var mid\n\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false\n\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2)\n    if (ucs > combining[mid][1]) min = mid + 1\n    else if (ucs < combining[mid][0]) max = mid - 1\n    else return true\n  }\n\n  return false\n}\n"]}