{"version":3,"sources":["../../../../../node_modules/npm/node_modules/byte-size/index.js"],"names":["module","exports","byteSize","ByteSize","bytes","options","units","precision","table","expFrom","expTo","metric","iec","metric_octet","iec_octet","base","i","length","lower","Math","pow","upper","value","String","unit","toFixed","trim"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * Convert a bytes value to a more human-readable format. Choose between [metric or IEC units](https://en.wikipedia.org/wiki/Gigabyte), summarised below.\n *\n * Value | Metric\n * ----- | -------------\n * 1000  | kB  kilobyte\n * 1000^2 | MB  megabyte\n * 1000^3 | GB  gigabyte\n * 1000^4 | TB  terabyte\n * 1000^5 | PB  petabyte\n * 1000^6 | EB  exabyte\n * 1000^7 | ZB  zettabyte\n * 1000^8 | YB  yottabyte\n *\n * Value | IEC\n * ----- | ------------\n * 1024  | KiB kibibyte\n * 1024^2 | MiB mebibyte\n * 1024^3 | GiB gibibyte\n * 1024^4 | TiB tebibyte\n * 1024^5 | PiB pebibyte\n * 1024^6 | EiB exbibyte\n * 1024^7 | ZiB zebibyte\n * 1024^8 | YiB yobibyte\n *\n * Value | Metric (octet)\n * ----- | -------------\n * 1000  | ko  kilooctet\n * 1000^2 | Mo  megaoctet\n * 1000^3 | Go  gigaoctet\n * 1000^4 | To  teraoctet\n * 1000^5 | Po  petaoctet\n * 1000^6 | Eo  exaoctet\n * 1000^7 | Zo  zettaoctet\n * 1000^8 | Yo  yottaoctet\n *\n * Value | IEC (octet)\n * ----- | ------------\n * 1024  | Kio kilooctet\n * 1024^2 | Mio mebioctet\n * 1024^3 | Gio gibioctet\n * 1024^4 | Tio tebioctet\n * 1024^5 | Pio pebioctet\n * 1024^6 | Eio exbioctet\n * 1024^7 | Zio zebioctet\n * 1024^8 | Yio yobioctet\n *\n * @module byte-size\n * @example\n * ```js\n * const byteSize = require('byte-size')\n * ```\n */\nmodule.exports = byteSize\n\nclass ByteSize {\n  constructor (bytes, options) {\n    options = options || {}\n    options.units = options.units || 'metric'\n    options.precision = typeof options.precision === 'undefined' ? 1 : options.precision\n\n    const table = [\n      { expFrom: 0, expTo: 1, metric: 'B', iec: 'B', metric_octet: 'o', iec_octet: 'o' },\n      { expFrom: 1, expTo: 2, metric: 'kB', iec: 'KiB', metric_octet: 'ko', iec_octet: 'Kio' },\n      { expFrom: 2, expTo: 3, metric: 'MB', iec: 'MiB', metric_octet: 'Mo', iec_octet: 'Mio' },\n      { expFrom: 3, expTo: 4, metric: 'GB', iec: 'GiB', metric_octet: 'Go', iec_octet: 'Gio' },\n      { expFrom: 4, expTo: 5, metric: 'TB', iec: 'TiB', metric_octet: 'To', iec_octet: 'Tio' },\n      { expFrom: 5, expTo: 6, metric: 'PB', iec: 'PiB', metric_octet: 'Po', iec_octet: 'Pio' },\n      { expFrom: 6, expTo: 7, metric: 'EB', iec: 'EiB', metric_octet: 'Eo', iec_octet: 'Eio' },\n      { expFrom: 7, expTo: 8, metric: 'ZB', iec: 'ZiB', metric_octet: 'Zo', iec_octet: 'Zio' },\n      { expFrom: 8, expTo: 9, metric: 'YB', iec: 'YiB', metric_octet: 'Yo', iec_octet: 'Yio' }\n    ]\n\n    const base = options.units === 'metric' || options.units === 'metric_octet' ? 1000 : 1024\n\n    for (let i = 0; i < table.length; i++) {\n      const lower = Math.pow(base, table[i].expFrom)\n      const upper = Math.pow(base, table[i].expTo)\n      if (bytes >= lower && bytes < upper) {\n        const units = table[i][options.units]\n        if (i === 0) {\n          this.value = String(bytes)\n          this.unit = units\n          return\n        } else {\n          this.value = (bytes / lower).toFixed(options.precision)\n          this.unit = units\n          return\n        }\n      }\n    }\n\n    this.value = String(bytes)\n    this.unit = ''\n  }\n\n  toString () {\n    return `${this.value} ${this.unit}`.trim()\n  }\n}\n\n/**\n * @param {number} - the bytes value to convert.\n * @param [options] {object} - optional config.\n * @param [options.precision=1] {number} - number of decimal places.\n * @param [options.units=metric] {string} - select `'metric'`, `'iec'`, `'metric_octet'` or `'iec_octet'` units.\n * @returns {{ value: string, unit: string}}\n * @alias module:byte-size\n * @example\n * ```js\n * > const byteSize = require('byte-size')\n *\n * > byteSize(1580)\n * { value: '1.6', unit: 'kB' }\n *\n * > byteSize(1580, { units: 'iec' })\n * { value: '1.5', unit: 'KiB' }\n *\n * > byteSize(1580, { units: 'iec', precision: 3 })\n * { value: '1.543', unit: 'KiB' }\n *\n * > byteSize(1580, { units: 'iec', precision: 0 })\n * { value: '2', unit: 'KiB' }\n *\n * > byteSize(1580, { units: 'metric_octet' })\n * { value: '1.6', unit: 'ko' }\n *\n * > byteSize(1580, { units: 'iec_octet' })\n * { value: '1.5', unit: 'Kio' }\n *\n * > byteSize(1580, { units: 'iec_octet' }).toString()\n * '1.5 Kio'\n *\n * > const { value, unit }  = byteSize(1580, { units: 'iec_octet' })\n * > `${value} ${unit}`\n * '1.5 Kio'\n * ```\n */\nfunction byteSize (bytes, options) {\n  return new ByteSize(bytes, options)\n}\n"]}