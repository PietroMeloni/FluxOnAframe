{"version":3,"sources":["../../../../../node_modules/npm/node_modules/chalk/templates.js"],"names":["TEMPLATE_REGEX","STYLE_REGEX","STRING_REGEX","ESCAPE_REGEX","ESCAPES","Map","unescape","c","length","String","fromCharCode","parseInt","slice","get","parseArguments","name","args","results","chunks","trim","split","matches","chunk","isNaN","push","Number","match","replace","m","escape","chr","Error","parseStyle","style","lastIndex","exec","concat","buildStyle","chalk","styles","enabled","layer","inverse","current","Object","keys","styleName","Array","isArray","apply","module","exports","tmp","escapeChar","close","str","join","pop","errMsg"],"mappings":"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","file":"templates.js","sourcesContent":["'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n"]}