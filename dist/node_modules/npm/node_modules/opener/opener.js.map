{"version":3,"sources":["../../../../../node_modules/npm/node_modules/opener/opener.js"],"names":["childProcess","require","opener","args","options","callback","command","process","platform","concat","map","value","replace","execFile","module","exports","main","id","argv","slice","error"],"mappings":";;AAEA;;;;AAEA,IAAIA,eAAeC,QAAQ,eAAR,CAAnB;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACrC;AACA,QAAIC,UAAUC,QAAQC,QAAR,KAAqB,OAArB,GAA+B,KAA/B,GACAD,QAAQC,QAAR,KAAqB,QAArB,GAAgC,MAAhC,GACA,UAFd;;AAIA,QAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;AAC1BA,eAAO,CAACA,IAAD,CAAP;AACH;;AAED,QAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AAC/BC,mBAAWD,OAAX;AACAA,kBAAU,EAAV;AACH;;AAED,QAAIA,WAAW,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAA9B,IAA0CA,QAAQE,OAAtD,EAA+D;AAC3D,YAAIC,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AAC9B;AACAL,mBAAO,CAACC,QAAQE,OAAT,EAAkBG,MAAlB,CAAyBN,IAAzB,CAAP;AACH,SAHD,MAGO;AACHG,sBAAUF,QAAQE,OAAlB;AACH;AACJ;;AAED,QAAIC,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,eAAOA,KAAKO,GAAL,CAAS,UAASC,KAAT,EAAgB;AAC5B,mBAAOA,MAAMC,OAAN,CAAc,IAAd,EAAoB,IAApB,CAAP;AACH,SAFM,CAAP;AAGAT,eAAO,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsBM,MAAtB,CAA6BN,IAA7B,CAAP;AACH;;AAED,WAAOH,aAAaa,QAAb,CAAsBP,OAAtB,EAA+BH,IAA/B,EAAqCC,OAArC,EAA8CC,QAA9C,CAAP;AACH;;AAED;AACA;AACAS,OAAOC,OAAP,GAAiBb,MAAjB;;AAEA;AACA,IAAID,QAAQe,IAAR,IAAgBf,QAAQe,IAAR,CAAaC,EAAb,KAAoBH,OAAOG,EAA/C,EAAmD;AAC/Cf,WAAOK,QAAQW,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAP,EAA8B,UAAUC,KAAV,EAAiB;AAC3C,YAAIA,KAAJ,EAAW;AACP,kBAAMA,KAAN;AACH;AACJ,KAJD;AAKH","file":"opener.js","sourcesContent":["\n\n\"use strict\";\n\nvar childProcess = require(\"child_process\");\n\nfunction opener(args, options, callback) {\n    // http://stackoverflow.com/q/1480971/3191, but see below for Windows.\n    var command = process.platform === \"win32\" ? \"cmd\" :\n                  process.platform === \"darwin\" ? \"open\" :\n                  \"xdg-open\";\n\n    if (typeof args === \"string\") {\n        args = [args];\n    }\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (options && typeof options === \"object\" && options.command) {\n        if (process.platform === \"win32\") {\n            // *always* use cmd on windows\n            args = [options.command].concat(args);\n        } else {\n            command = options.command;\n        }\n    }\n\n    if (process.platform === \"win32\") {\n        // On Windows, we really want to use the \"start\" command. But, the rules regarding arguments with spaces, and\n        // escaping them with quotes, can get really arcane. So the easiest way to deal with this is to pass off the\n        // responsibility to \"cmd /c\", which has that logic built in.\n        //\n        // Furthermore, if \"cmd /c\" double-quoted the first parameter, then \"start\" will interpret it as a window title,\n        // so we need to add a dummy empty-string window title: http://stackoverflow.com/a/154090/3191\n        //\n        // Additionally, on Windows ampersand needs to be escaped when passed to \"start\"\n        args = args.map(function(value) {\n            return value.replace(/&/g, '^&');\n        });\n        args = [\"/c\", \"start\", '\"\"'].concat(args);\n    }\n\n    return childProcess.execFile(command, args, options, callback);\n}\n\n// Export `opener` for programmatic access.\n// You might use this to e.g. open a website: `opener(\"http://google.com\")`\nmodule.exports = opener;\n\n// If we're being called from the command line, just execute, using the command-line arguments.\nif (require.main && require.main.id === module.id) {\n    opener(process.argv.slice(2), function (error) {\n        if (error) {\n            throw error;\n        }\n    });\n}\n"]}