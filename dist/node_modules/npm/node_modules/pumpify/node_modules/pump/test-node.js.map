{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pumpify/node_modules/pump/test-node.js"],"names":["pump","require","rs","createReadStream","ws","createWriteStream","toHex","reverse","Transform","_transform","chunk","enc","callback","push","toString","wsClosed","rsClosed","callbackCalled","check","console","log","clearTimeout","timeout","on","res","process","exit","setTimeout","destroy","Error"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,SAAR,CAAX;;AAEA,IAAIC,KAAKD,QAAQ,IAAR,EAAcE,gBAAd,CAA+B,aAA/B,CAAT;AACA,IAAIC,KAAKH,QAAQ,IAAR,EAAcI,iBAAd,CAAgC,WAAhC,CAAT;;AAEA,IAAIC,QAAQ,SAARA,KAAQ,GAAY;AACtB,MAAIC,UAAU,KAAKN,QAAQ,QAAR,EAAkBO,SAAvB,GAAd;;AAEAD,UAAQE,UAAR,GAAqB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,QAAtB,EAAgC;AACnDL,YAAQM,IAAR,CAAaH,MAAMI,QAAN,CAAe,KAAf,CAAb;AACAF;AACD,GAHD;;AAKA,SAAOL,OAAP;AACD,CATD;;AAWA,IAAIQ,WAAW,KAAf;AACA,IAAIC,WAAW,KAAf;AACA,IAAIC,iBAAiB,KAArB;;AAEA,IAAIC,QAAQ,SAARA,KAAQ,GAAY;AACtB,MAAIH,YAAYC,QAAZ,IAAwBC,cAA5B,EAA4C;AAC1CE,YAAQC,GAAR,CAAY,qBAAZ;AACAC,iBAAaC,OAAb;AACD;AACF,CALD;;AAOAlB,GAAGmB,EAAH,CAAM,OAAN,EAAe,YAAY;AACzBR,aAAW,IAAX;AACAG;AACD,CAHD;;AAKAhB,GAAGqB,EAAH,CAAM,OAAN,EAAe,YAAY;AACzBP,aAAW,IAAX;AACAE;AACD,CAHD;;AAKA,IAAIM,MAAMxB,KAAKE,EAAL,EAASI,OAAT,EAAkBA,OAAlB,EAA2BA,OAA3B,EAAoCF,EAApC,EAAwC,YAAY;AAC5Da,mBAAiB,IAAjB;AACAC;AACD,CAHS,CAAV;;AAKA,IAAIM,GAAJ,EAAS;AACPC,UAAQC,IAAR,CAAa,CAAb;AACD;;AAEDC,WAAW,YAAY;AACrBzB,KAAG0B,OAAH;AACD,CAFD,EAEG,IAFH;;AAIA,IAAIN,UAAUK,WAAW,YAAY;AACnC,QAAM,IAAIE,KAAJ,CAAU,SAAV,CAAN;AACD,CAFa,EAEX,IAFW,CAAd","file":"test-node.js","sourcesContent":["var pump = require('./index')\n\nvar rs = require('fs').createReadStream('/dev/random')\nvar ws = require('fs').createWriteStream('/dev/null')\n\nvar toHex = function () {\n  var reverse = new (require('stream').Transform)()\n\n  reverse._transform = function (chunk, enc, callback) {\n    reverse.push(chunk.toString('hex'))\n    callback()\n  }\n\n  return reverse\n}\n\nvar wsClosed = false\nvar rsClosed = false\nvar callbackCalled = false\n\nvar check = function () {\n  if (wsClosed && rsClosed && callbackCalled) {\n    console.log('test-node.js passes')\n    clearTimeout(timeout)\n  }\n}\n\nws.on('close', function () {\n  wsClosed = true\n  check()\n})\n\nrs.on('close', function () {\n  rsClosed = true\n  check()\n})\n\nvar res = pump(rs, toHex(), toHex(), toHex(), ws, function () {\n  callbackCalled = true\n  check()\n})\n\nif (res) {\n  process.exit(1)\n}\n\nsetTimeout(function () {\n  rs.destroy()\n}, 1000)\n\nvar timeout = setTimeout(function () {\n  throw new Error('timeout')\n}, 5000)\n"]}