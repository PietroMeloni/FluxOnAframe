{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/yargs/lib/command.js"],"names":["inspect","require","path","Parser","DEFAULT_MARKER","module","exports","command","yargs","usage","validation","self","handlers","aliasMap","defaultCommand","addHandler","cmd","description","builder","handler","middlewares","aliases","Array","isArray","slice","moduleName","concat","extractDesc","parsedCommand","parseCommand","map","alias","isDefault","parsedAliases","filter","c","test","length","push","replace","forEach","original","demanded","optional","addDirectory","dir","context","req","callerFile","opts","recurse","extensions","parentVisit","visit","o","obj","joined","filename","visited","files","indexOf","mod","Error","commandFromFilename","basename","extname","keys","i","l","extraSpacesStrippedCommand","splitCommand","split","bregex","shift","variadic","getCommands","Object","getCommandHandlers","hasDefaultCommand","runCommand","parsed","commandIndex","commandHandler","currentContext","getContext","numFiles","parentCommands","commands","innerArgv","argv","innerYargs","positionalMap","fullCommands","reset","shouldUpdateUsage","getUsageInstance","usageFromParentCommandsCommandHandler","_parseArgs","key","option","_hasOutput","populatePositionals","_runValidation","error","_setHasOutput","middlewareArgs","reduce","initialObj","middleware","assign","handlerResult","then","fail","pop","splice","getUsageDisabled","getUsage","trim","pc","join","runDefaultBuilderOn","commandString","_","positionalCount","demand","populatePositional","maybe","postProcessPositionals","cmdToParseOptions","positional","parseOptions","String","options","getOptions","default","array","unparsed","value","detailed","message","positionalKeys","apply","cmdString","d","cmds","undefined","frozen","freeze","unfreeze"],"mappings":"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","file":"command.js","sourcesContent":["'use strict'\n\nconst inspect = require('util').inspect\nconst path = require('path')\nconst Parser = require('yargs-parser')\n\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function command (yargs, usage, validation) {\n  const self = {}\n  let handlers = {}\n  let aliasMap = {}\n  let defaultCommand\n  self.addHandler = function addHandler (cmd, description, builder, handler, middlewares) {\n    let aliases = []\n    handler = handler || (() => {})\n    middlewares = middlewares || []\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1)\n      cmd = cmd[0]\n    } else if (typeof cmd === 'object') {\n      let command = (Array.isArray(cmd.command) || typeof cmd.command === 'string') ? cmd.command : moduleName(cmd)\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases)\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares)\n      return\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares)\n      return\n    }\n\n    // parse positionals out of cmd string\n    const parsedCommand = self.parseCommand(cmd)\n\n    // remove positional args from aliases only\n    aliases = aliases.map(alias => self.parseCommand(alias).cmd)\n\n    // check for default and filter out '*''\n    let isDefault = false\n    const parsedAliases = [parsedCommand.cmd].concat(aliases).filter((c) => {\n      if (DEFAULT_MARKER.test(c)) {\n        isDefault = true\n        return false\n      }\n      return true\n    })\n\n    // standardize on $0 for default command.\n    if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0')\n\n    // shift cmd and aliases after filtering out '*'\n    if (isDefault) {\n      parsedCommand.cmd = parsedAliases[0]\n      aliases = parsedAliases.slice(1)\n      cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd)\n    }\n\n    // populate aliasMap\n    aliases.forEach((alias) => {\n      aliasMap[alias] = parsedCommand.cmd\n    })\n\n    if (description !== false) {\n      usage.command(cmd, description, isDefault, aliases)\n    }\n\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      description: description,\n      handler,\n      builder: builder || {},\n      middlewares: middlewares || [],\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    }\n\n    if (isDefault) defaultCommand = handlers[parsedCommand.cmd]\n  }\n\n  self.addDirectory = function addDirectory (dir, context, req, callerFile, opts) {\n    opts = opts || {}\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js']\n    // allow consumer to define their own visitor function\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o\n    // call addHandler via visitor function\n    opts.visit = function visit (obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename)\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited\n        // keep track of visited files in context.files\n        context.files.push(joined)\n        self.addHandler(visited)\n      }\n      return visited\n    }\n    require('require-directory')({ require: req, filename: callerFile }, dir, opts)\n  }\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName (obj) {\n    const mod = require('which-module')(obj)\n    if (!mod) throw new Error(`No command name given for module: ${inspect(obj)}`)\n    return commandFromFilename(mod.filename)\n  }\n\n  // derive command name from filename\n  function commandFromFilename (filename) {\n    return path.basename(filename, path.extname(filename))\n  }\n\n  function extractDesc (obj) {\n    for (let keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]]\n      if (typeof test === 'string' || typeof test === 'boolean') return test\n    }\n    return false\n  }\n\n  self.parseCommand = function parseCommand (cmd) {\n    const extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ')\n    const splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/)\n    const bregex = /\\.*[\\][<>]/g\n    const parsedCommand = {\n      cmd: (splitCommand.shift()).replace(bregex, ''),\n      demanded: [],\n      optional: []\n    }\n    splitCommand.forEach((cmd, i) => {\n      let variadic = false\n      cmd = cmd.replace(/\\s/g, '')\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic\n        })\n      }\n    })\n    return parsedCommand\n  }\n\n  self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap))\n\n  self.getCommandHandlers = () => handlers\n\n  self.hasDefaultCommand = () => !!defaultCommand\n\n  self.runCommand = function runCommand (command, yargs, parsed, commandIndex) {\n    let aliases = parsed.aliases\n    const commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand\n    const currentContext = yargs.getContext()\n    let numFiles = currentContext.files.length\n    const parentCommands = currentContext.commands.slice()\n\n    // what does yargs look like after the buidler is run?\n    let innerArgv = parsed.argv\n    let innerYargs = null\n    let positionalMap = {}\n    if (command) {\n      currentContext.commands.push(command)\n      currentContext.fullCommands.push(commandHandler.original)\n    }\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerYargs = commandHandler.builder(yargs.reset(parsed.aliases))\n      // if the builder function did not yet parse argv with reset yargs\n      // and did not explicitly set a usage() string, then apply the\n      // original command string as usage() for consistent behavior with\n      // options object below.\n      if (yargs.parsed === false) {\n        if (shouldUpdateUsage(yargs)) {\n          yargs.getUsageInstance().usage(\n            usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n            commandHandler.description\n          )\n        }\n        innerArgv = innerYargs ? innerYargs._parseArgs(null, null, true, commandIndex) : yargs._parseArgs(null, null, true, commandIndex)\n      } else {\n        innerArgv = yargs.parsed.argv\n      }\n\n      if (innerYargs && yargs.parsed === false) aliases = innerYargs.parsed.aliases\n      else aliases = yargs.parsed.aliases\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerYargs = yargs.reset(parsed.aliases)\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(\n          usageFromParentCommandsCommandHandler(parentCommands, commandHandler),\n          commandHandler.description\n        )\n      }\n      Object.keys(commandHandler.builder).forEach((key) => {\n        innerYargs.option(key, commandHandler.builder[key])\n      })\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex)\n      aliases = innerYargs.parsed.aliases\n    }\n\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs)\n    }\n\n    // we apply validation post-hoc, so that custom\n    // checks get passed populated positional arguments.\n    if (!yargs._hasOutput()) yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error)\n\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput()\n      if (commandHandler.middlewares.length > 0) {\n        const middlewareArgs = commandHandler.middlewares.reduce(function (initialObj, middleware) {\n          return Object.assign(initialObj, middleware(innerArgv))\n        }, {})\n        Object.assign(innerArgv, middlewareArgs)\n      }\n      const handlerResult = commandHandler.handler(innerArgv)\n      if (handlerResult && typeof handlerResult.then === 'function') {\n        handlerResult.then(\n          null,\n          (error) => yargs.getUsageInstance().fail(null, error)\n        )\n      }\n    }\n\n    if (command) {\n      currentContext.commands.pop()\n      currentContext.fullCommands.pop()\n    }\n    numFiles = currentContext.files.length - numFiles\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles)\n\n    return innerArgv\n  }\n\n  function shouldUpdateUsage (yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() &&\n      yargs.getUsageInstance().getUsage().length === 0\n  }\n\n  function usageFromParentCommandsCommandHandler (parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original\n    const pc = parentCommands.filter((c) => { return !DEFAULT_MARKER.test(c) })\n    pc.push(c)\n    return `$0 ${pc.join(' ')}`\n  }\n\n  self.runDefaultBuilderOn = function (yargs) {\n    if (shouldUpdateUsage(yargs)) {\n      // build the root-level command string from the default string.\n      const commandString = DEFAULT_MARKER.test(defaultCommand.original)\n        ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ')\n      yargs.getUsageInstance().usage(\n        commandString,\n        defaultCommand.description\n      )\n    }\n    const builder = defaultCommand.builder\n    if (typeof builder === 'function') {\n      builder(yargs)\n    } else {\n      Object.keys(builder).forEach((key) => {\n        yargs.option(key, builder[key])\n      })\n    }\n  }\n\n  // transcribe all positional arguments \"command <foo> <bar> [apple]\"\n  // onto argv.\n  function populatePositionals (commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length) // nuke the current commands\n    const demanded = commandHandler.demanded.slice(0)\n    const optional = commandHandler.optional.slice(0)\n    const positionalMap = {}\n\n    validation.positionalCount(demanded.length, argv._.length)\n\n    while (demanded.length) {\n      const demand = demanded.shift()\n      populatePositional(demand, argv, positionalMap)\n    }\n\n    while (optional.length) {\n      const maybe = optional.shift()\n      populatePositional(maybe, argv, positionalMap)\n    }\n\n    argv._ = context.commands.concat(argv._)\n\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original))\n\n    return positionalMap\n  }\n\n  function populatePositional (positional, argv, positionalMap, parseOptions) {\n    const cmd = positional.cmd[0]\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String)\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())]\n    }\n  }\n\n  // we run yargs-parser against the positional arguments\n  // applying the same parsing logic used for flags.\n  function postProcessPositionals (argv, positionalMap, parseOptions) {\n    // combine the parsing hints we've inferred from the command\n    // string with explicitly configured parsing hints.\n    const options = Object.assign({}, yargs.getOptions())\n    options.default = Object.assign(parseOptions.default, options.default)\n    options.alias = Object.assign(parseOptions.alias, options.alias)\n    options.array = options.array.concat(parseOptions.array)\n\n    const unparsed = []\n    Object.keys(positionalMap).forEach((key) => {\n      positionalMap[key].map((value) => {\n        unparsed.push(`--${key}`)\n        unparsed.push(value)\n      })\n    })\n\n    // short-circuit parse.\n    if (!unparsed.length) return\n\n    const parsed = Parser.detailed(unparsed, options)\n\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error)\n    } else {\n      // only copy over positional keys (don't overwrite\n      // flag arguments that were already parsed).\n      const positionalKeys = Object.keys(positionalMap)\n      Object.keys(positionalMap).forEach((key) => {\n        [].push.apply(positionalKeys, parsed.aliases[key])\n      })\n\n      Object.keys(parsed.argv).forEach((key) => {\n        if (positionalKeys.indexOf(key) !== -1) {\n          argv[key] = parsed.argv[key]\n        }\n      })\n    }\n  }\n\n  self.cmdToParseOptions = function (cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    }\n\n    const parsed = self.parseCommand(cmdString)\n    parsed.demanded.forEach((d) => {\n      const cmds = d.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (d.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n      parseOptions.demand[cmd] = true\n    })\n\n    parsed.optional.forEach((o) => {\n      const cmds = o.cmd.slice(0)\n      const cmd = cmds.shift()\n      if (o.variadic) {\n        parseOptions.array.push(cmd)\n        parseOptions.default[cmd] = []\n      }\n      cmds.forEach((c) => {\n        parseOptions.alias[cmd] = c\n      })\n    })\n\n    return parseOptions\n  }\n\n  self.reset = () => {\n    handlers = {}\n    aliasMap = {}\n    defaultCommand = undefined\n    return self\n  }\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  let frozen\n  self.freeze = () => {\n    frozen = {}\n    frozen.handlers = handlers\n    frozen.aliasMap = aliasMap\n    frozen.defaultCommand = defaultCommand\n  }\n  self.unfreeze = () => {\n    handlers = frozen.handlers\n    aliasMap = frozen.aliasMap\n    defaultCommand = frozen.defaultCommand\n    frozen = undefined\n  }\n\n  return self\n}\n"]}