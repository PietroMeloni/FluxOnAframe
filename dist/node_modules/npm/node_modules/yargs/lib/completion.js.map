{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/yargs/lib/completion.js"],"names":["fs","require","path","module","exports","completion","yargs","usage","command","self","completionKey","getCompletion","args","done","completions","current","length","argv","parse","aliases","parsed","completionFunction","result","then","list","process","nextTick","catch","err","handlers","getCommandHandlers","i","ii","builder","y","reset","match","getCommands","forEach","usageCommand","commandName","parseCommand","cmd","indexOf","push","Object","keys","getOptions","key","keyAndAliases","concat","notInArgs","every","val","generateCompletionScript","$0","script","readFileSync","resolve","__dirname","name","basename","replace","registerFunction","fn"],"mappings":"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","file":"completion.js","sourcesContent":["'use strict'\nconst fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function completion (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function getCompletion (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        const result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then((list) => {\n            process.nextTick(() => { done(list) })\n          }).catch((err) => {\n            process.nextTick(() => { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, (completions) => {\n          done(completions)\n        })\n      }\n    }\n\n    const handlers = command.getCommandHandlers()\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder\n        if (typeof builder === 'function') {\n          const y = yargs.reset()\n          builder(y)\n          return y.argv\n        }\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach((usageCommand) => {\n        const commandName = command.parseCommand(usageCommand[0]).cmd\n        if (args.indexOf(commandName) === -1) {\n          completions.push(commandName)\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach((key) => {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        const keyAndAliases = [key].concat(aliases[key] || [])\n        const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1)\n        if (notInArgs) {\n          completions.push(`--${key}`)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function generateCompletionScript ($0, cmd) {\n    let script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    const name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = `./${$0}`\n\n    script = script.replace(/{{app_name}}/g, name)\n    script = script.replace(/{{completion_command}}/g, cmd)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  let completionFunction = null\n  self.registerFunction = (fn) => {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]}