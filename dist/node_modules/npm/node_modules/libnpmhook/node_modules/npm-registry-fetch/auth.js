'use strict';

var config = require('./config.js');
var url = require('url');

module.exports = getAuth;
function getAuth(registry, opts) {
  if (!registry) {
    throw new Error('registry is required');
  }
  opts = config(opts);
  var AUTH = {};
  var regKey = registry && registryKey(registry);
  var doKey = function doKey(key, alias) {
    return addKey(opts, AUTH, regKey, key, alias);
  };
  doKey('token');
  doKey('_authToken', 'token');
  doKey('username');
  doKey('password');
  doKey('_password', 'password');
  doKey('email');
  doKey('_auth');
  doKey('otp');
  doKey('always-auth', 'alwaysAuth');
  if (AUTH.password) {
    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8');
  }
  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth;
  return AUTH;
}

function addKey(opts, obj, scope, key, objKey) {
  if (opts.get(key)) {
    obj[objKey || key] = opts.get(key);
  }
  if (scope && opts.get(scope + ':' + key)) {
    obj[objKey || key] = opts.get(scope + ':' + key);
  }
}

// Called a nerf dart in the main codebase. Used as a "safe"
// key when fetching registry info from config.
function registryKey(registry) {
  var parsed = url.parse(registry);
  var formatted = url.format({
    host: parsed.host,
    pathname: parsed.pathname,
    slashes: parsed.slashes
  });
  return url.resolve(formatted, '.');
}
//# sourceMappingURL=auth.js.map