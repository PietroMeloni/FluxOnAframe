{"version":3,"sources":["../../../../../node_modules/npm/node_modules/find-up/index.js"],"names":["path","require","locatePath","module","exports","filename","opts","startDir","resolve","cwd","root","parse","filenames","concat","Promise","find","dir","then","file","join","dirname","sync"],"mappings":"AAAA;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;;AAEAE,OAAOC,OAAP,GAAiB,UAACC,QAAD,EAAWC,IAAX,EAAoB;AACpCA,QAAOA,QAAQ,EAAf;;AAEA,KAAMC,WAAWP,KAAKQ,OAAL,CAAaF,KAAKG,GAAL,IAAY,EAAzB,CAAjB;AACA,KAAMC,OAAOV,KAAKW,KAAL,CAAWJ,QAAX,EAAqBG,IAAlC;;AAEA,KAAME,YAAY,GAAGC,MAAH,CAAUR,QAAV,CAAlB;;AAEA,QAAO,IAAIS,OAAJ,CAAY,mBAAW;AAC7B,GAAC,SAASC,IAAT,CAAcC,GAAd,EAAmB;AACnBd,cAAWU,SAAX,EAAsB,EAACH,KAAKO,GAAN,EAAtB,EAAkCC,IAAlC,CAAuC,gBAAQ;AAC9C,QAAIC,IAAJ,EAAU;AACTV,aAAQR,KAAKmB,IAAL,CAAUH,GAAV,EAAeE,IAAf,CAAR;AACA,KAFD,MAEO,IAAIF,QAAQN,IAAZ,EAAkB;AACxBF,aAAQ,IAAR;AACA,KAFM,MAEA;AACNO,UAAKf,KAAKoB,OAAL,CAAaJ,GAAb,CAAL;AACA;AACD,IARD;AASA,GAVD,EAUGT,QAVH;AAWA,EAZM,CAAP;AAaA,CArBD;;AAuBAJ,OAAOC,OAAP,CAAeiB,IAAf,GAAsB,UAAChB,QAAD,EAAWC,IAAX,EAAoB;AACzCA,QAAOA,QAAQ,EAAf;;AAEA,KAAIU,MAAMhB,KAAKQ,OAAL,CAAaF,KAAKG,GAAL,IAAY,EAAzB,CAAV;AACA,KAAMC,OAAOV,KAAKW,KAAL,CAAWK,GAAX,EAAgBN,IAA7B;;AAEA,KAAME,YAAY,GAAGC,MAAH,CAAUR,QAAV,CAAlB;;AAEA;AACA,QAAO,IAAP,EAAa;AACZ,MAAMa,OAAOhB,WAAWmB,IAAX,CAAgBT,SAAhB,EAA2B,EAACH,KAAKO,GAAN,EAA3B,CAAb;;AAEA,MAAIE,IAAJ,EAAU;AACT,UAAOlB,KAAKmB,IAAL,CAAUH,GAAV,EAAeE,IAAf,CAAP;AACA,GAFD,MAEO,IAAIF,QAAQN,IAAZ,EAAkB;AACxB,UAAO,IAAP;AACA;;AAEDM,QAAMhB,KAAKoB,OAAL,CAAaJ,GAAb,CAAN;AACA;AACD,CApBD","file":"index.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst locatePath = require('locate-path');\n\nmodule.exports = (filename, opts) => {\n\topts = opts || {};\n\n\tconst startDir = path.resolve(opts.cwd || '');\n\tconst root = path.parse(startDir).root;\n\n\tconst filenames = [].concat(filename);\n\n\treturn new Promise(resolve => {\n\t\t(function find(dir) {\n\t\t\tlocatePath(filenames, {cwd: dir}).then(file => {\n\t\t\t\tif (file) {\n\t\t\t\t\tresolve(path.join(dir, file));\n\t\t\t\t} else if (dir === root) {\n\t\t\t\t\tresolve(null);\n\t\t\t\t} else {\n\t\t\t\t\tfind(path.dirname(dir));\n\t\t\t\t}\n\t\t\t});\n\t\t})(startDir);\n\t});\n};\n\nmodule.exports.sync = (filename, opts) => {\n\topts = opts || {};\n\n\tlet dir = path.resolve(opts.cwd || '');\n\tconst root = path.parse(dir).root;\n\n\tconst filenames = [].concat(filename);\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst file = locatePath.sync(filenames, {cwd: dir});\n\n\t\tif (file) {\n\t\t\treturn path.join(dir, file);\n\t\t} else if (dir === root) {\n\t\t\treturn null;\n\t\t}\n\n\t\tdir = path.dirname(dir);\n\t}\n};\n"]}