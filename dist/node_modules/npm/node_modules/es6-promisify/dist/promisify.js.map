{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/es6-promisify/dist/promisify.js"],"names":["module","exports","ES6Promise","require","thatLooksLikeAPromiseToMe","o","then","catch","promisify","original","settings","_len","arguments","length","args","Array","_key","returnMultipleArguments","multiArgs","target","thisArg","resolve","reject","push","callback","err","_len2","values","_key2","response","apply"],"mappings":"AAAA;;AAEA;;AACAA,OAAOC,OAAP,GAAiB,YAAY;;AAEzB;;AAEA;;AAEA,QAAIC,aAAaC,QAAQ,cAAR,CAAjB;;AAEA;;;;;;;;AAQA,aAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAClC,eAAOA,KAAK,OAAOA,EAAEC,IAAT,KAAkB,UAAvB,IAAqC,OAAOD,EAAEE,KAAT,KAAmB,UAA/D;AACH;;AAED;;;;;;;;;;;;;AAaA,WAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuC;;AAE1C,eAAO,YAAY;AACf,iBAAK,IAAIC,OAAOC,UAAUC,MAArB,EAA6BC,OAAOC,MAAMJ,IAAN,CAApC,EAAiDK,OAAO,CAA7D,EAAgEA,OAAOL,IAAvE,EAA6EK,MAA7E,EAAqF;AACjFF,qBAAKE,IAAL,IAAaJ,UAAUI,IAAV,CAAb;AACH;;AAED,gBAAIC,0BAA0BP,YAAYA,SAASQ,SAAnD;;AAEA,gBAAIC,SAAS,KAAK,CAAlB;AACA,gBAAIT,YAAYA,SAASU,OAAzB,EAAkC;AAC9BD,yBAAST,SAASU,OAAlB;AACH,aAFD,MAEO,IAAIV,QAAJ,EAAc;AACjBS,yBAAST,QAAT;AACH;;AAED;AACA,mBAAO,IAAIR,UAAJ,CAAe,UAAUmB,OAAV,EAAmBC,MAAnB,EAA2B;;AAE7C;AACAR,qBAAKS,IAAL,CAAU,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;;AAE7B,wBAAIA,GAAJ,EAAS;AACL,+BAAOH,OAAOG,GAAP,CAAP;AACH;;AAED,yBAAK,IAAIC,QAAQd,UAAUC,MAAtB,EAA8Bc,SAASZ,MAAMW,QAAQ,CAAR,GAAYA,QAAQ,CAApB,GAAwB,CAA9B,CAAvC,EAAyEE,QAAQ,CAAtF,EAAyFA,QAAQF,KAAjG,EAAwGE,OAAxG,EAAiH;AAC7GD,+BAAOC,QAAQ,CAAf,IAAoBhB,UAAUgB,KAAV,CAApB;AACH;;AAED,wBAAI,UAAU,CAAC,CAACX,uBAAhB,EAAyC;AACrC,+BAAOI,QAAQM,OAAO,CAAP,CAAR,CAAP;AACH;;AAEDN,4BAAQM,MAAR;AACH,iBAfD;;AAiBA;AACA,oBAAIE,WAAWpB,SAASqB,KAAT,CAAeX,MAAf,EAAuBL,IAAvB,CAAf;;AAEA;AACA;AACA,oBAAIV,0BAA0ByB,QAA1B,CAAJ,EAAyC;AACrCR,4BAAQQ,QAAR;AACH;AACJ,aA5BM,CAAP;AA6BH,SA5CD;AA6CH,KA/CD;AAgDH,CAjFgB,EAAjB","file":"promisify.js","sourcesContent":["\"use strict\";\n\n/* global module, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    // Get a promise object. This may be native, or it may be polyfilled\n\n    var ES6Promise = require(\"./promise.js\");\n\n    /**\n     * thatLooksLikeAPromiseToMe()\n     *\n     * Duck-types a promise.\n     *\n     * @param {object} o\n     * @return {bool} True if this resembles a promise\n     */\n    function thatLooksLikeAPromiseToMe(o) {\n        return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n    }\n\n    /**\n     * promisify()\n     *\n     * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n     * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n     * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n     *\n     * @param {function} original - The function to promisify\n     * @param {object} settings - Settings object\n     * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n     * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n     * @return {function} A promisified version of `original`\n     */\n    return function promisify(original, settings) {\n\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var returnMultipleArguments = settings && settings.multiArgs;\n\n            var target = void 0;\n            if (settings && settings.thisArg) {\n                target = settings.thisArg;\n            } else if (settings) {\n                target = settings;\n            }\n\n            // Return the promisified function\n            return new ES6Promise(function (resolve, reject) {\n\n                // Append the callback bound to the context\n                args.push(function callback(err) {\n\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                        values[_key2 - 1] = arguments[_key2];\n                    }\n\n                    if (false === !!returnMultipleArguments) {\n                        return resolve(values[0]);\n                    }\n\n                    resolve(values);\n                });\n\n                // Call the function\n                var response = original.apply(target, args);\n\n                // If it looks like original already returns a promise,\n                // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n                if (thatLooksLikeAPromiseToMe(response)) {\n                    resolve(response);\n                }\n            });\n        };\n    };\n}();"]}