{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/bluebird/js/release/assert.js"],"names":["module","exports","AssertionError","a","constructor$","message","name","prototype","Error","constructor","getParams","args","params","i","length","push","nativeAssert","callName","expect","constructorArgs","join","fn","Function","apply","e","SyntaxError","assert","boolExpr","charAt","nativeCallName","$_len","arguments","Array","Math","max","$_i","ret","captureStackTrace"],"mappings":"AAAA;;AACAA,OAAOC,OAAP,GAAkB,YAAU;AAC5B,QAAIC,iBAAkB,YAAW;AAC7B,iBAASA,cAAT,CAAwBC,CAAxB,EAA2B;AACvB,iBAAKC,YAAL,CAAkBD,CAAlB;AACA,iBAAKE,OAAL,GAAeF,CAAf;AACA,iBAAKG,IAAL,GAAY,gBAAZ;AACH;AACDJ,uBAAeK,SAAf,GAA2B,IAAIC,KAAJ,EAA3B;AACAN,uBAAeK,SAAf,CAAyBE,WAAzB,GAAuCP,cAAvC;AACAA,uBAAeK,SAAf,CAAyBH,YAAzB,GAAwCI,KAAxC;AACA,eAAON,cAAP;AACH,KAVoB,EAArB;;AAYA,aAASQ,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,YAAIC,SAAS,EAAb;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiC,EAAED,CAAnC;AAAsCD,mBAAOG,IAAP,CAAY,QAAQF,CAApB;AAAtC,SACA,OAAOD,MAAP;AACH;;AAED,aAASI,YAAT,CAAsBC,QAAtB,EAAgCN,IAAhC,EAAsCO,MAAtC,EAA8C;AAC1C,YAAI;AACA,gBAAIN,SAASF,UAAUC,IAAV,CAAb;AACA,gBAAIQ,kBAAkBP,MAAtB;AACAO,4BAAgBJ,IAAhB,CAAqB,YACbE,QADa,GACF,GADE,GACGL,OAAOQ,IAAP,CAAY,GAAZ,CADH,GACsB,IAD3C;AAEA,gBAAIC,KAAKC,SAASC,KAAT,CAAe,IAAf,EAAqBJ,eAArB,CAAT;AACA,mBAAOE,GAAGE,KAAH,CAAS,IAAT,EAAeZ,IAAf,CAAP;AACH,SAPD,CAOE,OAAOa,CAAP,EAAU;AACR,gBAAI,EAAEA,aAAaC,WAAf,CAAJ,EAAiC;AAC7B,sBAAMD,CAAN;AACH,aAFD,MAEO;AACH,uBAAON,MAAP;AACH;AACJ;AACJ;;AAED,WAAO,SAASQ,MAAT,CAAgBC,QAAhB,EAA0BtB,OAA1B,EAAmC;AACtC,YAAIsB,aAAa,IAAjB,EAAuB;;AAEvB,YAAI,OAAOA,QAAP,KAAoB,QAApB,IACAA,SAASC,MAAT,CAAgB,CAAhB,MAAuB,GAD3B,EACgC;AAC5B,gBAAIC,iBAAiBF,QAArB;AACA,gBAAIG,QAAQC,UAAUjB,MAAtB,CAA6B,IAAIH,OAAO,IAAIqB,KAAJ,CAAUC,KAAKC,GAAL,CAASJ,QAAQ,CAAjB,EAAoB,CAApB,CAAV,CAAX,CAA8C,KAAI,IAAIK,MAAM,CAAd,EAAiBA,MAAML,KAAvB,EAA8B,EAAEK,GAAhC,EAAqC;AAACxB,qBAAKwB,MAAM,CAAX,IAAgBJ,UAAUI,GAAV,CAAhB;AAAgC;AACjJ,gBAAInB,aAAaa,cAAb,EAA6BlB,IAA7B,EAAmCN,OAAnC,MAAgDA,OAApD,EAA6D;AAC7DA,sBAAWwB,iBAAiB,OAAjB,GAA2BxB,OAAtC;AACH;;AAED,YAAI+B,MAAM,IAAIlC,cAAJ,CAAmBG,OAAnB,CAAV;AACA,YAAIG,MAAM6B,iBAAV,EAA6B;AACzB7B,kBAAM6B,iBAAN,CAAwBD,GAAxB,EAA6BV,MAA7B;AACH;AACD,cAAMU,GAAN;AACH,KAhBD;AAiBC,CArDgB,EAAjB","file":"assert.js","sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0)); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];};\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"]}