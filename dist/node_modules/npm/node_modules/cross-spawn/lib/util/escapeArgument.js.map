{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/cross-spawn/lib/util/escapeArgument.js"],"names":["escapeArgument","arg","quote","replace","module","exports"],"mappings":"AAAA;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,KAA7B,EAAoC;AAChC;AACAD,UAAM,KAAKA,GAAX;;AAEA;AACA;AACA,QAAI,CAACC,KAAL,EAAY;AACRD,cAAMA,IAAIE,OAAJ,CAAY,sBAAZ,EAAoC,KAApC,CAAN;AACH,KAFD,MAEO;AACH;AACA;AACAF,cAAMA,IAAIE,OAAJ,CAAY,SAAZ,EAAuB,SAAvB,CAAN;;AAEA;AACA;AACA;AACAF,cAAMA,IAAIE,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAN;;AAEA;;AAEA;AACAF,cAAM,MAAMA,GAAN,GAAY,GAAlB;AACH;;AAED,WAAOA,GAAP;AACH;;AAEDG,OAAOC,OAAP,GAAiBL,cAAjB","file":"escapeArgument.js","sourcesContent":["'use strict';\n\nfunction escapeArgument(arg, quote) {\n    // Convert to string\n    arg = '' + arg;\n\n    // If we are not going to quote the argument,\n    // escape shell metacharacters, including double and single quotes:\n    if (!quote) {\n        arg = arg.replace(/([()%!^<>&|;,\"'\\s])/g, '^$1');\n    } else {\n        // Sequence of backslashes followed by a double quote:\n        // double up all the backslashes and escape the double quote\n        arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n        // Sequence of backslashes followed by the end of the string\n        // (which will become a double quote later):\n        // double up all the backslashes\n        arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n        // All other backslashes occur literally\n\n        // Quote the whole thing:\n        arg = '\"' + arg + '\"';\n    }\n\n    return arg;\n}\n\nmodule.exports = escapeArgument;\n"]}