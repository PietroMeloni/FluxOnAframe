{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/cross-spawn/lib/parse.js"],"names":["resolveCommand","require","hasEmptyArgumentBug","escapeArgument","escapeCommand","readShebang","isWin","process","platform","skipShellRegExp","supportsShellOption","parseInt","version","substr","split","parseNonShell","parsed","shebang","needsShell","applyQuotes","file","command","args","unshift","test","map","arg","length","join","env","comspec","options","windowsVerbatimArguments","parseShell","shellCommand","concat","shell","parse","Array","isArray","slice","undefined","original","module","exports"],"mappings":"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","file":"parse.js","sourcesContent":["'use strict';\n\nvar resolveCommand = require('./util/resolveCommand');\nvar hasEmptyArgumentBug = require('./util/hasEmptyArgumentBug');\nvar escapeArgument = require('./util/escapeArgument');\nvar escapeCommand = require('./util/escapeCommand');\nvar readShebang = require('./util/readShebang');\n\nvar isWin = process.platform === 'win32';\nvar skipShellRegExp = /\\.(?:com|exe)$/i;\n\n// Supported in Node >= 6 and >= 4.8\nvar supportsShellOption = parseInt(process.version.substr(1).split('.')[0], 10) >= 6 ||\n parseInt(process.version.substr(1).split('.')[0], 10) === 4 && parseInt(process.version.substr(1).split('.')[1], 10) >= 8;\n\nfunction parseNonShell(parsed) {\n    var shebang;\n    var needsShell;\n    var applyQuotes;\n\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    parsed.file = resolveCommand(parsed.command);\n    parsed.file = parsed.file || resolveCommand(parsed.command, true);\n    shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n        needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(resolveCommand(shebang) || resolveCommand(shebang, true));\n    } else {\n        needsShell = hasEmptyArgumentBug || !skipShellRegExp.test(parsed.file);\n    }\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    if (needsShell) {\n        // Escape command & arguments\n        applyQuotes = (parsed.command !== 'echo');  // Do not quote arguments for the special \"echo\" command\n        parsed.command = escapeCommand(parsed.command);\n        parsed.args = parsed.args.map(function (arg) {\n            return escapeArgument(arg, applyQuotes);\n        });\n\n        // Make use of cmd.exe\n        parsed.args = ['/d', '/s', '/c', '\"' + parsed.command + (parsed.args.length ? ' ' + parsed.args.join(' ') : '') + '\"'];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true;  // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parseShell(parsed) {\n    var shellCommand;\n\n    // If node supports the shell option, there's no need to mimic its behavior\n    if (supportsShellOption) {\n        return parsed;\n    }\n\n    // Mimic node shell option, see: https://github.com/nodejs/node/blob/b9f6a2dc059a1062776133f3d4fd848c4da7d150/lib/child_process.js#L335\n    shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n    if (isWin) {\n        parsed.command = typeof parsed.options.shell === 'string' ? parsed.options.shell : process.env.comspec || 'cmd.exe';\n        parsed.args = ['/d', '/s', '/c', '\"' + shellCommand + '\"'];\n        parsed.options.windowsVerbatimArguments = true;  // Tell node's spawn that the arguments are already escaped\n    } else {\n        if (typeof parsed.options.shell === 'string') {\n            parsed.command = parsed.options.shell;\n        } else if (process.platform === 'android') {\n            parsed.command = '/system/bin/sh';\n        } else {\n            parsed.command = '/bin/sh';\n        }\n\n        parsed.args = ['-c', shellCommand];\n    }\n\n    return parsed;\n}\n\n// ------------------------------------------------\n\nfunction parse(command, args, options) {\n    var parsed;\n\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : [];  // Clone array to avoid changing the original\n    options = options || {};\n\n    // Build our parsed object\n    parsed = {\n        command: command,\n        args: args,\n        options: options,\n        file: undefined,\n        original: command,\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parseShell(parsed) : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n"]}