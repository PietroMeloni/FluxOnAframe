{"version":3,"sources":["../../../../../node_modules/npm/node_modules/imurmurhash/imurmurhash.js"],"names":["cache","MurmurHash3","key","seed","m","reset","length","hash","prototype","h1","k1","i","top","len","rem","charCodeAt","result","module","exports"],"mappings":"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","file":"imurmurhash.js","sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"]}