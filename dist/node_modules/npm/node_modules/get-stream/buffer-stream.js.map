{"version":3,"sources":["../../../../../node_modules/npm/node_modules/get-stream/buffer-stream.js"],"names":["PassThrough","require","module","exports","opts","Object","assign","array","encoding","buffer","objectMode","len","ret","stream","setEncoding","on","push","chunk","length","getBufferedValue","Buffer","concat","join","getBufferedLength"],"mappings":"AAAA;;AACA,IAAMA,cAAcC,QAAQ,QAAR,EAAkBD,WAAtC;;AAEAE,OAAOC,OAAP,GAAiB,gBAAQ;AACxBC,QAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,CAAP;;AAEA,KAAMG,QAAQH,KAAKG,KAAnB;AACA,KAAIC,WAAWJ,KAAKI,QAApB;AACA,KAAMC,SAASD,aAAa,QAA5B;AACA,KAAIE,aAAa,KAAjB;;AAEA,KAAIH,KAAJ,EAAW;AACVG,eAAa,EAAEF,YAAYC,MAAd,CAAb;AACA,EAFD,MAEO;AACND,aAAWA,YAAY,MAAvB;AACA;;AAED,KAAIC,MAAJ,EAAY;AACXD,aAAW,IAAX;AACA;;AAED,KAAIG,MAAM,CAAV;AACA,KAAMC,MAAM,EAAZ;AACA,KAAMC,SAAS,IAAIb,WAAJ,CAAgB,EAACU,sBAAD,EAAhB,CAAf;;AAEA,KAAIF,QAAJ,EAAc;AACbK,SAAOC,WAAP,CAAmBN,QAAnB;AACA;;AAEDK,QAAOE,EAAP,CAAU,MAAV,EAAkB,iBAAS;AAC1BH,MAAII,IAAJ,CAASC,KAAT;;AAEA,MAAIP,UAAJ,EAAgB;AACfC,SAAMC,IAAIM,MAAV;AACA,GAFD,MAEO;AACNP,UAAOM,MAAMC,MAAb;AACA;AACD,EARD;;AAUAL,QAAOM,gBAAP,GAA0B,YAAM;AAC/B,MAAIZ,KAAJ,EAAW;AACV,UAAOK,GAAP;AACA;;AAED,SAAOH,SAASW,OAAOC,MAAP,CAAcT,GAAd,EAAmBD,GAAnB,CAAT,GAAmCC,IAAIU,IAAJ,CAAS,EAAT,CAA1C;AACA,EAND;;AAQAT,QAAOU,iBAAP,GAA2B;AAAA,SAAMZ,GAAN;AAAA,EAA3B;;AAEA,QAAOE,MAAP;AACA,CA/CD","file":"buffer-stream.js","sourcesContent":["'use strict';\nconst PassThrough = require('stream').PassThrough;\n\nmodule.exports = opts => {\n\topts = Object.assign({}, opts);\n\n\tconst array = opts.array;\n\tlet encoding = opts.encoding;\n\tconst buffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || buffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (buffer) {\n\t\tencoding = null;\n\t}\n\n\tlet len = 0;\n\tconst ret = [];\n\tconst stream = new PassThrough({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tstream.on('data', chunk => {\n\t\tret.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlen = ret.length;\n\t\t} else {\n\t\t\tlen += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn buffer ? Buffer.concat(ret, len) : ret.join('');\n\t};\n\n\tstream.getBufferedLength = () => len;\n\n\treturn stream;\n};\n"]}