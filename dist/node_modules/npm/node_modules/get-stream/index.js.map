{"version":3,"sources":["../../../../../node_modules/npm/node_modules/get-stream/index.js"],"names":["bufferStream","require","getStream","inputStream","opts","Promise","reject","Error","Object","assign","maxBuffer","Infinity","stream","clean","p","resolve","error","err","bufferedData","getBufferedValue","once","pipe","on","getBufferedLength","unpipe","then","module","exports","buffer","encoding","array"],"mappings":"AAAA;;AACA,IAAMA,eAAeC,QAAQ,iBAAR,CAArB;;AAEA,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,IAAhC,EAAsC;AACrC,KAAI,CAACD,WAAL,EAAkB;AACjB,SAAOE,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACA;;AAEDH,QAAOI,OAAOC,MAAP,CAAc,EAACC,WAAWC,QAAZ,EAAd,EAAqCP,IAArC,CAAP;;AAEA,KAAMM,YAAYN,KAAKM,SAAvB;AACA,KAAIE,eAAJ;AACA,KAAIC,cAAJ;;AAEA,KAAMC,IAAI,IAAIT,OAAJ,CAAY,UAACU,OAAD,EAAUT,MAAV,EAAqB;AAC1C,MAAMU,QAAQ,SAARA,KAAQ,MAAO;AACpB,OAAIC,GAAJ,EAAS;AAAE;AACVA,QAAIC,YAAJ,GAAmBN,OAAOO,gBAAP,EAAnB;AACA;;AAEDb,UAAOW,GAAP;AACA,GAND;;AAQAL,WAASZ,aAAaI,IAAb,CAAT;AACAD,cAAYiB,IAAZ,CAAiB,OAAjB,EAA0BJ,KAA1B;AACAb,cAAYkB,IAAZ,CAAiBT,MAAjB;;AAEAA,SAAOU,EAAP,CAAU,MAAV,EAAkB,YAAM;AACvB,OAAIV,OAAOW,iBAAP,KAA6Bb,SAAjC,EAA4C;AAC3CJ,WAAO,IAAIC,KAAJ,CAAU,oBAAV,CAAP;AACA;AACD,GAJD;AAKAK,SAAOQ,IAAP,CAAY,OAAZ,EAAqBJ,KAArB;AACAJ,SAAOU,EAAP,CAAU,KAAV,EAAiBP,OAAjB;;AAEAF,UAAQ,iBAAM;AACb;AACA,OAAIV,YAAYqB,MAAhB,EAAwB;AACvBrB,gBAAYqB,MAAZ,CAAmBZ,MAAnB;AACA;AACD,GALD;AAMA,EA3BS,CAAV;;AA6BAE,GAAEW,IAAF,CAAOZ,KAAP,EAAcA,KAAd;;AAEA,QAAOC,EAAEW,IAAF,CAAO;AAAA,SAAMb,OAAOO,gBAAP,EAAN;AAAA,EAAP,CAAP;AACA;;AAEDO,OAAOC,OAAP,GAAiBzB,SAAjB;AACAwB,OAAOC,OAAP,CAAeC,MAAf,GAAwB,UAAChB,MAAD,EAASR,IAAT;AAAA,QAAkBF,UAAUU,MAAV,EAAkBJ,OAAOC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB,EAACyB,UAAU,QAAX,EAAxB,CAAlB,CAAlB;AAAA,CAAxB;AACAH,OAAOC,OAAP,CAAeG,KAAf,GAAuB,UAAClB,MAAD,EAASR,IAAT;AAAA,QAAkBF,UAAUU,MAAV,EAAkBJ,OAAOC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB,EAAC0B,OAAO,IAAR,EAAxB,CAAlB,CAAlB;AAAA,CAAvB","file":"index.js","sourcesContent":["'use strict';\nconst bufferStream = require('./buffer-stream');\n\nfunction getStream(inputStream, opts) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\topts = Object.assign({maxBuffer: Infinity}, opts);\n\n\tconst maxBuffer = opts.maxBuffer;\n\tlet stream;\n\tlet clean;\n\n\tconst p = new Promise((resolve, reject) => {\n\t\tconst error = err => {\n\t\t\tif (err) { // null check\n\t\t\t\terr.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(err);\n\t\t};\n\n\t\tstream = bufferStream(opts);\n\t\tinputStream.once('error', error);\n\t\tinputStream.pipe(stream);\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\treject(new Error('maxBuffer exceeded'));\n\t\t\t}\n\t\t});\n\t\tstream.once('error', error);\n\t\tstream.on('end', resolve);\n\n\t\tclean = () => {\n\t\t\t// some streams doesn't implement the `stream.Readable` interface correctly\n\t\t\tif (inputStream.unpipe) {\n\t\t\t\tinputStream.unpipe(stream);\n\t\t\t}\n\t\t};\n\t});\n\n\tp.then(clean, clean);\n\n\treturn p.then(() => stream.getBufferedValue());\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, opts) => getStream(stream, Object.assign({}, opts, {encoding: 'buffer'}));\nmodule.exports.array = (stream, opts) => getStream(stream, Object.assign({}, opts, {array: true}));\n"]}