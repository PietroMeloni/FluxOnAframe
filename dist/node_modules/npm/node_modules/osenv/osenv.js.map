{"version":3,"sources":["../../../../../node_modules/npm/node_modules/osenv/osenv.js"],"names":["isWindows","process","platform","path","require","exec","osTmpdir","osHomedir","memo","key","lookup","fallback","fell","falling","exports","cb","val","er","output","stderr","trim","nextTick","bind","env","USERDOMAIN","USERNAME","USER","PROMPT","PS1","COMPUTERNAME","HOSTNAME","PATH","Path","split","EDITOR","VISUAL","ComSpec","SHELL"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQC,QAAR,KAAqB,OAArC;AACA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,OAAOD,QAAQ,eAAR,EAAyBC,IAApC;AACA,IAAIC,WAAWF,QAAQ,WAAR,CAAf;AACA,IAAIG,YAAYH,QAAQ,YAAR,CAAhB;;AAEA;AACA;AACA;AACA;AACA,SAASI,IAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACpC,MAAIC,OAAO,KAAX;AACA,MAAIC,UAAU,KAAd;AACAC,UAAQL,GAAR,IAAe,UAAUM,EAAV,EAAc;AAC3B,QAAIC,MAAMN,QAAV;AACA,QAAI,CAACM,GAAD,IAAQ,CAACJ,IAAT,IAAiB,CAACC,OAAlB,IAA6BF,QAAjC,EAA2C;AACzCC,aAAO,IAAP;AACAC,gBAAU,IAAV;AACAR,WAAKM,QAAL,EAAe,UAAUM,EAAV,EAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AAC3CN,kBAAU,KAAV;AACA,YAAII,EAAJ,EAAQ,OAFmC,CAE5B;AACfD,cAAME,OAAOE,IAAP,EAAN;AACD,OAJD;AAKD;AACDN,YAAQL,GAAR,IAAe,UAAUM,EAAV,EAAc;AAC3B,UAAIA,EAAJ,EAAQd,QAAQoB,QAAR,CAAiBN,GAAGO,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBN,GAApB,CAAjB;AACR,aAAOA,GAAP;AACD,KAHD;AAIA,QAAID,MAAM,CAACF,OAAX,EAAoBZ,QAAQoB,QAAR,CAAiBN,GAAGO,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBN,GAApB,CAAjB;AACpB,WAAOA,GAAP;AACD,GAjBD;AAkBD;;AAEDR,KAAK,MAAL,EAAa,YAAY;AACvB,SAASR,YACAC,QAAQsB,GAAR,CAAYC,UAAZ,GAAyB,IAAzB,GAAgCvB,QAAQsB,GAAR,CAAYE,QAD5C,GAEAxB,QAAQsB,GAAR,CAAYG,IAFrB;AAID,CALD,EAKG,QALH;;AAOAlB,KAAK,QAAL,EAAe,YAAY;AACzB,SAAOR,YAAYC,QAAQsB,GAAR,CAAYI,MAAxB,GAAiC1B,QAAQsB,GAAR,CAAYK,GAApD;AACD,CAFD;;AAIApB,KAAK,UAAL,EAAiB,YAAY;AAC3B,SAAOR,YAAYC,QAAQsB,GAAR,CAAYM,YAAxB,GAAuC5B,QAAQsB,GAAR,CAAYO,QAA1D;AACD,CAFD,EAEG,UAFH;;AAIAtB,KAAK,QAAL,EAAe,YAAY;AACzB,SAAOF,UAAP;AACD,CAFD;;AAIAE,KAAK,MAAL,EAAa,YAAY;AACvB,SAAOD,WAAP;AACD,CAFD;;AAIAC,KAAK,MAAL,EAAa,YAAY;AACvB,SAAO,CAACP,QAAQsB,GAAR,CAAYQ,IAAZ,IACA9B,QAAQsB,GAAR,CAAYS,IADZ,IAEA/B,QAAQsB,GAAR,CAAYpB,IAFb,EAEmB8B,KAFnB,CAEyBjC,YAAY,GAAZ,GAAkB,GAF3C,CAAP;AAGD,CAJD;;AAMAQ,KAAK,QAAL,EAAe,YAAY;AACzB,SAAOP,QAAQsB,GAAR,CAAYW,MAAZ,IACAjC,QAAQsB,GAAR,CAAYY,MADZ,KAECnC,YAAY,aAAZ,GAA4B,IAF7B,CAAP;AAGD,CAJD;;AAMAQ,KAAK,OAAL,EAAc,YAAY;AACxB,SAAOR,YAAYC,QAAQsB,GAAR,CAAYa,OAAZ,IAAuB,KAAnC,GACEnC,QAAQsB,GAAR,CAAYc,KAAZ,IAAqB,MAD9B;AAED,CAHD","file":"osenv.js","sourcesContent":["var isWindows = process.platform === 'win32'\nvar path = require('path')\nvar exec = require('child_process').exec\nvar osTmpdir = require('os-tmpdir')\nvar osHomedir = require('os-homedir')\n\n// looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\nfunction memo (key, lookup, fallback) {\n  var fell = false\n  var falling = false\n  exports[key] = function (cb) {\n    var val = lookup()\n    if (!val && !fell && !falling && fallback) {\n      fell = true\n      falling = true\n      exec(fallback, function (er, output, stderr) {\n        falling = false\n        if (er) return // oh well, we tried\n        val = output.trim()\n      })\n    }\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val))\n      return val\n    }\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val))\n    return val\n  }\n}\n\nmemo('user', function () {\n  return ( isWindows\n         ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME\n         : process.env.USER\n         )\n}, 'whoami')\n\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1\n})\n\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME\n}, 'hostname')\n\nmemo('tmpdir', function () {\n  return osTmpdir()\n})\n\nmemo('home', function () {\n  return osHomedir()\n})\n\nmemo('path', function () {\n  return (process.env.PATH ||\n          process.env.Path ||\n          process.env.path).split(isWindows ? ';' : ':')\n})\n\nmemo('editor', function () {\n  return process.env.EDITOR ||\n         process.env.VISUAL ||\n         (isWindows ? 'notepad.exe' : 'vi')\n})\n\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd'\n         : process.env.SHELL || 'bash'\n})\n"]}