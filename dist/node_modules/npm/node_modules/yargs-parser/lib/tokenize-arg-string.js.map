{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/yargs-parser/lib/tokenize-arg-string.js"],"names":["module","exports","argString","Array","isArray","trim","i","prevC","c","opening","args","ii","length","charAt"],"mappings":";;AAAA;AACAA,OAAOC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACpC,MAAIC,MAAMC,OAAN,CAAcF,SAAd,CAAJ,EAA8B,OAAOA,SAAP;;AAE9BA,cAAYA,UAAUG,IAAV,EAAZ;;AAEA,MAAIC,IAAI,CAAR;AACA,MAAIC,QAAQ,IAAZ;AACA,MAAIC,IAAI,IAAR;AACA,MAAIC,UAAU,IAAd;AACA,MAAIC,OAAO,EAAX;;AAEA,OAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKT,UAAUU,MAAhC,EAAwCD,IAAxC,EAA8C;AAC5CJ,YAAQC,CAAR;AACAA,QAAIN,UAAUW,MAAV,CAAiBF,EAAjB,CAAJ;;AAEA;AACA,QAAIH,MAAM,GAAN,IAAa,CAACC,OAAlB,EAA2B;AACzB,UAAI,EAAEF,UAAU,GAAZ,CAAJ,EAAsB;AACpBD;AACD;AACD;AACD;;AAED;AACA;AACA,QAAIE,MAAMC,OAAV,EAAmB;AACjBA,gBAAU,IAAV;AACA;AACD,KAHD,MAGO,IAAI,CAACD,MAAM,GAAN,IAAaA,MAAM,GAApB,KAA4B,CAACC,OAAjC,EAA0C;AAC/CA,gBAAUD,CAAV;AACA;AACD;;AAED,QAAI,CAACE,KAAKJ,CAAL,CAAL,EAAcI,KAAKJ,CAAL,IAAU,EAAV;AACdI,SAAKJ,CAAL,KAAWE,CAAX;AACD;;AAED,SAAOE,IAAP;AACD,CAtCD","file":"tokenize-arg-string.js","sourcesContent":["// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) return argString\n\n  argString = argString.trim()\n\n  var i = 0\n  var prevC = null\n  var c = null\n  var opening = null\n  var args = []\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    prevC = c\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++\n      }\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n      continue\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n      continue\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n"]}