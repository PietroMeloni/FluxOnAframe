{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/promzard/test/buffer.js"],"names":["tap","require","pz","spawn","test","t","example","resolve","node","process","execPath","expect","c","customFds","output","stdout","on","d","respond","actual","stderr","match","stdin","write","end","JSON","parse","deepEqual"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,KAAR,CAAV;AACA,IAAIC,KAAKD,QAAQ,gBAAR,CAAT;AACA,IAAIE,QAAQF,QAAQ,eAAR,EAAyBE,KAArC;;AAEAH,IAAII,IAAJ,CAAS,gCAAT,EAA2C,UAAUC,CAAV,EAAa;;AAEtD,MAAIC,UAAUL,QAAQM,OAAR,CAAgB,sBAAhB,CAAd;AACA,MAAIC,OAAOC,QAAQC,QAAnB;;AAEA,MAAIC,SAAU;AACZ,YAAQ,SADI;AAEZ,eAAW,OAFC;AAGZ,mBAAe,qBAHH;AAIZ,YAAQ,eAJI;AAKZ,mBAAe;AACb,iBAAW,SADE;AAEb,cAAQ;AAFK,KALH;AASZ,oBAAgB,EATJ;AAUZ,uBAAmB;AACjB,aAAO;AADU,KAVP;AAaZ,eAAW;AACT,cAAQ;AADC,KAbC;AAgBZ,kBAAc;AACZ,cAAQ,KADI;AAEZ,aAAO;AAFK,KAhBF;AAoBZ,gBAAY,qCApBA;AAqBZ,gBAAY,CACV,QADU,EAEV,UAFU,EAGV,SAHU,EAIV,MAJU,CArBA;AA2BZ,cAAU;AACR,cAAQ,gBADA;AAER,eAAS,mBAFD;AAGR,aAAO;AAHC,KA3BE;AAgCZ,eAAW,KAhCC;AAiCZ,cAAU;AACR,cAAQ;AADA;AAjCE,GAAd;;AAsCA,MAAIC,IAAIT,MAAMK,IAAN,EAAY,CAACF,OAAD,CAAZ,EAAuB,EAAEO,WAAW,CAAC,CAAC,CAAF,EAAI,CAAC,CAAL,EAAO,CAAC,CAAR,CAAb,EAAvB,CAAR;AACA,MAAIC,SAAS,EAAb;AACAF,IAAEG,MAAF,CAASC,EAAT,CAAY,MAAZ,EAAoB,UAAUC,CAAV,EAAa;AAC/BH,cAAUG,CAAV;AACAC;AACD,GAHD;;AAKA,MAAIC,SAAS,EAAb;AACAP,IAAEQ,MAAF,CAASJ,EAAT,CAAY,MAAZ,EAAoB,UAAUC,CAAV,EAAa;AAC/BE,cAAUF,CAAV;AACD,GAFD;;AAIA,WAASC,OAAT,GAAoB;AAClB,QAAIJ,OAAOO,KAAP,CAAa,gBAAb,CAAJ,EAAoC;AAClCT,QAAEU,KAAF,CAAQC,KAAR,CAAc,uBAAd;AACA;AACD;AACD,QAAIT,OAAOO,KAAP,CAAa,8BAAb,CAAJ,EAAkD;AAChDT,QAAEU,KAAF,CAAQC,KAAR,CAAc,iBAAd;AACA;AACD;AACD,QAAIT,OAAOO,KAAP,CAAa,aAAb,CAAJ,EAAiC;AAC/BT,QAAEU,KAAF,CAAQC,KAAR,CAAc,gCAAd;AACA;AACA;AACA;AACAX,QAAEU,KAAF,CAAQE,GAAR;AACA;AACD;AACF;;AAEDZ,IAAEI,EAAF,CAAK,OAAL,EAAc,YAAY;AACxBG,aAASM,KAAKC,KAAL,CAAWP,MAAX,CAAT;AACAd,MAAEsB,SAAF,CAAYR,MAAZ,EAAoBR,MAApB;AACAN,MAAEmB,GAAF;AACD,GAJD;AAKD,CA/ED","file":"buffer.js","sourcesContent":["var tap = require('tap')\nvar pz = require('../promzard.js')\nvar spawn = require('child_process').spawn\n\ntap.test('run the example using a buffer', function (t) {\n\n  var example = require.resolve('../example/buffer.js')\n  var node = process.execPath\n\n  var expect =  {\n    \"name\": \"example\",\n    \"version\": \"0.0.0\",\n    \"description\": \"testing description\",\n    \"main\": \"test-entry.js\",\n    \"directories\": {\n      \"example\": \"example\",\n      \"test\": \"test\"\n    },\n    \"dependencies\": {},\n    \"devDependencies\": {\n      \"tap\": \"~0.2.5\"\n    },\n    \"scripts\": {\n      \"test\": \"tap test/*.js\"\n    },\n    \"repository\": {\n      \"type\": \"git\",\n      \"url\": \"git://github.com/substack/example.git\"\n    },\n    \"homepage\": \"https://github.com/substack/example\",\n    \"keywords\": [\n      \"fugazi\",\n      \"function\",\n      \"waiting\",\n      \"room\"\n    ],\n    \"author\": {\n      \"name\": \"James Halliday\",\n      \"email\": \"mail@substack.net\",\n      \"url\": \"http://substack.net\"\n    },\n    \"license\": \"MIT\",\n    \"engine\": {\n      \"node\": \">=0.6\"\n    }\n  }\n\n  var c = spawn(node, [example], { customFds: [-1,-1,-1] })\n  var output = ''\n  c.stdout.on('data', function (d) {\n    output += d\n    respond()\n  })\n\n  var actual = ''\n  c.stderr.on('data', function (d) {\n    actual += d\n  })\n\n  function respond () {\n    if (output.match(/description: $/)) {\n      c.stdin.write('testing description\\n')\n      return\n    }\n    if (output.match(/entry point: \\(index\\.js\\) $/)) {\n      c.stdin.write('test-entry.js\\n')\n      return\n    }\n    if (output.match(/keywords: $/)) {\n      c.stdin.write('fugazi function waiting room\\n')\n      // \"read\" module is weird on node >= 0.10 when not a TTY\n      // requires explicit ending for reasons.\n      // could dig in, but really just wanna make tests pass, whatever.\n      c.stdin.end()\n      return\n    }\n  }\n\n  c.on('close', function () {\n    actual = JSON.parse(actual)\n    t.deepEqual(actual, expect)\n    t.end()\n  })\n})\n"]}