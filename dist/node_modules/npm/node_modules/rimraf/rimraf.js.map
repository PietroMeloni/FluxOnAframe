{"version":3,"sources":["../../../../../node_modules/npm/node_modules/rimraf/rimraf.js"],"names":["module","exports","rimraf","sync","rimrafSync","assert","require","path","fs","glob","_0666","parseInt","defaultGlobOpts","nosort","silent","timeout","isWindows","process","platform","defaults","options","methods","forEach","m","maxBusyTries","emfileWait","disableGlob","p","cb","equal","busyTries","errState","n","hasMagic","afterGlob","lstat","er","stat","next","results","length","rimraf_","CB","code","time","setTimeout","st","fixWinEPERM","isDirectory","rmdir","unlink","Error","chmod","er2","er3","stats","fixWinEPERMSync","chmodSync","statSync","rmdirSync","unlinkSync","originalEr","rmkids","readdir","files","f","join","lstatSync","i","rmkidsSync","readdirSync","retries","threw","ret"],"mappings":"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","file":"rimraf.js","sourcesContent":["module.exports = rimraf\nrimraf.sync = rimrafSync\n\nvar assert = require(\"assert\")\nvar path = require(\"path\")\nvar fs = require(\"fs\")\nvar glob = require(\"glob\")\nvar _0666 = parseInt('666', 8)\n\nvar defaultGlobOpts = {\n  nosort: true,\n  silent: true\n}\n\n// for EMFILE handling\nvar timeout = 0\n\nvar isWindows = (process.platform === \"win32\")\n\nfunction defaults (options) {\n  var methods = [\n    'unlink',\n    'chmod',\n    'stat',\n    'lstat',\n    'rmdir',\n    'readdir'\n  ]\n  methods.forEach(function(m) {\n    options[m] = options[m] || fs[m]\n    m = m + 'Sync'\n    options[m] = options[m] || fs[m]\n  })\n\n  options.maxBusyTries = options.maxBusyTries || 3\n  options.emfileWait = options.emfileWait || 1000\n  if (options.glob === false) {\n    options.disableGlob = true\n  }\n  options.disableGlob = options.disableGlob || false\n  options.glob = options.glob || defaultGlobOpts\n}\n\nfunction rimraf (p, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert.equal(typeof cb, 'function', 'rimraf: callback function required')\n  assert(options, 'rimraf: invalid options argument provided')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  defaults(options)\n\n  var busyTries = 0\n  var errState = null\n  var n = 0\n\n  if (options.disableGlob || !glob.hasMagic(p))\n    return afterGlob(null, [p])\n\n  options.lstat(p, function (er, stat) {\n    if (!er)\n      return afterGlob(null, [p])\n\n    glob(p, options.glob, afterGlob)\n  })\n\n  function next (er) {\n    errState = errState || er\n    if (--n === 0)\n      cb(errState)\n  }\n\n  function afterGlob (er, results) {\n    if (er)\n      return cb(er)\n\n    n = results.length\n    if (n === 0)\n      return cb()\n\n    results.forEach(function (p) {\n      rimraf_(p, options, function CB (er) {\n        if (er) {\n          if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") &&\n              busyTries < options.maxBusyTries) {\n            busyTries ++\n            var time = busyTries * 100\n            // try again, with the same exact callback as this one.\n            return setTimeout(function () {\n              rimraf_(p, options, CB)\n            }, time)\n          }\n\n          // this one won't happen if graceful-fs is used.\n          if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n            return setTimeout(function () {\n              rimraf_(p, options, CB)\n            }, timeout ++)\n          }\n\n          // already gone\n          if (er.code === \"ENOENT\") er = null\n        }\n\n        timeout = 0\n        next(er)\n      })\n    })\n  }\n}\n\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_ (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n  options.lstat(p, function (er, st) {\n    if (er && er.code === \"ENOENT\")\n      return cb(null)\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er && er.code === \"EPERM\" && isWindows)\n      fixWinEPERM(p, options, er, cb)\n\n    if (st && st.isDirectory())\n      return rmdir(p, options, er, cb)\n\n    options.unlink(p, function (er) {\n      if (er) {\n        if (er.code === \"ENOENT\")\n          return cb(null)\n        if (er.code === \"EPERM\")\n          return (isWindows)\n            ? fixWinEPERM(p, options, er, cb)\n            : rmdir(p, options, er, cb)\n        if (er.code === \"EISDIR\")\n          return rmdir(p, options, er, cb)\n      }\n      return cb(er)\n    })\n  })\n}\n\nfunction fixWinEPERM (p, options, er, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n  if (er)\n    assert(er instanceof Error)\n\n  options.chmod(p, _0666, function (er2) {\n    if (er2)\n      cb(er2.code === \"ENOENT\" ? null : er)\n    else\n      options.stat(p, function(er3, stats) {\n        if (er3)\n          cb(er3.code === \"ENOENT\" ? null : er)\n        else if (stats.isDirectory())\n          rmdir(p, options, er, cb)\n        else\n          options.unlink(p, cb)\n      })\n  })\n}\n\nfunction fixWinEPERMSync (p, options, er) {\n  assert(p)\n  assert(options)\n  if (er)\n    assert(er instanceof Error)\n\n  try {\n    options.chmodSync(p, _0666)\n  } catch (er2) {\n    if (er2.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  try {\n    var stats = options.statSync(p)\n  } catch (er3) {\n    if (er3.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  if (stats.isDirectory())\n    rmdirSync(p, options, er)\n  else\n    options.unlinkSync(p)\n}\n\nfunction rmdir (p, options, originalEr, cb) {\n  assert(p)\n  assert(options)\n  if (originalEr)\n    assert(originalEr instanceof Error)\n  assert(typeof cb === 'function')\n\n  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n  options.rmdir(p, function (er) {\n    if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\"))\n      rmkids(p, options, cb)\n    else if (er && er.code === \"ENOTDIR\")\n      cb(originalEr)\n    else\n      cb(er)\n  })\n}\n\nfunction rmkids(p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.readdir(p, function (er, files) {\n    if (er)\n      return cb(er)\n    var n = files.length\n    if (n === 0)\n      return options.rmdir(p, cb)\n    var errState\n    files.forEach(function (f) {\n      rimraf(path.join(p, f), options, function (er) {\n        if (errState)\n          return\n        if (er)\n          return cb(errState = er)\n        if (--n === 0)\n          options.rmdir(p, cb)\n      })\n    })\n  })\n}\n\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync (p, options) {\n  options = options || {}\n  defaults(options)\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert(options, 'rimraf: missing options')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  var results\n\n  if (options.disableGlob || !glob.hasMagic(p)) {\n    results = [p]\n  } else {\n    try {\n      options.lstatSync(p)\n      results = [p]\n    } catch (er) {\n      results = glob.sync(p, options.glob)\n    }\n  }\n\n  if (!results.length)\n    return\n\n  for (var i = 0; i < results.length; i++) {\n    var p = results[i]\n\n    try {\n      var st = options.lstatSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n\n      // Windows can EPERM on stat.  Life is suffering.\n      if (er.code === \"EPERM\" && isWindows)\n        fixWinEPERMSync(p, options, er)\n    }\n\n    try {\n      // sunos lets the root user unlink directories, which is... weird.\n      if (st && st.isDirectory())\n        rmdirSync(p, options, null)\n      else\n        options.unlinkSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n      if (er.code === \"EPERM\")\n        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)\n      if (er.code !== \"EISDIR\")\n        throw er\n\n      rmdirSync(p, options, er)\n    }\n  }\n}\n\nfunction rmdirSync (p, options, originalEr) {\n  assert(p)\n  assert(options)\n  if (originalEr)\n    assert(originalEr instanceof Error)\n\n  try {\n    options.rmdirSync(p)\n  } catch (er) {\n    if (er.code === \"ENOENT\")\n      return\n    if (er.code === \"ENOTDIR\")\n      throw originalEr\n    if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")\n      rmkidsSync(p, options)\n  }\n}\n\nfunction rmkidsSync (p, options) {\n  assert(p)\n  assert(options)\n  options.readdirSync(p).forEach(function (f) {\n    rimrafSync(path.join(p, f), options)\n  })\n\n  // We only end up here once we got ENOTEMPTY at least once, and\n  // at this point, we are guaranteed to have removed all the kids.\n  // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n  // try really hard to delete stuff on windows, because it has a\n  // PROFOUNDLY annoying habit of not closing handles promptly when\n  // files are deleted, resulting in spurious ENOTEMPTY errors.\n  var retries = isWindows ? 100 : 1\n  var i = 0\n  do {\n    var threw = true\n    try {\n      var ret = options.rmdirSync(p, options)\n      threw = false\n      return ret\n    } finally {\n      if (++i < retries && threw)\n        continue\n    }\n  } while (true)\n}\n"]}