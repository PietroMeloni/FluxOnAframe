"use strict";

// Delegates to `succ` on sucecss or to `fail` on error
// ex: Thing.load(123, iferr(cb, thing => ...))
var iferr = function iferr(fail, succ) {
  return function (err) {
    for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      a[_key - 1] = arguments[_key];
    }

    return err ? fail(err) : succ.apply(undefined, a);
  };
};

// Like iferr, but also catches errors thrown from `succ` and passes to `fail`
var tiferr = function tiferr(fail, succ) {
  return iferr(fail, function () {
    try {
      succ.apply(undefined, arguments);
    } catch (err) {
      fail(err);
    }
  });
};

// Delegate to the success function on success, throws the error otherwise
// ex: Thing.load(123, throwerr(thing => ...))
var throwerr = iferr.bind(null, function (err) {
  throw err;
});

// Prints errors when one is passed, or does nothing otherwise
// ex: Thing.load(123, printerr)
var printerr = iferr(function (err) {
  return console.error(err);
}, function () {});

module.exports = exports = iferr;
exports.iferr = iferr;
exports.tiferr = tiferr;
exports.throwerr = throwerr;
exports.printerr = printerr;
//# sourceMappingURL=iferr.js.map