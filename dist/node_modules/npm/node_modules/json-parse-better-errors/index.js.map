{"version":3,"sources":["../../../../../node_modules/npm/node_modules/json-parse-better-errors/index.js"],"names":["module","exports","parseJson","txt","reviver","context","JSON","parse","e","isEmptyArray","Array","isArray","length","errorMessage","String","TypeError","syntaxErr","message","match","errIdx","start","end","slice"],"mappings":"AAAA;;AAEAA,OAAOC,OAAP,GAAiBC,SAAjB;AACA,SAASA,SAAT,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AACzCA,YAAUA,WAAW,EAArB;AACA,MAAI;AACF,WAAOC,KAAKC,KAAL,CAAWJ,GAAX,EAAgBC,OAAhB,CAAP;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV,QAAI,OAAOL,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAMM,eAAeC,MAAMC,OAAN,CAAcR,GAAd,KAAsBA,IAAIS,MAAJ,KAAe,CAA1D;AACA,UAAMC,eAAe,mBACpBJ,eAAe,gBAAf,GAAkCK,OAAOX,GAAP,CADd,CAArB;AAEA,YAAM,IAAIY,SAAJ,CAAcF,YAAd,CAAN;AACD;AACD,QAAMG,YAAYR,EAAES,OAAF,CAAUC,KAAV,CAAgB,sCAAhB,CAAlB;AACA,QAAMC,SAASH,YACb,CAACA,UAAU,CAAV,CADY,GAEbR,EAAES,OAAF,CAAUC,KAAV,CAAgB,4BAAhB,IACAf,IAAIS,MAAJ,GAAa,CADb,GAEA,IAJF;AAKA,QAAIO,UAAU,IAAd,EAAoB;AAClB,UAAMC,QAAQD,UAAUd,OAAV,GACZ,CADY,GAEZc,SAASd,OAFX;AAGA,UAAMgB,MAAMF,SAASd,OAAT,IAAoBF,IAAIS,MAAxB,GACVT,IAAIS,MADM,GAEVO,SAASd,OAFX;AAGAG,QAAES,OAAF,gCACEG,UAAU,CAAV,GAAc,EAAd,GAAmB,KADrB,IAEGjB,IAAImB,KAAJ,CAAUF,KAAV,EAAiBC,GAAjB,CAFH,IAGEA,QAAQlB,IAAIS,MAAZ,GAAqB,EAArB,GAA0B,KAH5B;AAKD,KAZD,MAYO;AACLJ,QAAES,OAAF,0BAAgCd,IAAImB,KAAJ,CAAU,CAAV,EAAajB,UAAU,CAAvB,CAAhC;AACD;AACD,UAAMG,CAAN;AACD;AACF","file":"index.js","sourcesContent":["'use strict'\n\nmodule.exports = parseJson\nfunction parseJson (txt, reviver, context) {\n  context = context || 20\n  try {\n    return JSON.parse(txt, reviver)\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      const errorMessage = 'Cannot parse ' +\n      (isEmptyArray ? 'an empty array' : String(txt))\n      throw new TypeError(errorMessage)\n    }\n    const syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i)\n    const errIdx = syntaxErr\n    ? +syntaxErr[1]\n    : e.message.match(/^Unexpected end of JSON.*/i)\n    ? txt.length - 1\n    : null\n    if (errIdx != null) {\n      const start = errIdx <= context\n      ? 0\n      : errIdx - context\n      const end = errIdx + context >= txt.length\n      ? txt.length\n      : errIdx + context\n      e.message += ` while parsing near '${\n        start === 0 ? '' : '...'\n      }${txt.slice(start, end)}${\n        end === txt.length ? '' : '...'\n      }'`\n    } else {\n      e.message += ` while parsing '${txt.slice(0, context * 2)}'`\n    }\n    throw e\n  }\n}\n"]}