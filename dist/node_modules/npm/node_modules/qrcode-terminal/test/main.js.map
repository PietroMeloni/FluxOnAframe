{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/qrcode-terminal/test/main.js"],"names":["expect","require","qrcode","sinon","describe","beforeEach","stub","console","afterEach","sandbox","restore","log","reset","it","generate","called","to","be","cb","spy","done","result","a","not","match","error","setErrorLevel"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,WAAR,CAAb;AAAA,IACIC,SAASD,QAAQ,eAAR,CADb;AAAA,IAEIE,QAAQF,QAAQ,OAAR,CAFZ;;AAIAG,SAAS,oBAAT,EAA+B,YAAW;AACtCA,aAAS,qBAAT,EAAgC,YAAY;AACxCA,iBAAS,+BAAT,EAA0C,YAAY;AAClDC,uBAAW,YAAY;AACnBF,sBAAMG,IAAN,CAAWC,OAAX,EAAoB,KAApB;AACH,aAFD;;AAIAC,sBAAU,YAAY;AAClBL,sBAAMM,OAAN,CAAcC,OAAd;AACAH,wBAAQI,GAAR,CAAYC,KAAZ;AACH,aAHD;;AAKAC,eAAG,qBAAH,EAA0B,YAAY;AAClCX,uBAAOY,QAAP,CAAgB,MAAhB;AACAd,uBAAOO,QAAQI,GAAR,CAAYI,MAAnB,EAA2BC,EAA3B,CAA8BC,EAA9B,CAAiC,IAAjC;AACH,aAHD;AAIH,SAdD;;AAgBAb,iBAAS,2BAAT,EAAsC,YAAY;AAC9CS,eAAG,wBAAH,EAA6B,YAAY;AACrC,oBAAIK,KAAKf,MAAMgB,GAAN,EAAT;AACAjB,uBAAOY,QAAP,CAAgB,MAAhB,EAAwBI,EAAxB;AACAlB,uBAAOkB,GAAGH,MAAV,EAAkBC,EAAlB,CAAqBC,EAArB,CAAwB,IAAxB;AACH,aAJD;;AAMAJ,eAAG,sCAAH,EAA2C,YAAY;AACnDX,uBAAOY,QAAP,CAAgB,MAAhB,EAAwBX,MAAMgB,GAAN,EAAxB;AACAnB,uBAAOO,QAAQI,GAAR,CAAYI,MAAnB,EAA2BC,EAA3B,CAA8BC,EAA9B,CAAiC,KAAjC;AACH,aAHD;AAIH,SAXD;;AAaAb,iBAAS,aAAT,EAAwB,YAAY;AAChCS,eAAG,oBAAH,EAAyB,UAAUO,IAAV,EAAgB;AACrClB,uBAAOY,QAAP,CAAgB,MAAhB,EAAwB,UAASO,MAAT,EAAiB;AACrCrB,2BAAOqB,MAAP,EAAeL,EAAf,CAAkBC,EAAlB,CAAqBK,CAArB,CAAuB,QAAvB;AACAF;AACH,iBAHD;AAIH,aALD;;AAOAP,eAAG,+BAAH,EAAoC,UAAUO,IAAV,EAAgB;AAChDlB,uBAAOY,QAAP,CAAgB,MAAhB,EAAwB,UAASO,MAAT,EAAiB;AACrCrB,2BAAOqB,MAAP,EAAeE,GAAf,CAAmBP,EAAnB,CAAsBQ,KAAtB,CAA4B,KAA5B;AACAJ;AACH,iBAHD;AAIH,aALD;AAMH,SAdD;;AAgBAhB,iBAAS,iBAAT,EAA4B,YAAY;AACpCS,eAAG,qBAAH,EAA0B,YAAW;AACjCb,uBAAOE,OAAOuB,KAAd,EAAqBT,EAArB,CAAwBC,EAAxB,CAA2B,CAA3B;AACH,aAFD;;AAIAJ,eAAG,+BAAH,EAAoC,YAAW;AAC3CX,uBAAOwB,aAAP,GAAuB,WAAvB;AACA1B,uBAAOE,OAAOuB,KAAd,EAAqBT,EAArB,CAAwBC,EAAxB,CAA2B,CAA3B;AACH,aAHD;AAIH,SATD;AAUH,KAxDD;AAyDH,CA1DD","file":"main.js","sourcesContent":["var expect = require('expect.js'),\n    qrcode = require('./../lib/main'),\n    sinon = require('sinon');\n\ndescribe('in the main module', function() {\n    describe('the generate method', function () {\n        describe('when not providing a callback', function () {\n            beforeEach(function () {\n                sinon.stub(console, 'log');\n            });\n\n            afterEach(function () {\n                sinon.sandbox.restore();\n                console.log.reset();\n            });\n\n            it('logs to the console', function () {\n                qrcode.generate('test');\n                expect(console.log.called).to.be(true);\n            });\n        });\n\n        describe('when providing a callback', function () {\n            it('will call the callback', function () {\n                var cb = sinon.spy();\n                qrcode.generate('test', cb);\n                expect(cb.called).to.be(true);\n            });\n\n            it('will not call the console.log method', function () {\n                qrcode.generate('test', sinon.spy());\n                expect(console.log.called).to.be(false);\n            });\n        });\n\n        describe('the QR Code', function () {\n            it('should be a string', function (done) {\n                qrcode.generate('test', function(result) {\n                    expect(result).to.be.a('string');\n                    done();\n                });\n            });\n\n            it('should not end with a newline', function (done) {\n                qrcode.generate('test', function(result) {\n                    expect(result).not.to.match(/\\n$/);\n                    done();\n                });\n            });\n        });\n\n        describe('the error level', function () {\n            it('should default to 1', function() {\n                expect(qrcode.error).to.be(1);\n            });\n\n            it('should not allow other levels', function() {\n                qrcode.setErrorLevel = 'something';\n                expect(qrcode.error).to.be(1);\n            }); \n        });\n    });\n});\n"]}