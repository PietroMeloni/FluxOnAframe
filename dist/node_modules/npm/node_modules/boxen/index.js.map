{"version":3,"sources":["../../../../../node_modules/npm/node_modules/boxen/index.js"],"names":["stringWidth","require","chalk","widestLine","cliBoxes","camelCase","ansiAlign","termSize","getObject","obj","detail","top","right","bottom","left","Object","assign","getBorderChars","sides","chars","borderStyle","TypeError","forEach","key","getBackgroundColorName","x","module","exports","text","opts","padding","dimBorder","align","float","backgroundColor","borderColor","Error","margin","colorizeBorder","ret","dim","colorizeContent","NL","PAD","lines","split","Array","fill","concat","contentWidth","paddingLeft","repeat","columns","marginLeft","padWidth","Math","max","horizontal","topLeft","topRight","bottomLeft","bottomRight","side","vertical","middle","map","paddingRight","line","join","_borderStyles"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst chalk = require('chalk');\nconst widestLine = require('widest-line');\nconst cliBoxes = require('cli-boxes');\nconst camelCase = require('camelcase');\nconst ansiAlign = require('ansi-align');\nconst termSize = require('term-size');\n\nconst getObject = detail => {\n\tlet obj;\n\n\tif (typeof detail === 'number') {\n\t\tobj = {\n\t\t\ttop: detail,\n\t\t\tright: detail * 3,\n\t\t\tbottom: detail,\n\t\t\tleft: detail * 3\n\t\t};\n\t} else {\n\t\tobj = Object.assign({\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}, detail);\n\t}\n\n\treturn obj;\n};\n\nconst getBorderChars = borderStyle => {\n\tconst sides = [\n\t\t'topLeft',\n\t\t'topRight',\n\t\t'bottomRight',\n\t\t'bottomLeft',\n\t\t'vertical',\n\t\t'horizontal'\n\t];\n\n\tlet chars;\n\n\tif (typeof borderStyle === 'string') {\n\t\tchars = cliBoxes[borderStyle];\n\n\t\tif (!chars) {\n\t\t\tthrow new TypeError(`Invalid border style: ${borderStyle}`);\n\t\t}\n\t} else {\n\t\tsides.forEach(key => {\n\t\t\tif (!borderStyle[key] || typeof borderStyle[key] !== 'string') {\n\t\t\t\tthrow new TypeError(`Invalid border style: ${key}`);\n\t\t\t}\n\t\t});\n\n\t\tchars = borderStyle;\n\t}\n\n\treturn chars;\n};\n\nconst getBackgroundColorName = x => camelCase('bg', x);\n\nmodule.exports = (text, opts) => {\n\topts = Object.assign({\n\t\tpadding: 0,\n\t\tborderStyle: 'single',\n\t\tdimBorder: false,\n\t\talign: 'left',\n\t\tfloat: 'left'\n\t}, opts);\n\n\tif (opts.backgroundColor) {\n\t\topts.backgroundColor = getBackgroundColorName(opts.backgroundColor);\n\t}\n\n\tif (opts.borderColor && !chalk[opts.borderColor]) {\n\t\tthrow new Error(`${opts.borderColor} is not a valid borderColor`);\n\t}\n\n\tif (opts.backgroundColor && !chalk[opts.backgroundColor]) {\n\t\tthrow new Error(`${opts.backgroundColor} is not a valid backgroundColor`);\n\t}\n\n\tconst chars = getBorderChars(opts.borderStyle);\n\tconst padding = getObject(opts.padding);\n\tconst margin = getObject(opts.margin);\n\n\tconst colorizeBorder = x => {\n\t\tconst ret = opts.borderColor ? chalk[opts.borderColor](x) : x;\n\t\treturn opts.dimBorder ? chalk.dim(ret) : ret;\n\t};\n\n\tconst colorizeContent = x => opts.backgroundColor ? chalk[opts.backgroundColor](x) : x;\n\n\ttext = ansiAlign(text, {align: opts.align});\n\n\tconst NL = '\\n';\n\tconst PAD = ' ';\n\n\tlet lines = text.split(NL);\n\n\tif (padding.top > 0) {\n\t\tlines = Array(padding.top).fill('').concat(lines);\n\t}\n\n\tif (padding.bottom > 0) {\n\t\tlines = lines.concat(Array(padding.bottom).fill(''));\n\t}\n\n\tconst contentWidth = widestLine(text) + padding.left + padding.right;\n\tconst paddingLeft = PAD.repeat(padding.left);\n\tconst columns = termSize().columns;\n\tlet marginLeft = PAD.repeat(margin.left);\n\n\tif (opts.float === 'center') {\n\t\tconst padWidth = Math.max((columns - contentWidth) / 2, 0);\n\t\tmarginLeft = PAD.repeat(padWidth);\n\t} else if (opts.float === 'right') {\n\t\tconst padWidth = Math.max(columns - contentWidth - margin.right - 2, 0);\n\t\tmarginLeft = PAD.repeat(padWidth);\n\t}\n\n\tconst horizontal = chars.horizontal.repeat(contentWidth);\n\tconst top = colorizeBorder(NL.repeat(margin.top) + marginLeft + chars.topLeft + horizontal + chars.topRight);\n\tconst bottom = colorizeBorder(marginLeft + chars.bottomLeft + horizontal + chars.bottomRight + NL.repeat(margin.bottom));\n\tconst side = colorizeBorder(chars.vertical);\n\n\tconst middle = lines.map(line => {\n\t\tconst paddingRight = PAD.repeat(contentWidth - stringWidth(line) - padding.left);\n\t\treturn marginLeft + side + colorizeContent(paddingLeft + line + paddingRight) + side;\n\t}).join(NL);\n\n\treturn top + NL + middle + NL + bottom;\n};\n\nmodule.exports._borderStyles = cliBoxes;\n"]}