{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/cryptiles/lib/index.js"],"names":["Crypto","require","Boom","internals","exports","randomString","size","buffer","randomBits","Error","string","toString","replace","slice","bits","internal","bytes","Math","ceil","randomBytes","err","message","fixedTimeComparison","a","b","mismatch","length","i","il","ac","charCodeAt","bc"],"mappings":";;AAAA;;AAEA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAGA;;AAEA,IAAIE,YAAY,EAAhB;;AAGA;;AAEAC,QAAQC,YAAR,GAAuB,UAAUC,IAAV,EAAgB;;AAEnC,QAAIC,SAASH,QAAQI,UAAR,CAAmB,CAACF,OAAO,CAAR,IAAa,CAAhC,CAAb;AACA,QAAIC,kBAAkBE,KAAtB,EAA6B;AACzB,eAAOF,MAAP;AACH;;AAED,QAAIG,SAASH,OAAOI,QAAP,CAAgB,QAAhB,EAA0BC,OAA1B,CAAkC,KAAlC,EAAyC,GAAzC,EAA8CA,OAA9C,CAAsD,KAAtD,EAA6D,GAA7D,EAAkEA,OAAlE,CAA0E,KAA1E,EAAiF,EAAjF,CAAb;AACA,WAAOF,OAAOG,KAAP,CAAa,CAAb,EAAgBP,IAAhB,CAAP;AACH,CATD;;AAYAF,QAAQI,UAAR,GAAqB,UAAUM,IAAV,EAAgB;;AAEjC,QAAI,CAACA,IAAD,IACAA,OAAO,CADX,EACc;;AAEV,eAAOZ,KAAKa,QAAL,CAAc,2BAAd,CAAP;AACH;;AAED,QAAIC,QAAQC,KAAKC,IAAL,CAAUJ,OAAO,CAAjB,CAAZ;AACA,QAAI;AACA,eAAOd,OAAOmB,WAAP,CAAmBH,KAAnB,CAAP;AACH,KAFD,CAGA,OAAOI,GAAP,EAAY;AACR,eAAOlB,KAAKa,QAAL,CAAc,oCAAoCK,IAAIC,OAAtD,CAAP;AACH;AACJ,CAfD;;AAkBA;;AAEAjB,QAAQkB,mBAAR,GAA8B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;;AAE1C,QAAI,OAAOD,CAAP,KAAa,QAAb,IACA,OAAOC,CAAP,KAAa,QADjB,EAC2B;;AAEvB,eAAO,KAAP;AACH;;AAED,QAAIC,WAAYF,EAAEG,MAAF,KAAaF,EAAEE,MAAf,GAAwB,CAAxB,GAA4B,CAA5C;AACA,QAAID,QAAJ,EAAc;AACVD,YAAID,CAAJ;AACH;;AAED,SAAK,IAAII,IAAI,CAAR,EAAWC,KAAKL,EAAEG,MAAvB,EAA+BC,IAAIC,EAAnC,EAAuC,EAAED,CAAzC,EAA4C;AACxC,YAAIE,KAAKN,EAAEO,UAAF,CAAaH,CAAb,CAAT;AACA,YAAII,KAAKP,EAAEM,UAAF,CAAaH,CAAb,CAAT;AACAF,oBAAaI,KAAKE,EAAlB;AACH;;AAED,WAAQN,aAAa,CAArB;AACH,CApBD","file":"index.js","sourcesContent":["// Load modules\n\nvar Crypto = require('crypto');\nvar Boom = require('boom');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Generate a cryptographically strong pseudo-random data\n\nexports.randomString = function (size) {\n\n    var buffer = exports.randomBits((size + 1) * 6);\n    if (buffer instanceof Error) {\n        return buffer;\n    }\n\n    var string = buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\n    return string.slice(0, size);\n};\n\n\nexports.randomBits = function (bits) {\n\n    if (!bits ||\n        bits < 0) {\n\n        return Boom.internal('Invalid random bits count');\n    }\n\n    var bytes = Math.ceil(bits / 8);\n    try {\n        return Crypto.randomBytes(bytes);\n    }\n    catch (err) {\n        return Boom.internal('Failed generating random bits: ' + err.message);\n    }\n};\n\n\n// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)\n\nexports.fixedTimeComparison = function (a, b) {\n\n    if (typeof a !== 'string' ||\n        typeof b !== 'string') {\n\n        return false;\n    }\n\n    var mismatch = (a.length === b.length ? 0 : 1);\n    if (mismatch) {\n        b = a;\n    }\n\n    for (var i = 0, il = a.length; i < il; ++i) {\n        var ac = a.charCodeAt(i);\n        var bc = b.charCodeAt(i);\n        mismatch |= (ac ^ bc);\n    }\n\n    return (mismatch === 0);\n};\n\n\n"]}