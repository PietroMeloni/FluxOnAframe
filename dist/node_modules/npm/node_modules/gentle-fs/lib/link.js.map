{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/gentle-fs/lib/link.js"],"names":["path","require","fs","chain","mkdir","rm","exports","module","link","linkIfExists","from","to","opts","cb","stat","er","readlink","fromOnDisk","toDir","dirname","absoluteFrom","resolve","absoluteFromOnDisk","resolveIfSymlink","maybeSymlinkPath","lstat","err","apply","arguments","isSymbolicLink","ensureFromIsNotSource","fromDestination","Error","base","absTarget","relativeTarget","relative","target","absolute"],"mappings":"AAAA;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,aAAR,CAAX;AACA,IAAME,QAAQF,QAAQ,OAAR,EAAiBE,KAA/B;AACA,IAAMC,QAAQH,QAAQ,QAAR,CAAd;AACA,IAAMI,KAAKJ,QAAQ,SAAR,CAAX;;AAEAK,UAAUC,OAAOD,OAAP,GAAiB;AACzBE,QAAMA,IADmB;AAEzBC,gBAAcA;AAFW,CAA3B;;AAKA,SAASA,YAAT,CAAuBC,IAAvB,EAA6BC,EAA7B,EAAiCC,IAAjC,EAAuCC,EAAvC,EAA2C;AACzCX,KAAGY,IAAH,CAAQJ,IAAR,EAAc,UAAUK,EAAV,EAAc;AAC1B,QAAIA,EAAJ,EAAQ,OAAOF,IAAP;AACRX,OAAGc,QAAH,CAAYL,EAAZ,EAAgB,UAAUI,EAAV,EAAcE,UAAd,EAA0B;AACxC;AACA;AACA,UAAI,CAACF,EAAL,EAAS;AACP,YAAIG,QAAQlB,KAAKmB,OAAL,CAAaR,EAAb,CAAZ;AACA,YAAIS,eAAepB,KAAKqB,OAAL,CAAaH,KAAb,EAAoBR,IAApB,CAAnB;AACA,YAAIY,qBAAqBtB,KAAKqB,OAAL,CAAaH,KAAb,EAAoBD,UAApB,CAAzB;AACA,YAAIG,iBAAiBE,kBAArB,EAAyC,OAAOT,IAAP;AAC1C;AACDL,WAAKE,IAAL,EAAWC,EAAX,EAAeC,IAAf,EAAqBC,EAArB;AACD,KAVD;AAWD,GAbD;AAcD;;AAED,SAASU,gBAAT,CAA2BC,gBAA3B,EAA6CX,EAA7C,EAAiD;AAC/CX,KAAGuB,KAAH,CAASD,gBAAT,EAA2B,UAAUE,GAAV,EAAeZ,IAAf,EAAqB;AAC9C,QAAIY,GAAJ,EAAS,OAAOb,GAAGc,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACT,QAAI,CAACd,KAAKe,cAAL,EAAL,EAA4B,OAAOhB,GAAG,IAAH,EAASW,gBAAT,CAAP;AAC5BtB,OAAGc,QAAH,CAAYQ,gBAAZ,EAA8BX,EAA9B;AACD,GAJD;AAKD;;AAED,SAASiB,qBAAT,CAAgCpB,IAAhC,EAAsCC,EAAtC,EAA0CE,EAA1C,EAA8C;AAC5CU,mBAAiBb,IAAjB,EAAuB,UAAUgB,GAAV,EAAeK,eAAf,EAAgC;AACrD,QAAIL,GAAJ,EAAS,OAAOb,GAAGc,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAP;AACT,QAAI5B,KAAKqB,OAAL,CAAarB,KAAKmB,OAAL,CAAaT,IAAb,CAAb,EAAiCqB,eAAjC,MAAsD/B,KAAKqB,OAAL,CAAaV,EAAb,CAA1D,EAA4E;AAC1E,aAAOE,GAAG,IAAImB,KAAJ,CAAU,gEAAgErB,EAA1E,CAAH,CAAP;AACD;AACDE,OAAGc,KAAH,CAAS,IAAT,EAAeC,SAAf;AACD,GAND;AAOD;;AAED,SAASpB,IAAT,CAAeE,IAAf,EAAqBC,EAArB,EAAyBC,IAAzB,EAA+BC,EAA/B,EAAmC;AACjCF,OAAKX,KAAKqB,OAAL,CAAaV,EAAb,CAAL;AACAC,OAAKqB,IAAL,GAAYjC,KAAKmB,OAAL,CAAaR,EAAb,CAAZ;AACA,MAAIuB,YAAYlC,KAAKqB,OAAL,CAAaT,KAAKqB,IAAlB,EAAwBvB,IAAxB,CAAhB;AACA,MAAIyB,iBAAiBnC,KAAKoC,QAAL,CAAcxB,KAAKqB,IAAnB,EAAyBC,SAAzB,CAArB;AACA,MAAIG,SAASzB,KAAK0B,QAAL,GAAgBJ,SAAhB,GAA4BC,cAAzC;;AAEAhC,QACE,CACE,CAAC2B,qBAAD,EAAwBI,SAAxB,EAAmCvB,EAAnC,CADF,EAEE,CAACT,EAAD,EAAK,MAAL,EAAagC,SAAb,CAFF,EAGE,CAAC7B,EAAD,EAAKM,EAAL,EAASC,IAAT,CAHF,EAIE,CAACR,KAAD,EAAQJ,KAAKmB,OAAL,CAAaR,EAAb,CAAR,CAJF,EAKE,CAACT,EAAD,EAAK,SAAL,EAAgBmC,MAAhB,EAAwB1B,EAAxB,EAA4B,UAA5B,CALF,CADF,EAQEE,EARF;AAUD","file":"link.js","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst chain = require('slide').chain\nconst mkdir = require('mkdirp')\nconst rm = require('./rm.js')\n\nexports = module.exports = {\n  link: link,\n  linkIfExists: linkIfExists\n}\n\nfunction linkIfExists (from, to, opts, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb()\n    fs.readlink(to, function (er, fromOnDisk) {\n      // if the link already exists and matches what we would do,\n      // we don't need to do anything\n      if (!er) {\n        var toDir = path.dirname(to)\n        var absoluteFrom = path.resolve(toDir, from)\n        var absoluteFromOnDisk = path.resolve(toDir, fromOnDisk)\n        if (absoluteFrom === absoluteFromOnDisk) return cb()\n      }\n      link(from, to, opts, cb)\n    })\n  })\n}\n\nfunction resolveIfSymlink (maybeSymlinkPath, cb) {\n  fs.lstat(maybeSymlinkPath, function (err, stat) {\n    if (err) return cb.apply(this, arguments)\n    if (!stat.isSymbolicLink()) return cb(null, maybeSymlinkPath)\n    fs.readlink(maybeSymlinkPath, cb)\n  })\n}\n\nfunction ensureFromIsNotSource (from, to, cb) {\n  resolveIfSymlink(from, function (err, fromDestination) {\n    if (err) return cb.apply(this, arguments)\n    if (path.resolve(path.dirname(from), fromDestination) === path.resolve(to)) {\n      return cb(new Error('Link target resolves to the same directory as link source: ' + to))\n    }\n    cb.apply(this, arguments)\n  })\n}\n\nfunction link (from, to, opts, cb) {\n  to = path.resolve(to)\n  opts.base = path.dirname(to)\n  var absTarget = path.resolve(opts.base, from)\n  var relativeTarget = path.relative(opts.base, absTarget)\n  var target = opts.absolute ? absTarget : relativeTarget\n\n  chain(\n    [\n      [ensureFromIsNotSource, absTarget, to],\n      [fs, 'stat', absTarget],\n      [rm, to, opts],\n      [mkdir, path.dirname(to)],\n      [fs, 'symlink', target, to, 'junction']\n    ],\n    cb\n  )\n}\n"]}