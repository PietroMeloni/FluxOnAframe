"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = ProtoList;

function setProto(obj, proto) {
  if (typeof Object.setPrototypeOf === "function") return Object.setPrototypeOf(obj, proto);else obj.__proto__ = proto;
}

function ProtoList() {
  this.list = [];
  var root = null;
  Object.defineProperty(this, 'root', {
    get: function get() {
      return root;
    },
    set: function set(r) {
      root = r;
      if (this.list.length) {
        setProto(this.list[this.list.length - 1], r);
      }
    },
    enumerable: true,
    configurable: true
  });
}

ProtoList.prototype = { get length() {
    return this.list.length;
  },
  get keys() {
    var k = [];
    for (var i in this.list[0]) {
      k.push(i);
    }return k;
  },
  get snapshot() {
    var o = {};
    this.keys.forEach(function (k) {
      o[k] = this.get(k);
    }, this);
    return o;
  },
  get store() {
    return this.list[0];
  },
  push: function push(obj) {
    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object") obj = { valueOf: obj };
    if (this.list.length >= 1) {
      setProto(this.list[this.list.length - 1], obj);
    }
    setProto(obj, this.root);
    return this.list.push(obj);
  },
  pop: function pop() {
    if (this.list.length >= 2) {
      setProto(this.list[this.list.length - 2], this.root);
    }
    return this.list.pop();
  },
  unshift: function unshift(obj) {
    setProto(obj, this.list[0] || this.root);
    return this.list.unshift(obj);
  },
  shift: function shift() {
    if (this.list.length === 1) {
      setProto(this.list[0], this.root);
    }
    return this.list.shift();
  },
  get: function get(key) {
    return this.list[0][key];
  },
  set: function set(key, val, save) {
    if (!this.length) this.push({});
    if (save && this.list[0].hasOwnProperty(key)) this.push({});
    return this.list[0][key] = val;
  },
  forEach: function forEach(fn, thisp) {
    for (var key in this.list[0]) {
      fn.call(thisp, key, this.list[0][key]);
    }
  },
  slice: function slice() {
    return this.list.slice.apply(this.list, arguments);
  },
  splice: function splice() {
    // handle injections
    var ret = this.list.splice.apply(this.list, arguments);
    for (var i = 0, l = this.list.length; i < l; i++) {
      setProto(this.list[i], this.list[i + 1] || this.root);
    }
    return ret;
  }
};
//# sourceMappingURL=proto-list.js.map