{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/jsonify/lib/stringify.js"],"names":["cx","escapable","gap","indent","meta","rep","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","i","k","v","length","mind","partial","value","toJSON","call","isFinite","String","Object","prototype","apply","join","push","hasOwnProperty","module","exports","replacer","space","Error"],"mappings":"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","file":"stringify.js","sourcesContent":["var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n"]}