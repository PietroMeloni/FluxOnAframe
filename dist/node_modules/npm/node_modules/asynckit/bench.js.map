{"version":3,"sources":["../../../../../node_modules/npm/node_modules/asynckit/bench.js"],"names":["asynckit","require","async","assert","expected","Benchmark","suite","Suite","source","z","push","add","deferred","total","map","i","cb","setImmediate","err","result","ifError","equal","length","resolve","parallel","on","ev","console","log","String","target","filter","run"],"mappings":";;AAAA;;AAEA,IAAIA,WAAWC,QAAQ,IAAR,CAAf;AAAA,IACIC,QAAWD,QAAQ,OAAR,CADf;AAAA,IAEIE,SAAWF,QAAQ,QAAR,CAFf;AAAA,IAGIG,WAAW,CAHf;;AAMA,IAAIC,YAAYJ,QAAQ,WAAR,CAAhB;AACA,IAAIK,QAAQ,IAAID,UAAUE,KAAd,EAAZ;;AAEA,IAAIC,SAAS,EAAb;AACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,GAApB,EAAyBA,GAAzB,EACA;AACED,SAAOE,IAAP,CAAYD,CAAZ;AACAL,cAAYK,CAAZ;AACD;;AAEDH;AACA;;AADA,CAGCK,GAHD,CAGK,WAHL,EAGkB,UAASC,QAAT,EAClB;AACE,MAAIC,QAAQ,CAAZ;;AAEAX,QAAMY,GAAN,CAAUN,MAAV,EACA,UAASO,CAAT,EAAYC,EAAZ,EACA;AACEC,iBAAa,YACb;AACEJ,eAASE,CAAT;AACAC,SAAG,IAAH,EAASH,KAAT;AACD,KAJD;AAKD,GARD,EASA,UAASK,GAAT,EAAcC,MAAd,EACA;AACEhB,WAAOiB,OAAP,CAAeF,GAAf;AACAf,WAAOkB,KAAP,CAAaF,OAAOA,OAAOG,MAAP,GAAgB,CAAvB,CAAb,EAAwClB,QAAxC;AACAQ,aAASW,OAAT;AACD,GAdD;AAeD,CAtBD,EAsBG,EAAC,SAAS,IAAV,EAtBH,EAyBCZ,GAzBD,CAyBK,mBAzBL,EAyB0B,UAASC,QAAT,EAC1B;AACE,MAAIC,QAAQ,CAAZ;;AAEAb,WAASwB,QAAT,CAAkBhB,MAAlB,EACA,UAASO,CAAT,EAAYC,EAAZ,EACA;AACEC,iBAAa,YACb;AACEJ,eAASE,CAAT;AACAC,SAAG,IAAH,EAASH,KAAT;AACD,KAJD;AAKD,GARD,EASA,UAASK,GAAT,EAAcC,MAAd,EACA;AACEhB,WAAOiB,OAAP,CAAeF,GAAf;AACAf,WAAOkB,KAAP,CAAaF,OAAOA,OAAOG,MAAP,GAAgB,CAAvB,CAAb,EAAwClB,QAAxC;AACAQ,aAASW,OAAT;AACD,GAdD;AAeD,CA5CD,EA4CG,EAAC,SAAS,IAAV,EA5CH;;AA+CA;AA/CA,CAgDCE,EAhDD,CAgDI,OAhDJ,EAgDa,UAASC,EAAT,EACb;AACEC,UAAQC,GAAR,CAAYC,OAAOH,GAAGI,MAAV,CAAZ;AACD,CAnDD,EAoDCL,EApDD,CAoDI,UApDJ,EAoDgB,YAChB;AACEE,UAAQC,GAAR,CAAY,gBAAgB,KAAKG,MAAL,CAAY,SAAZ,EAAuBjB,GAAvB,CAA2B,MAA3B,CAA5B;AACD,CAvDD;AAwDA;AAxDA,CAyDCkB,GAzDD,CAyDK,EAAE,SAAS,IAAX,EAzDL","file":"bench.js","sourcesContent":["/* eslint no-console: \"off\" */\n\nvar asynckit = require('./')\n  , async    = require('async')\n  , assert   = require('assert')\n  , expected = 0\n  ;\n\nvar Benchmark = require('benchmark');\nvar suite = new Benchmark.Suite;\n\nvar source = [];\nfor (var z = 1; z < 100; z++)\n{\n  source.push(z);\n  expected += z;\n}\n\nsuite\n// add tests\n\n.add('async.map', function(deferred)\n{\n  var total = 0;\n\n  async.map(source,\n  function(i, cb)\n  {\n    setImmediate(function()\n    {\n      total += i;\n      cb(null, total);\n    });\n  },\n  function(err, result)\n  {\n    assert.ifError(err);\n    assert.equal(result[result.length - 1], expected);\n    deferred.resolve();\n  });\n}, {'defer': true})\n\n\n.add('asynckit.parallel', function(deferred)\n{\n  var total = 0;\n\n  asynckit.parallel(source,\n  function(i, cb)\n  {\n    setImmediate(function()\n    {\n      total += i;\n      cb(null, total);\n    });\n  },\n  function(err, result)\n  {\n    assert.ifError(err);\n    assert.equal(result[result.length - 1], expected);\n    deferred.resolve();\n  });\n}, {'defer': true})\n\n\n// add listeners\n.on('cycle', function(ev)\n{\n  console.log(String(ev.target));\n})\n.on('complete', function()\n{\n  console.log('Fastest is ' + this.filter('fastest').map('name'));\n})\n// run async\n.run({ 'async': true });\n"]}