{"version":3,"sources":["../../../../../node_modules/npm/node_modules/asynckit/parallel.js"],"names":["iterate","require","initState","terminator","module","exports","parallel","list","iterator","callback","state","index","length","error","result","Object","keys","jobs","results","bind"],"mappings":";;AAAA,IAAIA,UAAaC,QAAQ,kBAAR,CAAjB;AAAA,IACIC,YAAaD,QAAQ,gBAAR,CADjB;AAAA,IAEIE,aAAaF,QAAQ,qBAAR,CAFjB;;AAKA;AACAG,OAAOC,OAAP,GAAiBC,QAAjB;;AAEA;;;;;;;;AAQA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,QAAlC,EACA;AACE,MAAIC,QAAQR,UAAUK,IAAV,CAAZ;;AAEA,SAAOG,MAAMC,KAAN,GAAc,CAACD,MAAM,WAAN,KAAsBH,IAAvB,EAA6BK,MAAlD,EACA;AACEZ,YAAQO,IAAR,EAAcC,QAAd,EAAwBE,KAAxB,EAA+B,UAASG,KAAT,EAAgBC,MAAhB,EAC/B;AACE,UAAID,KAAJ,EACA;AACEJ,iBAASI,KAAT,EAAgBC,MAAhB;AACA;AACD;;AAED;AACA,UAAIC,OAAOC,IAAP,CAAYN,MAAMO,IAAlB,EAAwBL,MAAxB,KAAmC,CAAvC,EACA;AACEH,iBAAS,IAAT,EAAeC,MAAMQ,OAArB;AACA;AACD;AACF,KAdD;;AAgBAR,UAAMC,KAAN;AACD;;AAED,SAAOR,WAAWgB,IAAX,CAAgBT,KAAhB,EAAuBD,QAAvB,CAAP;AACD","file":"parallel.js","sourcesContent":["var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n"]}