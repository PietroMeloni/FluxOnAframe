{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/asynckit/lib/readable_serial.js"],"names":["serial","require","module","exports","ReadableSerial","list","iterator","callback","super_","call","objectMode","_start"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,cAAR,CAAb;;AAEA;AACAC,OAAOC,OAAP,GAAiBC,cAAjB;;AAEA;;;;;;;;AAQA,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,QAAxC,EACA;AACE,MAAI,EAAE,gBAAgBH,cAAlB,CAAJ,EACA;AACE,WAAO,IAAIA,cAAJ,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,QAAnC,CAAP;AACD;;AAED;AACAH,iBAAeI,MAAf,CAAsBC,IAAtB,CAA2B,IAA3B,EAAiC,EAACC,YAAY,IAAb,EAAjC;;AAEA,OAAKC,MAAL,CAAYX,MAAZ,EAAoBK,IAApB,EAA0BC,QAA1B,EAAoCC,QAApC;AACD","file":"readable_serial.js","sourcesContent":["var serial = require('../serial.js');\n\n// API\nmodule.exports = ReadableSerial;\n\n/**\n * Streaming wrapper to `asynckit.serial`\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {stream.Readable#}\n */\nfunction ReadableSerial(list, iterator, callback)\n{\n  if (!(this instanceof ReadableSerial))\n  {\n    return new ReadableSerial(list, iterator, callback);\n  }\n\n  // turn on object mode\n  ReadableSerial.super_.call(this, {objectMode: true});\n\n  this._start(serial, list, iterator, callback);\n}\n"]}