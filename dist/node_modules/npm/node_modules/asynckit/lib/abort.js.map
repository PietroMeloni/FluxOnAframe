{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/asynckit/lib/abort.js"],"names":["module","exports","abort","state","Object","keys","jobs","forEach","clean","bind","key"],"mappings":";;AAAA;AACAA,OAAOC,OAAP,GAAiBC,KAAjB;;AAEA;;;;;AAKA,SAASA,KAAT,CAAeC,KAAf,EACA;AACEC,SAAOC,IAAP,CAAYF,MAAMG,IAAlB,EAAwBC,OAAxB,CAAgCC,MAAMC,IAAN,CAAWN,KAAX,CAAhC;;AAEA;AACAA,QAAMG,IAAN,GAAa,EAAb;AACD;;AAED;;;;;;AAMA,SAASE,KAAT,CAAeE,GAAf,EACA;AACE,MAAI,OAAO,KAAKJ,IAAL,CAAUI,GAAV,CAAP,IAAyB,UAA7B,EACA;AACE,SAAKJ,IAAL,CAAUI,GAAV;AACD;AACF","file":"abort.js","sourcesContent":["// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n"]}