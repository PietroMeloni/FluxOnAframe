{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/asynckit/lib/readable_asynckit.js"],"names":["streamify","require","defer","module","exports","ReadableAsyncKit","super_","apply","arguments","jobs","destroy","_start","_read","destroyed","terminator","runner","args","Array","prototype","slice","call","input","endCb","callback","length","iterator","isArray","bind"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,gBAAR,CAAhB;AAAA,IACIC,QAAYD,QAAQ,YAAR,CADhB;;AAIA;AACAE,OAAOC,OAAP,GAAiBC,gBAAjB;;AAEA;;;;AAIA,SAASA,gBAAT,GACA;AACEA,mBAAiBC,MAAjB,CAAwBC,KAAxB,CAA8B,IAA9B,EAAoCC,SAApC;;AAEA;AACA,OAAKC,IAAL,GAAY,EAAZ;;AAEA;AACA,OAAKC,OAAL,GAAeA,OAAf;AACA,OAAKC,MAAL,GAAeA,MAAf;AACA,OAAKC,KAAL,GAAeA,KAAf;AACD;;AAED;;;;;;AAMA,SAASF,OAAT,GACA;AACE,MAAI,KAAKG,SAAT,EACA;AACE;AACD;;AAED,OAAKA,SAAL,GAAiB,IAAjB;;AAEA,MAAI,OAAO,KAAKC,UAAZ,IAA0B,UAA9B,EACA;AACE,SAAKA,UAAL;AACD;AACF;;AAED;;;;;AAKA,SAASH,MAAT,GACA;AACE;AACA,MAAII,SAASP,UAAU,CAAV;AACX;AADF;AAAA,MAEIQ,OAASC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BZ,SAA3B,EAAsC,CAAtC;AACT;AAHJ;AAAA,MAIIa,QAASL,KAAK,CAAL;AACT;AALJ;AAAA,MAMIM,QAAStB,UAAUuB,QAAV,CAAmBH,IAAnB,CAAwB,IAAxB,EAA8BJ,KAAKA,KAAKQ,MAAL,GAAc,CAAnB,CAA9B,CANb;;AASAR,OAAKA,KAAKQ,MAAL,GAAc,CAAnB,IAAwBF,KAAxB;AACA;AACAN,OAAK,CAAL,IAAUhB,UAAUyB,QAAV,CAAmBL,IAAnB,CAAwB,IAAxB,EAA8BJ,KAAK,CAAL,CAA9B,CAAV;;AAEA;AACAd,QAAM,YACN;AACE,QAAI,CAAC,KAAKW,SAAV,EACA;AACE,WAAKC,UAAL,GAAkBC,OAAOR,KAAP,CAAa,IAAb,EAAmBS,IAAnB,CAAlB;AACD,KAHD,MAKA;AACEM,YAAM,IAAN,EAAYL,MAAMS,OAAN,CAAcL,KAAd,IAAuB,EAAvB,GAA4B,EAAxC;AACD;AACF,GAVK,CAUJM,IAVI,CAUC,IAVD,CAAN;AAWD;;AAGD;;;;;;AAMA,SAASf,KAAT,GACA,CAEC","file":"readable_asynckit.js","sourcesContent":["var streamify = require('./streamify.js')\n  , defer     = require('./defer.js')\n  ;\n\n// API\nmodule.exports = ReadableAsyncKit;\n\n/**\n * Base constructor for all streams\n * used to hold properties/methods\n */\nfunction ReadableAsyncKit()\n{\n  ReadableAsyncKit.super_.apply(this, arguments);\n\n  // list of active jobs\n  this.jobs = {};\n\n  // add stream methods\n  this.destroy = destroy;\n  this._start  = _start;\n  this._read   = _read;\n}\n\n/**\n * Destroys readable stream,\n * by aborting outstanding jobs\n *\n * @returns {void}\n */\nfunction destroy()\n{\n  if (this.destroyed)\n  {\n    return;\n  }\n\n  this.destroyed = true;\n\n  if (typeof this.terminator == 'function')\n  {\n    this.terminator();\n  }\n}\n\n/**\n * Starts provided jobs in async manner\n *\n * @private\n */\nfunction _start()\n{\n  // first argument â€“ runner function\n  var runner = arguments[0]\n    // take away first argument\n    , args   = Array.prototype.slice.call(arguments, 1)\n      // second argument - input data\n    , input  = args[0]\n      // last argument - result callback\n    , endCb  = streamify.callback.call(this, args[args.length - 1])\n    ;\n\n  args[args.length - 1] = endCb;\n  // third argument - iterator\n  args[1] = streamify.iterator.call(this, args[1]);\n\n  // allow time for proper setup\n  defer(function()\n  {\n    if (!this.destroyed)\n    {\n      this.terminator = runner.apply(null, args);\n    }\n    else\n    {\n      endCb(null, Array.isArray(input) ? [] : {});\n    }\n  }.bind(this));\n}\n\n\n/**\n * Implement _read to comply with Readable streams\n * Doesn't really make sense for flowing object mode\n *\n * @private\n */\nfunction _read()\n{\n\n}\n"]}