{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/asynckit/lib/readable_parallel.js"],"names":["parallel","require","module","exports","ReadableParallel","list","iterator","callback","super_","call","objectMode","_start"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,gBAAR,CAAf;;AAEA;AACAC,OAAOC,OAAP,GAAiBC,gBAAjB;;AAEA;;;;;;;;AAQA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,QAA1C,EACA;AACE,MAAI,EAAE,gBAAgBH,gBAAlB,CAAJ,EACA;AACE,WAAO,IAAIA,gBAAJ,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,QAArC,CAAP;AACD;;AAED;AACAH,mBAAiBI,MAAjB,CAAwBC,IAAxB,CAA6B,IAA7B,EAAmC,EAACC,YAAY,IAAb,EAAnC;;AAEA,OAAKC,MAAL,CAAYX,QAAZ,EAAsBK,IAAtB,EAA4BC,QAA5B,EAAsCC,QAAtC;AACD","file":"readable_parallel.js","sourcesContent":["var parallel = require('../parallel.js');\n\n// API\nmodule.exports = ReadableParallel;\n\n/**\n * Streaming wrapper to `asynckit.parallel`\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {stream.Readable#}\n */\nfunction ReadableParallel(list, iterator, callback)\n{\n  if (!(this instanceof ReadableParallel))\n  {\n    return new ReadableParallel(list, iterator, callback);\n  }\n\n  // turn on object mode\n  ReadableParallel.super_.call(this, {objectMode: true});\n\n  this._start(parallel, list, iterator, callback);\n}\n"]}