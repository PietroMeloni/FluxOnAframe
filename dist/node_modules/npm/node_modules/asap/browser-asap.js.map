{"version":3,"sources":["../../../../../node_modules/npm/node_modules/asap/browser-asap.js"],"names":["rawAsap","require","freeTasks","pendingErrors","requestErrorThrow","makeRequestCallFromTimer","throwFirstError","length","shift","module","exports","asap","task","rawTask","pop","RawTask","prototype","call","error","onerror","push"],"mappings":"AAAA;;AAEA;;AACA,IAAIA,UAAUC,QAAQ,OAAR,CAAd;AACA;AACA,IAAIC,YAAY,EAAhB;AACA;AACA;AACA,IAAIC,gBAAgB,EAApB;AACA,IAAIC,oBAAoBJ,QAAQK,wBAAR,CAAiCC,eAAjC,CAAxB;;AAEA,SAASA,eAAT,GAA2B;AACvB,QAAIH,cAAcI,MAAlB,EAA0B;AACtB,cAAMJ,cAAcK,KAAd,EAAN;AACH;AACJ;;AAED;;;;;;;;AAQAC,OAAOC,OAAP,GAAiBC,IAAjB;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAChB,QAAIC,OAAJ;AACA,QAAIX,UAAUK,MAAd,EAAsB;AAClBM,kBAAUX,UAAUY,GAAV,EAAV;AACH,KAFD,MAEO;AACHD,kBAAU,IAAIE,OAAJ,EAAV;AACH;AACDF,YAAQD,IAAR,GAAeA,IAAf;AACAZ,YAAQa,OAAR;AACH;;AAED;AACA;AACA,SAASE,OAAT,GAAmB;AACf,SAAKH,IAAL,GAAY,IAAZ;AACH;;AAED;AACA;AACAG,QAAQC,SAAR,CAAkBC,IAAlB,GAAyB,YAAY;AACjC,QAAI;AACA,aAAKL,IAAL,CAAUK,IAAV;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,YAAIP,KAAKQ,OAAT,EAAkB;AACd;AACA;AACA;AACAR,iBAAKQ,OAAL,CAAaD,KAAb;AACH,SALD,MAKO;AACH;AACA;AACA;AACAf,0BAAciB,IAAd,CAAmBF,KAAnB;AACAd;AACH;AACJ,KAfD,SAeU;AACN,aAAKQ,IAAL,GAAY,IAAZ;AACAV,kBAAUA,UAAUK,MAApB,IAA8B,IAA9B;AACH;AACJ,CApBD","file":"browser-asap.js","sourcesContent":["\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n"]}