{"version":3,"sources":["../../../../../node_modules/npm/node_modules/forever-agent/index.js"],"names":["module","exports","ForeverAgent","SSL","ForeverAgentSSL","util","require","Agent","net","tls","AgentSSL","getConnectionName","host","port","name","localAddress","options","self","requests","sockets","freeSockets","maxSockets","defaultMaxSockets","minSockets","defaultMinSockets","on","socket","length","shift","onSocket","push","onIdleError","destroy","_onIdleError","inherits","prototype","createConnection","addRequestNoreuse","addRequest","req","useChunkedEncodingByDefault","idleSocket","pop","removeListener","_reusedSocket","removeSocket","s","index","indexOf","splice","createSocket","emit","call","createConnectionSSL","connect"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiBC,YAAjB;AACAA,aAAaC,GAAb,GAAmBC,eAAnB;;AAEA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AAAA,IACIC,QAAQD,QAAQ,MAAR,EAAgBC,KAD5B;AAAA,IAEIC,MAAMF,QAAQ,KAAR,CAFV;AAAA,IAGIG,MAAMH,QAAQ,KAAR,CAHV;AAAA,IAIII,WAAWJ,QAAQ,OAAR,EAAiBC,KAJhC;;AAMA,SAASI,iBAAT,CAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AACrC,MAAIC,OAAO,EAAX;AACA,MAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC5BE,WAAOF,OAAO,GAAP,GAAaC,IAApB;AACD,GAFD,MAEO;AACL;AACAC,WAAOF,KAAKA,IAAL,GAAY,GAAZ,GAAkBA,KAAKC,IAAvB,GAA8B,GAA9B,IAAqCD,KAAKG,YAAL,GAAqBH,KAAKG,YAAL,GAAoB,GAAzC,GAAgD,GAArF,CAAP;AACD;AACD,SAAOD,IAAP;AACD;;AAED,SAASZ,YAAT,CAAsBc,OAAtB,EAA+B;AAC7B,MAAIC,OAAO,IAAX;AACAA,OAAKD,OAAL,GAAeA,WAAW,EAA1B;AACAC,OAAKC,QAAL,GAAgB,EAAhB;AACAD,OAAKE,OAAL,GAAe,EAAf;AACAF,OAAKG,WAAL,GAAmB,EAAnB;AACAH,OAAKI,UAAL,GAAkBJ,KAAKD,OAAL,CAAaK,UAAb,IAA2Bd,MAAMe,iBAAnD;AACAL,OAAKM,UAAL,GAAkBN,KAAKD,OAAL,CAAaO,UAAb,IAA2BrB,aAAasB,iBAA1D;AACAP,OAAKQ,EAAL,CAAQ,MAAR,EAAgB,UAASC,MAAT,EAAiBd,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3C,QAAIC,OAAOH,kBAAkBC,IAAlB,EAAwBC,IAAxB,CAAX;;AAEA,QAAII,KAAKC,QAAL,CAAcJ,IAAd,KAAuBG,KAAKC,QAAL,CAAcJ,IAAd,EAAoBa,MAA/C,EAAuD;AACrDV,WAAKC,QAAL,CAAcJ,IAAd,EAAoBc,KAApB,GAA4BC,QAA5B,CAAqCH,MAArC;AACD,KAFD,MAEO,IAAIT,KAAKE,OAAL,CAAaL,IAAb,EAAmBa,MAAnB,GAA4BV,KAAKM,UAArC,EAAiD;AACtD,UAAI,CAACN,KAAKG,WAAL,CAAiBN,IAAjB,CAAL,EAA6BG,KAAKG,WAAL,CAAiBN,IAAjB,IAAyB,EAAzB;AAC7BG,WAAKG,WAAL,CAAiBN,IAAjB,EAAuBgB,IAAvB,CAA4BJ,MAA5B;;AAEA;AACA,UAAIK,cAAc,SAAdA,WAAc,GAAW;AAC3BL,eAAOM,OAAP;AACD,OAFD;AAGAN,aAAOO,YAAP,GAAsBF,WAAtB;AACAL,aAAOD,EAAP,CAAU,OAAV,EAAmBM,WAAnB;AACD,KAVM,MAUA;AACL;AACA;AACA;AACA;AACAL,aAAOM,OAAP;AACD;AACF,GAtBD;AAwBD;AACD3B,KAAK6B,QAAL,CAAchC,YAAd,EAA4BK,KAA5B;;AAEAL,aAAasB,iBAAb,GAAiC,CAAjC;;AAGAtB,aAAaiC,SAAb,CAAuBC,gBAAvB,GAA0C5B,IAAI4B,gBAA9C;AACAlC,aAAaiC,SAAb,CAAuBE,iBAAvB,GAA2C9B,MAAM4B,SAAN,CAAgBG,UAA3D;AACApC,aAAaiC,SAAb,CAAuBG,UAAvB,GAAoC,UAASC,GAAT,EAAc3B,IAAd,EAAoBC,IAApB,EAA0B;AAC5D,MAAIC,OAAOH,kBAAkBC,IAAlB,EAAwBC,IAAxB,CAAX;;AAEA,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAII,UAAUJ,IAAd;AACAC,WAAOG,QAAQH,IAAf;AACAD,WAAOI,QAAQJ,IAAf;AACD;;AAED,MAAI,KAAKQ,WAAL,CAAiBN,IAAjB,KAA0B,KAAKM,WAAL,CAAiBN,IAAjB,EAAuBa,MAAvB,GAAgC,CAA1D,IAA+D,CAACY,IAAIC,2BAAxE,EAAqG;AACnG,QAAIC,aAAa,KAAKrB,WAAL,CAAiBN,IAAjB,EAAuB4B,GAAvB,EAAjB;AACAD,eAAWE,cAAX,CAA0B,OAA1B,EAAmCF,WAAWR,YAA9C;AACA,WAAOQ,WAAWR,YAAlB;AACAM,QAAIK,aAAJ,GAAoB,IAApB;AACAL,QAAIV,QAAJ,CAAaY,UAAb;AACD,GAND,MAMO;AACL,SAAKJ,iBAAL,CAAuBE,GAAvB,EAA4B3B,IAA5B,EAAkCC,IAAlC;AACD;AACF,CAlBD;;AAoBAX,aAAaiC,SAAb,CAAuBU,YAAvB,GAAsC,UAASC,CAAT,EAAYhC,IAAZ,EAAkBF,IAAlB,EAAwBC,IAAxB,EAA8B;AAClE,MAAI,KAAKM,OAAL,CAAaL,IAAb,CAAJ,EAAwB;AACtB,QAAIiC,QAAQ,KAAK5B,OAAL,CAAaL,IAAb,EAAmBkC,OAAnB,CAA2BF,CAA3B,CAAZ;AACA,QAAIC,UAAU,CAAC,CAAf,EAAkB;AAChB,WAAK5B,OAAL,CAAaL,IAAb,EAAmBmC,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC;AACD;AACF,GALD,MAKO,IAAI,KAAK5B,OAAL,CAAaL,IAAb,KAAsB,KAAKK,OAAL,CAAaL,IAAb,EAAmBa,MAAnB,KAA8B,CAAxD,EAA2D;AAChE;AACA,WAAO,KAAKR,OAAL,CAAaL,IAAb,CAAP;AACA,WAAO,KAAKI,QAAL,CAAcJ,IAAd,CAAP;AACD;;AAED,MAAI,KAAKM,WAAL,CAAiBN,IAAjB,CAAJ,EAA4B;AAC1B,QAAIiC,QAAQ,KAAK3B,WAAL,CAAiBN,IAAjB,EAAuBkC,OAAvB,CAA+BF,CAA/B,CAAZ;AACA,QAAIC,UAAU,CAAC,CAAf,EAAkB;AAChB,WAAK3B,WAAL,CAAiBN,IAAjB,EAAuBmC,MAAvB,CAA8BF,KAA9B,EAAqC,CAArC;AACA,UAAI,KAAK3B,WAAL,CAAiBN,IAAjB,EAAuBa,MAAvB,KAAkC,CAAtC,EAAyC;AACvC,eAAO,KAAKP,WAAL,CAAiBN,IAAjB,CAAP;AACD;AACF;AACF;;AAED,MAAI,KAAKI,QAAL,CAAcJ,IAAd,KAAuB,KAAKI,QAAL,CAAcJ,IAAd,EAAoBa,MAA/C,EAAuD;AACrD;AACA;AACA,SAAKuB,YAAL,CAAkBpC,IAAlB,EAAwBF,IAAxB,EAA8BC,IAA9B,EAAoCsC,IAApC,CAAyC,MAAzC;AACD;AACF,CA3BD;;AA6BA,SAAS/C,eAAT,CAA0BY,OAA1B,EAAmC;AACjCd,eAAakD,IAAb,CAAkB,IAAlB,EAAwBpC,OAAxB;AACD;AACDX,KAAK6B,QAAL,CAAc9B,eAAd,EAA+BF,YAA/B;;AAEAE,gBAAgB+B,SAAhB,CAA0BC,gBAA1B,GAA6CiB,mBAA7C;AACAjD,gBAAgB+B,SAAhB,CAA0BE,iBAA1B,GAA8C3B,SAASyB,SAAT,CAAmBG,UAAjE;;AAEA,SAASe,mBAAT,CAA8BxC,IAA9B,EAAoCD,IAApC,EAA0CI,OAA1C,EAAmD;AACjD,MAAI,QAAOH,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC5BG,cAAUH,IAAV;AACD,GAFD,MAEO,IAAI,QAAOD,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AACnCI,cAAUJ,IAAV;AACD,GAFM,MAEA,IAAI,QAAOI,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AACtCA,cAAUA,OAAV;AACD,GAFM,MAEA;AACLA,cAAU,EAAV;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5BG,YAAQH,IAAR,GAAeA,IAAf;AACD;;AAED,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BI,YAAQJ,IAAR,GAAeA,IAAf;AACD;;AAED,SAAOH,IAAI6C,OAAJ,CAAYtC,OAAZ,CAAP;AACD","file":"index.js","sourcesContent":["module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n  \nfunction getConnectionName(host, port) {  \n  var name = ''\n  if (typeof host === 'string') {\n    name = host + ':' + port\n  } else {\n    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')\n  }\n  return name\n}    \n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = getConnectionName(host, port)\n\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy()\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = getConnectionName(host, port)\n  \n  if (typeof host !== 'string') {\n    var options = host\n    port = options.port\n    host = options.host\n  }\n\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s)\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1)\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name]\n    delete this.requests[name]\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free')\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}\n"]}