'use strict';

// detect either spaces or tabs but not both to properly handle tabs
// for indentation and spaces for alignment

var INDENT_RE = /^(?:( )+|\t+)/;

function getMostUsed(indents) {
	var result = 0;
	var maxUsed = 0;
	var maxWeight = 0;

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = indents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var entry = _step.value;

			// TODO: use destructuring when targeting Node.js 6
			var key = entry[0];
			var val = entry[1];

			var u = val[0];
			var w = val[1];

			if (u > maxUsed || u === maxUsed && w > maxWeight) {
				maxUsed = u;
				maxWeight = w;
				result = Number(key);
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return result;
}

module.exports = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	// used to see if tabs or spaces are the most used
	var tabs = 0;
	var spaces = 0;

	// remember the size of previous line's indentation
	var prev = 0;

	// remember how many indents/unindents as occurred for a given size
	// and how much lines follow a given indentation
	//
	// indents = {
	//    3: [1, 0],
	//    4: [1, 5],
	//    5: [1, 0],
	//   12: [1, 0],
	// }
	var indents = new Map();

	// pointer to the array of last used indent
	var current = void 0;

	// whether the last action was an indent (opposed to an unindent)
	var isIndent = void 0;

	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;

	try {
		for (var _iterator2 = str.split(/\n/g)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
			var line = _step2.value;

			if (!line) {
				// ignore empty lines
				continue;
			}

			var _indent = void 0;
			var matches = line.match(INDENT_RE);

			if (matches) {
				_indent = matches[0].length;

				if (matches[1]) {
					spaces++;
				} else {
					tabs++;
				}
			} else {
				_indent = 0;
			}

			var diff = _indent - prev;
			prev = _indent;

			if (diff) {
				// an indent or unindent has been detected

				isIndent = diff > 0;

				current = indents.get(isIndent ? diff : -diff);

				if (current) {
					current[0]++;
				} else {
					current = [1, 0];
					indents.set(diff, current);
				}
			} else if (current) {
				// if the last action was an indent, increment the weight
				current[1] += Number(isIndent);
			}
		}
	} catch (err) {
		_didIteratorError2 = true;
		_iteratorError2 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion2 && _iterator2.return) {
				_iterator2.return();
			}
		} finally {
			if (_didIteratorError2) {
				throw _iteratorError2;
			}
		}
	}

	var amount = getMostUsed(indents);

	var type = void 0;
	var indent = void 0;
	if (!amount) {
		type = null;
		indent = '';
	} else if (spaces >= tabs) {
		type = 'space';
		indent = ' '.repeat(amount);
	} else {
		type = 'tab';
		indent = '\t'.repeat(amount);
	}

	return {
		amount: amount,
		type: type,
		indent: indent
	};
};
//# sourceMappingURL=index.js.map