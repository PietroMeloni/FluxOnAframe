{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/node-gyp/node_modules/tar/test/extract-move.js"],"names":["process","umask","parseInt","tap","require","tar","fs","gfs","path","file","resolve","__dirname","target","index","fstream","rimraf","mkdirp","ee","expectEntries","undefined","slow","method","t1","t2","orig","args","slice","call","arguments","console","error","cb","pop","setTimeout","apply","concat","er","data","gfs2","slowMethods","forEach","test","t","sync","pass","end","extract","Extract","inp","createReadStream","bufferSize","pipe","on","equal","length","removeAllListeners","e","fail","entry","found","mode","props","toString","type","depth","size","linkpath","nlink","dev","ino","wanted","equivalent"],"mappings":"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","file":"extract-move.js","sourcesContent":["// Set the umask, so that it works the same everywhere.\nprocess.umask(parseInt('22', 8))\n\nvar tap = require(\"tap\")\n  , tar = require(\"../tar.js\")\n  , fs = require(\"fs\")\n  , gfs = require(\"graceful-fs\")\n  , path = require(\"path\")\n  , file = path.resolve(__dirname, \"fixtures/dir.tar\")\n  , target = path.resolve(__dirname, \"tmp/extract-test\")\n  , index = 0\n  , fstream = require(\"fstream\")\n  , rimraf = require(\"rimraf\")\n  , mkdirp = require(\"mkdirp\")\n\n  , ee = 0\n  , expectEntries = [\n      {\n        \"path\" : \"dir/\",\n        \"mode\" : \"750\",\n        \"type\" : \"5\",\n        \"depth\" : undefined,\n        \"size\" : 0,\n        \"linkpath\" : \"\",\n        \"nlink\" : undefined,\n        \"dev\" : undefined,\n        \"ino\" : undefined\n      },\n      {\n        \"path\" : \"dir/sub/\",\n        \"mode\" : \"750\",\n        \"type\" : \"5\",\n        \"depth\" : undefined,\n        \"size\" : 0,\n        \"linkpath\" : \"\",\n        \"nlink\" : undefined,\n        \"dev\" : undefined,\n        \"ino\" : undefined\n      } ]\n\nfunction slow (fs, method, t1, t2) {\n  var orig = fs[method]\n  if (!orig) return null\n  fs[method] = function () {\n    var args = [].slice.call(arguments)\n    console.error(\"slow\", method, args[0])\n    var cb = args.pop()\n\n    setTimeout(function () {\n      orig.apply(fs, args.concat(function(er, data) {\n        setTimeout(function() {\n          cb(er, data)\n        }, t2)\n      }))\n    }, t1)\n  }\n}\n\n// Make sure we get the graceful-fs that fstream is using.\nvar gfs2\ntry {\n  gfs2 = require(\"fstream/node_modules/graceful-fs\")\n} catch (er) {}\n\nvar slowMethods = [\"chown\", \"chmod\", \"utimes\", \"lutimes\"]\nslowMethods.forEach(function (method) {\n  var t1 = 500\n  var t2 = 0\n  slow(fs, method, t1, t2)\n  slow(gfs, method, t1, t2)\n  if (gfs2) {\n    slow(gfs2, method, t1, t2)\n  }\n})\n\n\n\n// The extract class basically just pipes the input\n// to a Reader, and then to a fstream.DirWriter\n\n// So, this is as much a test of fstream.Reader and fstream.Writer\n// as it is of tar.Extract, but it sort of makes sense.\n\ntap.test(\"preclean\", function (t) {\n  rimraf.sync(target)\n  /mkdirp.sync(target)\n  t.pass(\"cleaned!\")\n  t.end()\n})\n\ntap.test(\"extract test\", function (t) {\n  var extract = tar.Extract(target)\n  var inp = fs.createReadStream(file)\n\n  // give it a weird buffer size to try to break in odd places\n  inp.bufferSize = 1234\n\n  inp.pipe(extract)\n\n  extract.on(\"end\", function () {\n    rimraf.sync(target)\n\n    t.equal(ee, expectEntries.length, \"should see \"+ee+\" entries\")\n\n    // should get no more entries after end\n    extract.removeAllListeners(\"entry\")\n    extract.on(\"entry\", function (e) {\n      t.fail(\"Should not get entries after end!\")\n    })\n\n    t.end()\n  })\n\n\n  extract.on(\"entry\", function (entry) {\n    var found =\n      { path: entry.path\n      , mode: entry.props.mode.toString(8)\n      , type: entry.props.type\n      , depth: entry.props.depth\n      , size: entry.props.size\n      , linkpath: entry.props.linkpath\n      , nlink: entry.props.nlink\n      , dev: entry.props.dev\n      , ino: entry.props.ino\n      }\n\n    var wanted = expectEntries[ee ++]\n\n    t.equivalent(found, wanted, \"tar entry \" + ee + \" \" + wanted.path)\n  })\n})\n"]}