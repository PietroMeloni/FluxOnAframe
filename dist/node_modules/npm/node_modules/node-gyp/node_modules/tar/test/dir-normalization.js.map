{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/node-gyp/node_modules/tar/test/dir-normalization.js"],"names":["process","umask","parseInt","fs","require","path","fstream","test","tar","file","resolve","__dirname","target","ee","expectEntries","mode","type","linkpath","ef","expectFiles","depth","undefined","t","sync","join","pass","end","extract","Extract","inp","createReadStream","pipe","on","equal","length","removeAllListeners","e","fail","next","entry","props","found","toString","wanted","equivalent","r","Reader","sort","foundEntry","finish","p","substr"],"mappings":";;AAAA;AACAA,QAAQC,KAAR,CAAcC,SAAS,IAAT,EAAe,CAAf,CAAd;;AAEA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAEA,IAAIE,UAAUF,QAAQ,SAAR,CAAd;AACA,IAAIG,OAAOH,QAAQ,KAAR,EAAeG,IAA1B;;AAEA,IAAIC,MAAMJ,QAAQ,WAAR,CAAV;AACA,IAAIK,OAAOJ,KAAKK,OAAL,CAAaC,SAAb,EAAwB,uBAAxB,CAAX;AACA,IAAIC,SAASP,KAAKK,OAAL,CAAaC,SAAb,EAAwB,4BAAxB,CAAb;AACA,IAAIE,KAAK,CAAT;;AAEA,IAAIC,gBAAgB,CAClB,EAAET,MAAM,WAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CADkB,EAMlB,EAAEZ,MAAM,aAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CANkB,EAWlB,EAAEZ,MAAM,uBAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAUZ,KAAKK,OAAL,CAAaE,MAAb,EAAqB,sBAArB;AAHZ,CAXkB,EAgBlB,EAAEP,MAAM,eAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CAhBkB,EAqBlB,EAAEZ,MAAM,cAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CArBkB,EA0BlB,EAAEZ,MAAM,iBAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CA1BkB,EA+BlB,EAAEZ,MAAM,kBAAR;AACEU,QAAM,KADR;AAEEC,QAAM,GAFR;AAGEC,YAAU;AAHZ,CA/BkB,CAApB;;AAsCA,IAAIC,KAAK,CAAT;AACA,IAAIC,cAAc,CAChB,EAAEd,MAAM,EAAR;AACEU,QAAM,OADR;AAEEC,QAAM,WAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CADgB,EAOhB,EAAEhB,MAAM,WAAR;AACEU,QAAM,OADR;AAEEC,QAAM,WAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CAPgB,EAahB,EAAEhB,MAAM,aAAR;AACEU,QAAM,OADR;AAEEC,QAAM,WAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CAbgB,EAmBhB,EAAEhB,MAAM,eAAR;AACEU,QAAM,OADR;AAEEC,QAAM,WAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CAnBgB,EAyBhB,EAAEhB,MAAM,iBAAR;AACEU,QAAM,OADR;AAEEC,QAAM,WAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CAzBgB,EA+BhB,EAAEhB,MAAM,mBAAR;AACEU,QAAM,QADR;AAEEC,QAAM,cAFR;AAGEI,SAAO,CAHT;AAIEH,YAAU;AAJZ,CA/BgB,EAqChB,EAAEZ,MAAM,eAAR;AACEU,QAAM,QADR;AAEEC,QAAM,MAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUI;AAJZ,CArCgB,EA2ChB,EAAEhB,MAAM,wBAAR;AACEU,QAAM,QADR;AAEEC,QAAM,cAFR;AAGEI,SAAO,CAHT;AAIEH,YAAUZ,KAAKK,OAAL,CAAaE,MAAb,EAAqB,sBAArB;AAJZ,CA3CgB,CAAlB;;AAmDAL,KAAK,UAAL,EAAiB,UAAUe,CAAV,EAAa;AAC5BlB,UAAQ,QAAR,EAAkBmB,IAAlB,CAAuBlB,KAAKmB,IAAL,CAAUb,SAAV,EAAqB,6BAArB,CAAvB;AACAW,IAAEG,IAAF,CAAO,UAAP;AACAH,IAAEI,GAAF;AACD,CAJD;;AAMAnB,KAAK,cAAL,EAAqB,UAAUe,CAAV,EAAa;AAChC,MAAIK,UAAUnB,IAAIoB,OAAJ,CAAYhB,MAAZ,CAAd;AACA,MAAIiB,MAAM1B,GAAG2B,gBAAH,CAAoBrB,IAApB,CAAV;;AAEAoB,MAAIE,IAAJ,CAASJ,OAAT;;AAEAA,UAAQK,EAAR,CAAW,KAAX,EAAkB,YAAY;AAC5BV,MAAEW,KAAF,CAAQpB,EAAR,EAAYC,cAAcoB,MAA1B,EAAkC,gBAAgBpB,cAAcoB,MAA9B,GAAuC,UAAzE;;AAEA;AACAP,YAAQQ,kBAAR,CAA2B,OAA3B;AACAR,YAAQK,EAAR,CAAW,OAAX,EAAoB,UAAUI,CAAV,EAAa;AAC/Bd,QAAEe,IAAF,CAAO,mCAAP;AACD,KAFD;;AAIAC;AACD,GAVD;;AAYAX,UAAQK,EAAR,CAAW,OAAX,EAAoB,UAAUO,KAAV,EAAiB;AACnC,QAAIxB,OAAOwB,MAAMC,KAAN,CAAYzB,IAAZ,GAAoB,CAACb,SAAS,IAAT,EAAe,CAAf,CAAhC;AACA,QAAIuC,QAAQ;AACVpC,YAAMkC,MAAMlC,IADF;AAEVU,YAAMA,KAAK2B,QAAL,CAAc,CAAd,CAFI;AAGV1B,YAAMuB,MAAMC,KAAN,CAAYxB,IAHR;AAIVC,gBAAUsB,MAAMC,KAAN,CAAYvB;AAJZ,KAAZ;;AAOA,QAAI0B,SAAS7B,cAAcD,IAAd,CAAb;AACAS,MAAEsB,UAAF,CAAaH,KAAb,EAAoBE,MAApB,EAA4B,eAAe9B,EAAf,GAAoB,GAApB,IAA2B8B,UAAUA,OAAOtC,IAA5C,CAA5B;AACD,GAXD;;AAaA,WAASiC,IAAT,GAAiB;AACf,QAAIO,IAAIvC,QAAQwC,MAAR,CAAe;AACrBzC,YAAMO,MADe;AAErBI,YAAM,WAFe;AAGrB+B,YAAM;AAHe,KAAf,CAAR;;AAMAF,MAAEb,EAAF,CAAK,OAAL,EAAc,YAAY;AACxBgB,iBAAWH,CAAX;AACD,KAFD;;AAIAA,MAAEb,EAAF,CAAK,KAAL,EAAYiB,MAAZ;;AAEA,aAASD,UAAT,CAAqBT,KAArB,EAA4B;AAC1B,UAAIW,IAAIX,MAAMlC,IAAN,CAAW8C,MAAX,CAAkBvC,OAAOsB,MAAzB,CAAR;AACA,UAAInB,OAAOwB,MAAMC,KAAN,CAAYzB,IAAZ,GAAoB,CAACb,SAAS,IAAT,EAAe,CAAf,CAAhC;AACA,UAAIuC,QAAQ;AACVpC,cAAM6C,CADI;AAEVnC,cAAMA,KAAK2B,QAAL,CAAc,CAAd,CAFI;AAGV1B,cAAMuB,MAAMC,KAAN,CAAYxB,IAHR;AAIVI,eAAOmB,MAAMC,KAAN,CAAYpB,KAJT;AAKVH,kBAAUsB,MAAMC,KAAN,CAAYvB;AALZ,OAAZ;;AAQA,UAAI0B,SAASxB,YAAYD,IAAZ,CAAb;AACAI,QAAEsB,UAAF,CAAaH,KAAb,EAAoBE,MAApB,EAA4B,mBAAmBzB,EAAnB,GAAwB,GAAxB,IAA+ByB,UAAUA,OAAOtC,IAAhD,CAA5B;;AAEAkC,YAAMP,EAAN,CAAS,OAAT,EAAkBgB,UAAlB;AACD;;AAED,aAASC,MAAT,GAAmB;AACjB3B,QAAEW,KAAF,CAAQf,EAAR,EAAYC,YAAYe,MAAxB,EAAgC,iBAAiBhB,EAAjB,GAAsB,QAAtD;AACAI,QAAEI,GAAF;AACD;AACF;AACF,CAlED","file":"dir-normalization.js","sourcesContent":["// Set the umask, so that it works the same everywhere.\nprocess.umask(parseInt('22', 8))\n\nvar fs = require('fs')\nvar path = require('path')\n\nvar fstream = require('fstream')\nvar test = require('tap').test\n\nvar tar = require('../tar.js')\nvar file = path.resolve(__dirname, 'dir-normalization.tar')\nvar target = path.resolve(__dirname, 'tmp/dir-normalization-test')\nvar ee = 0\n\nvar expectEntries = [\n  { path: 'fixtures/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/the-chumbler',\n    mode: '755',\n    type: '2',\n    linkpath: path.resolve(target, 'a/b/c/d/the-chumbler'),\n  },\n  { path: 'fixtures/a/b/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/x',\n    mode: '644',\n    type: '0',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/b/c/',\n    mode: '755',\n    type: '5',\n    linkpath: ''\n  },\n  { path: 'fixtures/a/b/c/y',\n    mode: '755',\n    type: '2',\n    linkpath: '../../x',\n  }\n]\n\nvar ef = 0\nvar expectFiles = [\n  { path: '',\n    mode: '40755',\n    type: 'Directory',\n    depth: 0,\n    linkpath: undefined\n  },\n  { path: '/fixtures',\n    mode: '40755',\n    type: 'Directory',\n    depth: 1,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a',\n    mode: '40755',\n    type: 'Directory',\n    depth: 2,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b',\n    mode: '40755',\n    type: 'Directory',\n    depth: 3,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b/c',\n    mode: '40755',\n    type: 'Directory',\n    depth: 4,\n    linkpath: undefined\n  },\n  { path: '/fixtures/a/b/c/y',\n    mode: '120755',\n    type: 'SymbolicLink',\n    depth: 5,\n    linkpath: '../../x'\n  },\n  { path: '/fixtures/a/x',\n    mode: '100644',\n    type: 'File',\n    depth: 3,\n    linkpath: undefined\n  },\n  { path: '/fixtures/the-chumbler',\n    mode: '120755',\n    type: 'SymbolicLink',\n    depth: 2,\n    linkpath: path.resolve(target, 'a/b/c/d/the-chumbler')\n  }\n]\n\ntest('preclean', function (t) {\n  require('rimraf').sync(path.join(__dirname, '/tmp/dir-normalization-test'))\n  t.pass('cleaned!')\n  t.end()\n})\n\ntest('extract test', function (t) {\n  var extract = tar.Extract(target)\n  var inp = fs.createReadStream(file)\n\n  inp.pipe(extract)\n\n  extract.on('end', function () {\n    t.equal(ee, expectEntries.length, 'should see ' + expectEntries.length + ' entries')\n\n    // should get no more entries after end\n    extract.removeAllListeners('entry')\n    extract.on('entry', function (e) {\n      t.fail('Should not get entries after end!')\n    })\n\n    next()\n  })\n\n  extract.on('entry', function (entry) {\n    var mode = entry.props.mode & (~parseInt('22', 8))\n    var found = {\n      path: entry.path,\n      mode: mode.toString(8),\n      type: entry.props.type,\n      linkpath: entry.props.linkpath,\n    }\n\n    var wanted = expectEntries[ee++]\n    t.equivalent(found, wanted, 'tar entry ' + ee + ' ' + (wanted && wanted.path))\n  })\n\n  function next () {\n    var r = fstream.Reader({\n      path: target,\n      type: 'Directory',\n      sort: 'alpha'\n    })\n\n    r.on('ready', function () {\n      foundEntry(r)\n    })\n\n    r.on('end', finish)\n\n    function foundEntry (entry) {\n      var p = entry.path.substr(target.length)\n      var mode = entry.props.mode & (~parseInt('22', 8))\n      var found = {\n        path: p,\n        mode: mode.toString(8),\n        type: entry.props.type,\n        depth: entry.props.depth,\n        linkpath: entry.props.linkpath\n      }\n\n      var wanted = expectFiles[ef++]\n      t.equivalent(found, wanted, 'unpacked file ' + ef + ' ' + (wanted && wanted.path))\n\n      entry.on('entry', foundEntry)\n    }\n\n    function finish () {\n      t.equal(ef, expectFiles.length, 'should have ' + ef + ' items')\n      t.end()\n    }\n  }\n})\n"]}