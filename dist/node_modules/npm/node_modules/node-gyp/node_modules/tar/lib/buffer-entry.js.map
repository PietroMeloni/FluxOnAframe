{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/node-gyp/node_modules/tar/lib/buffer-entry.js"],"names":["module","exports","BufferEntry","inherits","require","Entry","apply","arguments","_buffer","Buffer","props","size","_offset","body","on","toString","slice","prototype","write","c","copy","length","call"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAOC,OAAP,GAAiBC,WAAjB;;AAEA,IAAIC,WAAWC,QAAQ,UAAR,CAAf;AAAA,IACIC,QAAQD,QAAQ,YAAR,CADZ;;AAGA,SAASF,WAAT,GAAwB;AACtBG,QAAMC,KAAN,CAAY,IAAZ,EAAkBC,SAAlB;AACA,OAAKC,OAAL,GAAe,IAAIC,MAAJ,CAAW,KAAKC,KAAL,CAAWC,IAAtB,CAAf;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,EAAL,CAAQ,KAAR,EAAe,YAAY;AACzB,SAAKD,IAAL,GAAY,KAAKL,OAAL,CAAaO,QAAb,GAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,CAAC,CAAlC,CAAZ;AACD,GAFD;AAGD;;AAEDb,SAASD,WAAT,EAAsBG,KAAtB;;AAEA;AACAH,YAAYe,SAAZ,CAAsBC,KAAtB,GAA8B,UAAUC,CAAV,EAAa;AACzCA,IAAEC,IAAF,CAAO,KAAKZ,OAAZ,EAAqB,KAAKI,OAA1B;AACA,OAAKA,OAAL,IAAgBO,EAAEE,MAAlB;AACAhB,QAAMY,SAAN,CAAgBC,KAAhB,CAAsBI,IAAtB,CAA2B,IAA3B,EAAiCH,CAAjC;AACD,CAJD","file":"buffer-entry.js","sourcesContent":["// just like the Entry class, but it buffers the contents\n//\n// XXX It would be good to set a maximum BufferEntry filesize,\n// since it eats up memory.  In normal operation,\n// these are only for long filenames or link names, which are\n// rarely very big.\n\nmodule.exports = BufferEntry\n\nvar inherits = require(\"inherits\")\n  , Entry = require(\"./entry.js\")\n\nfunction BufferEntry () {\n  Entry.apply(this, arguments)\n  this._buffer = new Buffer(this.props.size)\n  this._offset = 0\n  this.body = \"\"\n  this.on(\"end\", function () {\n    this.body = this._buffer.toString().slice(0, -1)\n  })\n}\n\ninherits(BufferEntry, Entry)\n\n// collect the bytes as they come in.\nBufferEntry.prototype.write = function (c) {\n  c.copy(this._buffer, this._offset)\n  this._offset += c.length\n  Entry.prototype.write.call(this, c)\n}\n"]}