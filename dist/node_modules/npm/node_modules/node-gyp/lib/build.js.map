{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/lib/build.js"],"names":["module","exports","build","fs","require","rm","path","glob","log","which","exec","processRelease","win","process","platform","usage","gyp","argv","callback","platformMake","indexOf","length","map","target","release","version","makeCommand","opts","make","env","MAKE","command","buildDir","resolve","configPath","jobs","JOBS","buildType","config","arch","nodeDir","loadConfigGypi","readFile","err","data","code","Error","JSON","parse","replace","target_defaults","default_configuration","variables","target_arch","nodedir","debug","verbose","findSolutionFile","doWhich","files","guessedSolution","execPath","test","message","findMsbuild","doBuild","msbuild_path","notfoundErr","cmd","stdout","stderr","reVers","rePath","msbuilds","r","msbuildPath","split","forEach","l","trim","substring","ver","parseFloat","push","sort","x","y","verifyMsbuild","pop","stat","levels","level","archLower","toLowerCase","p","j","parseInt","isNaN","toUpperCase","cpus","hasSln","some","arg","extname","unshift","solution","proc","spawn","on","onExit","signal"],"mappings":"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","file":"build.js","sourcesContent":["\nmodule.exports = exports = build\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs')\n  , rm = require('rimraf')\n  , path = require('path')\n  , glob = require('glob')\n  , log = require('npmlog')\n  , which = require('which')\n  , exec = require('child_process').exec\n  , processRelease = require('./process-release')\n  , win = process.platform === 'win32'\n\nexports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module'\n\nfunction build (gyp, argv, callback) {\n  var platformMake = 'make'\n  if (process.platform === 'aix') {\n    platformMake = 'gmake'\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake'\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function(target) {\n      return '/t:' + target\n    })\n  }\n\n  var release = processRelease(argv, gyp, process.version, process.release)\n    , makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n    , command = win ? 'msbuild' : makeCommand\n    , buildDir = path.resolve('build')\n    , configPath = path.resolve(buildDir, 'config.gypi')\n    , jobs = gyp.opts.jobs || process.env.JOBS\n    , buildType\n    , config\n    , arch\n    , nodeDir\n\n  loadConfigGypi()\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi () {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/\\#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile () {\n    glob('build/*.sln', function (err, files) {\n      if (err) return callback(err)\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'))\n      }\n      guessedSolution = files[0]\n      log.verbose('found first Solution file', guessedSolution)\n      doWhich()\n    })\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich () {\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        if (win && /not found/.test(err.message)) {\n          // On windows and no 'msbuild' found. Let's guess where it is\n          findMsbuild()\n        } else {\n          // Some other error or 'make' not found on Unix, report that to the user\n          callback(err)\n        }\n        return\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath)\n      doBuild()\n    })\n  }\n\n  /**\n   * Search for the location of \"msbuild.exe\" file on Windows.\n   */\n\n  function findMsbuild () {\n    if (config.variables.msbuild_path) {\n      command = config.variables.msbuild_path\n      log.verbose('using MSBuild:', command)\n      doBuild()\n      return\n    }\n\n    log.verbose('could not find \"msbuild.exe\" in PATH - finding location in registry')\n    var notfoundErr = 'Can\\'t find \"msbuild.exe\". Do you have Microsoft Visual Studio C++ 2008+ installed?'\n    var cmd = 'reg query \"HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions\" /s'\n    if (process.arch !== 'ia32')\n      cmd += ' /reg:32'\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        return callback(new Error(err.message + '\\n' + notfoundErr))\n      }\n      var reVers = /ToolsVersions\\\\([^\\\\]+)$/i\n        , rePath = /\\r\\n[ \\t]+MSBuildToolsPath[ \\t]+REG_SZ[ \\t]+([^\\r]+)/i\n        , msbuilds = []\n        , r\n        , msbuildPath\n      stdout.split('\\r\\n\\r\\n').forEach(function(l) {\n        if (!l) return\n        l = l.trim()\n        if (r = reVers.exec(l.substring(0, l.indexOf('\\r\\n')))) {\n          var ver = parseFloat(r[1], 10)\n          if (ver >= 3.5) {\n            if (r = rePath.exec(l)) {\n              msbuilds.push({\n                version: ver,\n                path: r[1]\n              })\n            }\n          }\n        }\n      })\n      msbuilds.sort(function (x, y) {\n        return (x.version < y.version ? -1 : 1)\n      })\n      ;(function verifyMsbuild () {\n        if (!msbuilds.length) return callback(new Error(notfoundErr))\n        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe')\n        fs.stat(msbuildPath, function (err, stat) {\n          if (err) {\n            if (err.code == 'ENOENT') {\n              if (msbuilds.length) {\n                return verifyMsbuild()\n              } else {\n                callback(new Error(notfoundErr))\n              }\n            } else {\n              callback(err)\n            }\n            return\n          }\n          command = msbuildPath\n          doBuild()\n        })\n      })()\n    })\n  }\n\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild () {\n\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64' :\n              (archLower === 'arm' ? 'ARM' : 'Win32')\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n  }\n\n  /**\n   * Invoked after the make/msbuild command exits.\n   */\n\n  function onExit (code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code))\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal))\n    }\n    callback()\n  }\n\n}\n"]}