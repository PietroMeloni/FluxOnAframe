{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/lib/process-release.js"],"names":["semver","require","url","path","log","headersTarballRange","bitsre","bitsreV3","processRelease","argv","gyp","defaultVersion","defaultRelease","version","valid","opts","target","versionSemver","parse","overrideDistUrl","disturl","isDefaultVersion","isIojs","name","distBaseUrl","baseUrl","libUrl32","libUrl64","tarballUrl","canGetHeaders","replace","major","process","env","IOJS_ORG_MIRROR","NVM_IOJS_ORG_MIRROR","warn","NODEJS_ORG_MIRROR","NVM_NODEJS_ORG_MIRROR","verbose","headersUrl","resolve","resolveLibUrl","libUrl","shasumsUrl","versionDir","libPath32","normalizePath","relative","libPath64","satisfies","p","normalize","defaultUrl","arch","versionMajor","base","hasLibUrl","test","module","exports"],"mappings":"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","file":"process-release.js","sourcesContent":["var semver = require('semver')\n  , url = require('url')\n  , path = require('path')\n  , log = require('npmlog')\n\n    // versions where -headers.tar.gz started shipping\n  , headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'\n  , bitsre = /\\/win-(x86|x64)\\//\n  , bitsreV3 = /\\/win-(x86|ia32|x64)\\// // io.js v3.x.x shipped with \"ia32\" but should\n                                        // have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease (argv, gyp, defaultVersion, defaultRelease) {\n  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion\n    , versionSemver = semver.parse(version)\n    , overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl\n    , isDefaultVersion\n    , isIojs\n    , name\n    , distBaseUrl\n    , baseUrl\n    , libUrl32\n    , libUrl64\n    , tarballUrl\n    , canGetHeaders\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return { version: version }\n  }\n  // flatten version into String\n  version = versionSemver.version\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion)\n    defaultRelease = null\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs') // remove the '.' for directory naming purposes\n    isIojs = name === 'iojs'\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4\n    name = isIojs ? 'iojs' : 'node'\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use IOJS_ORG_MIRROR')\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use NODEJS_ORG_MIRROR')\n      }\n    }\n  }\n\n  if (overrideDistUrl)\n    log.verbose('download', 'using dist-url', overrideDistUrl)\n\n  if (overrideDistUrl)\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '')\n  else\n    distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist'\n  distBaseUrl += '/v' + version + '/'\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './')\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major)\n\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    }\n  }\n\n  // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n  baseUrl = distBaseUrl\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major)\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major)\n  // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange)\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz')\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  }\n}\n\nfunction normalizePath (p) {\n  return path.normalize(p).replace(/\\\\/g, '/')\n}\n\nfunction resolveLibUrl (name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './')\n    , hasLibUrl = bitsre.test(defaultUrl) || (versionMajor === 3 && bitsreV3.test(defaultUrl))\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1)\n      return url.resolve(base, 'win-' + arch  +'/' + name + '.lib')\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib')\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/')\n}\n\nmodule.exports = processRelease\n"]}