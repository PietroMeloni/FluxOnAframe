{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/lib/remove.js"],"names":["module","exports","remove","usage","fs","require","rm","path","log","semver","gyp","argv","callback","devDir","verbose","version","opts","target","Error","process","versionSemver","parse","versionPath","resolve","stat","err","code"],"mappings":";;AACAA,OAAOC,OAAP,GAAiBA,UAAUC,MAA3B;;AAEAD,QAAQE,KAAR,GAAgB,8DAAhB;;AAEA;;;;AAIA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AAAA,IACIC,KAAKD,QAAQ,QAAR,CADT;AAAA,IAEIE,OAAOF,QAAQ,MAAR,CAFX;AAAA,IAGIG,MAAMH,QAAQ,QAAR,CAHV;AAAA,IAIII,SAASJ,QAAQ,QAAR,CAJb;;AAMA,SAASH,MAAT,CAAiBQ,GAAjB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;;AAEpC,MAAIC,SAASH,IAAIG,MAAjB;AACAL,MAAIM,OAAJ,CAAY,QAAZ,EAAsB,qBAAtB,EAA6CD,MAA7C;;AAEA;AACA,MAAIE,UAAUJ,KAAK,CAAL,KAAWD,IAAIM,IAAJ,CAASC,MAAlC;AACAT,MAAIM,OAAJ,CAAY,QAAZ,EAAsB,0BAAtB,EAAkDC,OAAlD;;AAEA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,SAAS,IAAIM,KAAJ,CAAU,uDAAuDC,QAAQJ,OAA/D,GAAyE,GAAnF,CAAT,CAAP;AACD;;AAED,MAAIK,gBAAgBX,OAAOY,KAAP,CAAaN,OAAb,CAApB;AACA,MAAIK,aAAJ,EAAmB;AACjB;AACAL,cAAUK,cAAcL,OAAxB;AACD;;AAED,MAAIO,cAAcf,KAAKgB,OAAL,CAAab,IAAIG,MAAjB,EAAyBE,OAAzB,CAAlB;AACAP,MAAIM,OAAJ,CAAY,QAAZ,EAAsB,yCAAtB,EAAiEC,OAAjE;;AAEA;AACAX,KAAGoB,IAAH,CAAQF,WAAR,EAAqB,UAAUG,GAAV,EAAeD,IAAf,EAAqB;AACxC,QAAIC,GAAJ,EAAS;AACP,UAAIA,IAAIC,IAAJ,IAAY,QAAhB,EAA0B;AACxBd,iBAAS,IAAT,EAAe,sCAAsCG,OAArD;AACD,OAFD,MAEO;AACLH,iBAASa,GAAT;AACD;AACD;AACD;AACD;AACAnB,OAAGgB,WAAH,EAAgBV,QAAhB;AACD,GAXD;AAaD","file":"remove.js","sourcesContent":["\nmodule.exports = exports = remove\n\nexports.usage = 'Removes the node development files for the specified version'\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , rm = require('rimraf')\n  , path = require('path')\n  , log = require('npmlog')\n  , semver = require('semver')\n\nfunction remove (gyp, argv, callback) {\n\n  var devDir = gyp.devDir\n  log.verbose('remove', 'using node-gyp dir:', devDir)\n\n  // get the user-specified version to remove\n  var version = argv[0] || gyp.opts.target\n  log.verbose('remove', 'removing target version:', version)\n\n  if (!version) {\n    return callback(new Error('You must specify a version number to remove. Ex: \"' + process.version + '\"'))\n  }\n\n  var versionSemver = semver.parse(version)\n  if (versionSemver) {\n    // flatten the version Array into a String\n    version = versionSemver.version\n  }\n\n  var versionPath = path.resolve(gyp.devDir, version)\n  log.verbose('remove', 'removing development files for version:', version)\n\n  // first check if its even installed\n  fs.stat(versionPath, function (err, stat) {\n    if (err) {\n      if (err.code == 'ENOENT') {\n        callback(null, 'version was already uninstalled: ' + version)\n      } else {\n        callback(err)\n      }\n      return\n    }\n    // Go ahead and delete the dir\n    rm(versionPath, callback)\n  })\n\n}\n"]}