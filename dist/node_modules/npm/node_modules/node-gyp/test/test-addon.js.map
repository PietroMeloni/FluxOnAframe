{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/test/test-addon.js"],"names":["test","require","path","fs","child_process","addonPath","resolve","__dirname","nodeGyp","execFileSync","execFile","runHello","testCode","cwd","toString","getEncoding","code","trim","checkCharmapValid","data","err","lines","split","pop","t","plan","cmd","proc","process","execPath","stdout","stderr","logLines","lastLine","length","strictEqual","setEncoding","skip","testDirNames","testDirName","configPath","join","readFileSync","error","config","JSON","parse","replace","nodeDir","variables","nodedir","testNodeDir","symlinkSync","unlink"],"mappings":"AAAA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,KAAKF,QAAQ,aAAR,CAAT;AACA,IAAIG,gBAAgBH,QAAQ,eAAR,CAApB;AACA,IAAII,YAAYH,KAAKI,OAAL,CAAaC,SAAb,EAAwB,cAAxB,EAAwC,aAAxC,CAAhB;AACA,IAAIC,UAAUN,KAAKI,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,CAAd;AACA,IAAIE,eAAeL,cAAcK,YAAjC;AACA,IAAIC,WAAWN,cAAcM,QAA7B;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAIC,WAAW,6CAAf;AACA,SAAOH,aAAa,MAAb,EAAqB,CAAC,IAAD,EAAOG,QAAP,CAArB,EAAuC,EAAEC,KAAKN,SAAP,EAAvC,EAA2DO,QAA3D,EAAP;AACD;;AAED,SAASC,WAAT,GAAuB;AACrB,MAAIC,OAAO,kDAAX;AACA,SAAOP,aAAa,QAAb,EAAuB,CAAC,IAAD,EAAOO,IAAP,CAAvB,EAAqCF,QAArC,GAAgDG,IAAhD,EAAP;AACD;;AAED,SAASC,iBAAT,GAA6B;AAC3B,MAAIC,IAAJ;AACA,MAAI;AACFA,WAAOV,aAAa,QAAb,EAAuB,CAAC,0BAAD,CAAvB,EACa,EAAEI,KAAKN,SAAP,EADb,CAAP;AAED,GAHD,CAGE,OAAOa,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACD,MAAIC,QAAQF,KAAKL,QAAL,GAAgBG,IAAhB,GAAuBK,KAAvB,CAA6B,IAA7B,CAAZ;AACA,SAAOD,MAAME,GAAN,OAAgB,MAAvB;AACD;;AAEDvB,KAAK,oBAAL,EAA2B,UAAUwB,CAAV,EAAa;AACtCA,IAAEC,IAAF,CAAO,CAAP;;AAEA;AACA,MAAIC,MAAM,CAAClB,OAAD,EAAU,SAAV,EAAqB,IAArB,EAA2BH,SAA3B,EAAsC,oBAAtC,CAAV;AACA,MAAIsB,OAAOjB,SAASkB,QAAQC,QAAjB,EAA2BH,GAA3B,EAAgC,UAAUN,GAAV,EAAeU,MAAf,EAAuBC,MAAvB,EAA+B;AACxE,QAAIC,WAAWD,OAAOjB,QAAP,GAAkBG,IAAlB,GAAyBK,KAAzB,CAA+B,OAA/B,CAAf;AACA,QAAIW,WAAWD,SAASA,SAASE,MAAT,GAAgB,CAAzB,CAAf;AACAV,MAAEW,WAAF,CAAcf,GAAd,EAAmB,IAAnB;AACAI,MAAEW,WAAF,CAAcF,QAAd,EAAwB,aAAxB,EAAuC,kBAAvC;AACAT,MAAEW,WAAF,CAAcxB,WAAWM,IAAX,EAAd,EAAiC,OAAjC;AACD,GANU,CAAX;AAOAU,OAAKG,MAAL,CAAYM,WAAZ,CAAwB,OAAxB;AACAT,OAAKI,MAAL,CAAYK,WAAZ,CAAwB,OAAxB;AACD,CAdD;;AAgBApC,KAAK,sDAAL,EAA6D,UAAUwB,CAAV,EAAa;AACxEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAI,CAACP,mBAAL,EAA0B;AACxB,WAAOM,EAAEa,IAAF,CAAO,uDAAP,CAAP;AACD;;AAED,MAAIC,eAAe;AACjB,aAAS,KADQ;AAEjB,cAAU,QAFO;AAGjB,aAAS;AAEX;AALmB,GAAnB,CAMA,IAAIC,cAAcD,aAAavB,aAAb,CAAlB;AACA;AACA,MAAI,CAACwB,WAAL,EAAkB;AAChB,WAAOf,EAAEa,IAAF,CAAO,iBAAP,CAAP;AACD;;AAEDb,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIN,IAAJ;AAAA,MAAUqB,aAAatC,KAAKuC,IAAL,CAAUpC,SAAV,EAAqB,OAArB,EAA8B,aAA9B,CAAvB;AACA,MAAI;AACFc,WAAOhB,GAAGuC,YAAH,CAAgBF,UAAhB,EAA4B,MAA5B,CAAP;AACD,GAFD,CAEE,OAAOpB,GAAP,EAAY;AACZI,MAAEmB,KAAF,CAAQvB,GAAR;AACA;AACD;AACD,MAAIwB,SAASC,KAAKC,KAAL,CAAW3B,KAAK4B,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAX,CAAb;AACA,MAAIC,UAAUJ,OAAOK,SAAP,CAAiBC,OAA/B;AACA,MAAIC,cAAcjD,KAAKuC,IAAL,CAAUpC,SAAV,EAAqBkC,WAArB,CAAlB;AACA;AACA,MAAI;AACFpC,OAAGiD,WAAH,CAAeJ,OAAf,EAAwBG,WAAxB,EAAqC,KAArC;AACD,GAFD,CAEE,OAAO/B,GAAP,EAAY;AACZ,YAAQA,IAAIJ,IAAZ;AACE,WAAK,QAAL;AAAe;AACf,WAAK,OAAL;AACEQ,UAAEmB,KAAF,CAAQvB,GAAR,EAAa,mDAAb;AACA;AACF;AACEI,UAAEmB,KAAF,CAAQvB,GAAR;AACA;AAPJ;AASD;;AAED,MAAIM,MAAM,CAAClB,OAAD,EAAU,SAAV,EAAqB,IAArB,EAA2BH,SAA3B,EACC,oBADD,EACuB,cAAc8C,WADrC,CAAV;AAEA,MAAIxB,OAAOjB,SAASkB,QAAQC,QAAjB,EAA2BH,GAA3B,EAAgC,UAAUN,GAAV,EAAeU,MAAf,EAAuBC,MAAvB,EAA+B;AACxE,QAAI;AACF5B,SAAGkD,MAAH,CAAUF,WAAV;AACD,KAFD,CAEE,OAAO/B,GAAP,EAAY;AACZI,QAAEmB,KAAF,CAAQvB,GAAR;AACD;;AAED,QAAIY,WAAWD,OAAOjB,QAAP,GAAkBG,IAAlB,GAAyBK,KAAzB,CAA+B,OAA/B,CAAf;AACA,QAAIW,WAAWD,SAASA,SAASE,MAAT,GAAgB,CAAzB,CAAf;AACAV,MAAEW,WAAF,CAAcf,GAAd,EAAmB,IAAnB;AACAI,MAAEW,WAAF,CAAcF,QAAd,EAAwB,aAAxB,EAAuC,kBAAvC;AACAT,MAAEW,WAAF,CAAcxB,WAAWM,IAAX,EAAd,EAAiC,OAAjC;AACD,GAZU,CAAX;AAaAU,OAAKG,MAAL,CAAYM,WAAZ,CAAwB,OAAxB;AACAT,OAAKI,MAAL,CAAYK,WAAZ,CAAwB,OAAxB;AACD,CA/DD","file":"test-addon.js","sourcesContent":["'use strict'\n\nvar test = require('tape')\nvar path = require('path')\nvar fs = require('graceful-fs')\nvar child_process = require('child_process')\nvar addonPath = path.resolve(__dirname, 'node_modules', 'hello_world')\nvar nodeGyp = path.resolve(__dirname, '..', 'bin', 'node-gyp.js')\nvar execFileSync = child_process.execFileSync\nvar execFile = child_process.execFile\n\nfunction runHello() {\n  var testCode = \"console.log(require('hello_world').hello())\"\n  return execFileSync('node', ['-e', testCode], { cwd: __dirname }).toString()\n}\n\nfunction getEncoding() {\n  var code = 'import locale;print locale.getdefaultlocale()[1]'\n  return execFileSync('python', ['-c', code]).toString().trim()\n}\n\nfunction checkCharmapValid() {\n  var data\n  try {\n    data = execFileSync('python', ['fixtures/test-charmap.py'],\n                        { cwd: __dirname })\n  } catch (err) {\n    return false\n  }\n  var lines = data.toString().trim().split('\\n')\n  return lines.pop() === 'True'\n}\n\ntest('build simple addon', function (t) {\n  t.plan(3)\n\n  // Set the loglevel otherwise the output disappears when run via 'npm test'\n  var cmd = [nodeGyp, 'rebuild', '-C', addonPath, '--loglevel=verbose']\n  var proc = execFile(process.execPath, cmd, function (err, stdout, stderr) {\n    var logLines = stderr.toString().trim().split(/\\r?\\n/)\n    var lastLine = logLines[logLines.length-1]\n    t.strictEqual(err, null)\n    t.strictEqual(lastLine, 'gyp info ok', 'should end in ok')\n    t.strictEqual(runHello().trim(), 'world')\n  })\n  proc.stdout.setEncoding('utf-8')\n  proc.stderr.setEncoding('utf-8')\n})\n\ntest('build simple addon in path with non-ascii characters', function (t) {\n  t.plan(1)\n\n  if (!checkCharmapValid()) {\n    return t.skip('python console app can\\'t encode non-ascii character.')\n  }\n\n  var testDirNames = {\n    'cp936': '文件夹',\n    'cp1252': 'Latīna',\n    'cp932': 'フォルダ'\n  }\n  // Select non-ascii characters by current encoding\n  var testDirName = testDirNames[getEncoding()]\n  // If encoding is UTF-8 or other then no need to test\n  if (!testDirName) {\n    return t.skip('no need to test')\n  }\n\n  t.plan(3)\n\n  var data, configPath = path.join(addonPath, 'build', 'config.gypi')\n  try {\n    data = fs.readFileSync(configPath, 'utf8')\n  } catch (err) {\n    t.error(err)\n    return\n  }\n  var config = JSON.parse(data.replace(/\\#.+\\n/, ''))\n  var nodeDir = config.variables.nodedir\n  var testNodeDir = path.join(addonPath, testDirName)\n  // Create symbol link to path with non-ascii characters\n  try {\n    fs.symlinkSync(nodeDir, testNodeDir, 'dir')\n  } catch (err) {\n    switch (err.code) {\n      case 'EEXIST': break\n      case 'EPERM':\n        t.error(err, 'Please try to running console as an administrator')\n        return\n      default:\n        t.error(err)\n        return\n    }\n  }\n\n  var cmd = [nodeGyp, 'rebuild', '-C', addonPath,\n             '--loglevel=verbose', '-nodedir=' + testNodeDir]\n  var proc = execFile(process.execPath, cmd, function (err, stdout, stderr) {\n    try {\n      fs.unlink(testNodeDir)\n    } catch (err) {\n      t.error(err)\n    }\n\n    var logLines = stderr.toString().trim().split(/\\r?\\n/)\n    var lastLine = logLines[logLines.length-1]\n    t.strictEqual(err, null)\n    t.strictEqual(lastLine, 'gyp info ok', 'should end in ok')\n    t.strictEqual(runHello().trim(), 'world')\n  })\n  proc.stdout.setEncoding('utf-8')\n  proc.stderr.setEncoding('utf-8')\n})\n"]}