{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/test/test-configure-python.js"],"names":["test","require","path","gyp","requireInject","configure","file","mode","fd","data","cb","EXPECTED_PYPATH","join","__dirname","SEPARATOR","process","platform","SPAWN_RESULT","on","t","plan","env","PYTHONPATH","prog","parseArgv","spawn","equal","fail","existingPath","dirs","split","deepEqual","pythonDir1","pythonDir2"],"mappings":"AAAA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,MAAMF,QAAQ,iBAAR,CAAV;AACA,IAAIG,gBAAgBH,QAAQ,gBAAR,CAApB;AACA,IAAII,YAAYD,cAAc,kBAAd,EAAkC;AAChD,iBAAe;AACb,gBAAY,kBAAUE,IAAV,EAAgBC,IAAhB,EAAsB;AAAE,aAAO,CAAP;AAAW,KADlC;AAEb,iBAAa,mBAAUC,EAAV,EAAc,CAAG,CAFjB;AAGb,iBAAa,mBAAUF,IAAV,EAAgBG,IAAhB,EAAsBC,EAAtB,EAA0B;AAAEA;AAAM,KAHlC;AAIb,YAAQ,cAAUJ,IAAV,EAAgBI,EAAhB,EAAoB;AAAEA,SAAG,IAAH,EAAS,EAAT;AAAc;AAJ/B;AADiC,CAAlC,CAAhB;;AASA,IAAIC,kBAAkBT,KAAKU,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,KAA3B,EAAkC,OAAlC,CAAtB;AACA,IAAIC,YAAYC,QAAQC,QAAR,IAAoB,OAApB,GAA8B,GAA9B,GAAoC,GAApD;AACA,IAAIC,eAAe,EAAEC,IAAI,cAAY,CAAG,CAArB,EAAnB;;AAEAlB,KAAK,2CAAL,EAAkD,UAAUmB,CAAV,EAAa;AAC7DA,IAAEC,IAAF,CAAO,CAAP;;AAEA,SAAOL,QAAQM,GAAR,CAAYC,UAAnB;;AAEA,MAAIC,OAAOpB,KAAX;AACAoB,OAAKC,SAAL,CAAe,EAAf;AACAD,OAAKE,KAAL,GAAa,YAAY;AACvBN,MAAEO,KAAF,CAAQX,QAAQM,GAAR,CAAYC,UAApB,EAAgCX,eAAhC;AACA,WAAOM,YAAP;AACD,GAHD;AAIAZ,YAAUkB,IAAV,EAAgB,EAAhB,EAAoBJ,EAAEQ,IAAtB;AACD,CAZD;;AAcA3B,KAAK,mDAAL,EAA0D,UAAUmB,CAAV,EAAa;AACrEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIQ,eAAe1B,KAAKU,IAAL,CAAU,GAAV,EAAe,GAAf,CAAnB;AACAG,UAAQM,GAAR,CAAYC,UAAZ,GAAyBM,YAAzB;;AAEA,MAAIL,OAAOpB,KAAX;AACAoB,OAAKC,SAAL,CAAe,EAAf;AACAD,OAAKE,KAAL,GAAa,YAAY;;AAEvBN,MAAEO,KAAF,CAAQX,QAAQM,GAAR,CAAYC,UAApB,EAAgC,CAACX,eAAD,EAAkBiB,YAAlB,EAAgChB,IAAhC,CAAqCE,SAArC,CAAhC;;AAEA,QAAIe,OAAOd,QAAQM,GAAR,CAAYC,UAAZ,CAAuBQ,KAAvB,CAA6BhB,SAA7B,CAAX;AACAK,MAAEY,SAAF,CAAYF,IAAZ,EAAkB,CAAClB,eAAD,EAAkBiB,YAAlB,CAAlB;;AAEA,WAAOX,YAAP;AACD,GARD;AASAZ,YAAUkB,IAAV,EAAgB,EAAhB,EAAoBJ,EAAEQ,IAAtB;AACD,CAlBD;;AAoBA3B,KAAK,yDAAL,EAAgE,UAAUmB,CAAV,EAAa;AAC3EA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIY,aAAa9B,KAAKU,IAAL,CAAU,GAAV,EAAe,GAAf,CAAjB;AACA,MAAIqB,aAAa/B,KAAKU,IAAL,CAAU,GAAV,EAAe,GAAf,CAAjB;AACA,MAAIgB,eAAe,CAACI,UAAD,EAAaC,UAAb,EAAyBrB,IAAzB,CAA8BE,SAA9B,CAAnB;AACAC,UAAQM,GAAR,CAAYC,UAAZ,GAAyBM,YAAzB;;AAEA,MAAIL,OAAOpB,KAAX;AACAoB,OAAKC,SAAL,CAAe,EAAf;AACAD,OAAKE,KAAL,GAAa,YAAY;;AAEvBN,MAAEO,KAAF,CAAQX,QAAQM,GAAR,CAAYC,UAApB,EAAgC,CAACX,eAAD,EAAkBiB,YAAlB,EAAgChB,IAAhC,CAAqCE,SAArC,CAAhC;;AAEA,QAAIe,OAAOd,QAAQM,GAAR,CAAYC,UAAZ,CAAuBQ,KAAvB,CAA6BhB,SAA7B,CAAX;AACAK,MAAEY,SAAF,CAAYF,IAAZ,EAAkB,CAAClB,eAAD,EAAkBqB,UAAlB,EAA8BC,UAA9B,CAAlB;;AAEA,WAAOhB,YAAP;AACD,GARD;AASAZ,YAAUkB,IAAV,EAAgB,EAAhB,EAAoBJ,EAAEQ,IAAtB;AACD,CApBD","file":"test-configure-python.js","sourcesContent":["'use strict'\n\nvar test = require('tape')\nvar path = require('path')\nvar gyp = require('../lib/node-gyp')\nvar requireInject = require('require-inject')\nvar configure = requireInject('../lib/configure', {\n  'graceful-fs': {\n    'openSync': function (file, mode) { return 0; },\n    'closeSync': function (fd) { },\n    'writeFile': function (file, data, cb) { cb() },\n    'stat': function (file, cb) { cb(null, {}) }\n  }\n})\n\nvar EXPECTED_PYPATH = path.join(__dirname, '..', 'gyp', 'pylib')\nvar SEPARATOR = process.platform == 'win32' ? ';' : ':'\nvar SPAWN_RESULT = { on: function () { } }\n\ntest('configure PYTHONPATH with no existing env', function (t) {\n  t.plan(1)\n\n  delete process.env.PYTHONPATH\n\n  var prog = gyp()\n  prog.parseArgv([])\n  prog.spawn = function () {\n    t.equal(process.env.PYTHONPATH, EXPECTED_PYPATH)\n    return SPAWN_RESULT\n  }\n  configure(prog, [], t.fail)\n})\n\ntest('configure PYTHONPATH with existing env of one dir', function (t) {\n  t.plan(2)\n\n  var existingPath = path.join('a', 'b')\n  process.env.PYTHONPATH = existingPath\n\n  var prog = gyp()\n  prog.parseArgv([])\n  prog.spawn = function () {\n\n    t.equal(process.env.PYTHONPATH, [EXPECTED_PYPATH, existingPath].join(SEPARATOR))\n\n    var dirs = process.env.PYTHONPATH.split(SEPARATOR)\n    t.deepEqual(dirs, [EXPECTED_PYPATH, existingPath])\n\n    return SPAWN_RESULT\n  }\n  configure(prog, [], t.fail)\n})\n\ntest('configure PYTHONPATH with existing env of multiple dirs', function (t) {\n  t.plan(2)\n\n  var pythonDir1 = path.join('a', 'b')\n  var pythonDir2 = path.join('b', 'c')\n  var existingPath = [pythonDir1, pythonDir2].join(SEPARATOR)\n  process.env.PYTHONPATH = existingPath\n\n  var prog = gyp()\n  prog.parseArgv([])\n  prog.spawn = function () {\n\n    t.equal(process.env.PYTHONPATH, [EXPECTED_PYPATH, existingPath].join(SEPARATOR))\n\n    var dirs = process.env.PYTHONPATH.split(SEPARATOR)\n    t.deepEqual(dirs, [EXPECTED_PYPATH, pythonDir1, pythonDir2])\n\n    return SPAWN_RESULT\n  }\n  configure(prog, [], t.fail)\n})\n"]}