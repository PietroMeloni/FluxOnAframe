{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-gyp/test/test-find-accessible-sync.js"],"names":["test","require","path","requireInject","configure","fd","undefined","readableFiles","some","f","error","Error","dir","sep","readableFile","anotherReadableFile","readableFileInDir","resolve","t","plan","candidates","found","findAccessibleSync","strictEqual"],"mappings":"AAAA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,gBAAgBF,QAAQ,gBAAR,CAApB;AACA,IAAIG,YAAYD,cAAc,kBAAd,EAAkC;AAChD,iBAAe;AACb,iBAAa,mBAAUE,EAAV,EAAc;AAAE,aAAOC,SAAP;AAAkB,KADlC;AAEb,gBAAY,kBAAUJ,IAAV,EAAgB;AAC1B,UAAIK,cAAcC,IAAd,CAAmB,UAAUC,CAAV,EAAa;AAAE,eAAOA,MAAMP,IAAb;AAAkB,OAApD,CAAJ,EAA4D;AAC1D,eAAO,CAAP;AACD,OAFD,MAEO;AACL,YAAIQ,QAAQ,IAAIC,KAAJ,CAAU,oBAAV,CAAZ;AACA,cAAMD,KAAN;AACD;AACF;AATY;AADiC,CAAlC,CAAhB;;AAcA,IAAIE,MAAMV,KAAKW,GAAL,GAAW,SAArB;AACA,IAAIC,eAAe,eAAnB;AACA,IAAIC,sBAAsB,uBAA1B;AACA,IAAIC,oBAAoB,YAAYd,KAAKW,GAAjB,GAAuBC,YAA/C;AACA,IAAIP,gBAAgB,CAClBL,KAAKe,OAAL,CAAaL,GAAb,EAAkBE,YAAlB,CADkB,EAElBZ,KAAKe,OAAL,CAAaL,GAAb,EAAkBG,mBAAlB,CAFkB,EAGlBb,KAAKe,OAAL,CAAaL,GAAb,EAAkBI,iBAAlB,CAHkB,CAApB;;AAMAhB,KAAK,+BAAL,EAAsC,UAAUkB,CAAV,EAAa;AACjDA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,EAAjB;AACA,MAAIC,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBf,SAArB;AACD,CAND;;AAQAN,KAAK,+CAAL,EAAsD,UAAUkB,CAAV,EAAa;AACjEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAEN,YAAF,CAAjB;AACA,MAAIO,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBnB,KAAKe,OAAL,CAAaL,GAAb,EAAkBE,YAAlB,CAArB;AACD,CAND;;AAQAd,KAAK,yDAAL,EAAgE,UAAUkB,CAAV,EAAa;AAC3EA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAEJ,iBAAF,CAAjB;AACA,MAAIK,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBnB,KAAKe,OAAL,CAAaL,GAAb,EAAkBI,iBAAlB,CAArB;AACD,CAND;;AAQAhB,KAAK,iDAAL,EAAwD,UAAUkB,CAAV,EAAa;AACnEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAE,iBAAF,CAAjB;AACA,MAAIC,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBf,SAArB;AACD,CAND;;AASAN,KAAK,gDAAL,EAAuD,UAAUkB,CAAV,EAAa;AAClEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAE,mBAAF,EAAuB,iBAAvB,CAAjB;AACA,MAAIC,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBf,SAArB;AACD,CAND;;AASAN,KAAK,kDAAL,EAAyD,UAAUkB,CAAV,EAAa;AACpEA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAE,mBAAF,EAAuBN,YAAvB,CAAjB;AACA,MAAIO,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBnB,KAAKe,OAAL,CAAaL,GAAb,EAAkBE,YAAlB,CAArB;AACD,CAND;;AAQAd,KAAK,wDAAL,EAA+D,UAAUkB,CAAV,EAAa;AAC1EA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,aAAa,CAAE,mBAAF,EAAuBL,mBAAvB,EAA4CD,YAA5C,CAAjB;AACA,MAAIO,QAAQjB,UAAUJ,IAAV,CAAesB,kBAAf,CAAkC,MAAlC,EAA0CV,GAA1C,EAA+CQ,UAA/C,CAAZ;AACAF,IAAEK,WAAF,CAAcF,KAAd,EAAqBnB,KAAKe,OAAL,CAAaL,GAAb,EAAkBG,mBAAlB,CAArB;AACD,CAND","file":"test-find-accessible-sync.js","sourcesContent":["'use strict'\n\nvar test = require('tape')\nvar path = require('path')\nvar requireInject = require('require-inject')\nvar configure = requireInject('../lib/configure', {\n  'graceful-fs': {\n    'closeSync': function (fd) { return undefined },\n    'openSync': function (path) {\n      if (readableFiles.some(function (f) { return f === path} )) {\n        return 0\n      } else {\n        var error = new Error('ENOENT - not found')\n        throw error\n      }\n    }\n  }\n})\n\nvar dir = path.sep + 'testdir'\nvar readableFile = 'readable_file'\nvar anotherReadableFile = 'another_readable_file'\nvar readableFileInDir = 'somedir' + path.sep + readableFile\nvar readableFiles = [\n  path.resolve(dir, readableFile),\n  path.resolve(dir, anotherReadableFile),\n  path.resolve(dir, readableFileInDir)\n]\n\ntest('find accessible - empty array', function (t) {\n  t.plan(1)\n\n  var candidates = []\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, undefined)\n})\n\ntest('find accessible - single item array, readable', function (t) {\n  t.plan(1)\n\n  var candidates = [ readableFile ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, path.resolve(dir, readableFile))\n})\n\ntest('find accessible - single item array, readable in subdir', function (t) {\n  t.plan(1)\n\n  var candidates = [ readableFileInDir ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, path.resolve(dir, readableFileInDir))\n})\n\ntest('find accessible - single item array, unreadable', function (t) {\n  t.plan(1)\n\n  var candidates = [ 'unreadable_file' ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, undefined)\n})\n\n\ntest('find accessible - multi item array, no matches', function (t) {\n  t.plan(1)\n\n  var candidates = [ 'non_existent_file', 'unreadable_file' ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, undefined)\n})\n\n\ntest('find accessible - multi item array, single match', function (t) {\n  t.plan(1)\n\n  var candidates = [ 'non_existent_file', readableFile ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, path.resolve(dir, readableFile))\n})\n\ntest('find accessible - multi item array, return first match', function (t) {\n  t.plan(1)\n\n  var candidates = [ 'non_existent_file', anotherReadableFile, readableFile ]\n  var found = configure.test.findAccessibleSync('test', dir, candidates)\n  t.strictEqual(found, path.resolve(dir, anotherReadableFile))\n})\n"]}