{"version":3,"sources":["../../../../../node_modules/npm/node_modules/mime-types/index.js"],"names":["db","require","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","exports","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","populateMaps","type","match","exec","mime","toLowerCase","test","str","indexOf","exts","length","path","substr","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"]}