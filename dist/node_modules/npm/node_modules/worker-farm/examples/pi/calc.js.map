{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/worker-farm/examples/pi/calc.js"],"names":["module","exports","points","callback","inside","i","Math","pow","random"],"mappings":"AAAA;;AAEA;;;;;;;;;;AAUAA,OAAOC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC3C,MAAIC,SAAS,CAAb;AAAA,MACIC,IAAIH,MADR;;AAGA,SAAOG,GAAP;AACE,QAAIC,KAAKC,GAAL,CAASD,KAAKE,MAAL,EAAT,EAAwB,CAAxB,IAA6BF,KAAKC,GAAL,CAASD,KAAKE,MAAL,EAAT,EAAwB,CAAxB,CAA7B,IAA2D,CAA/D,EACEJ;AAFJ,GAIAD,SAAS,IAAT,EAAgBC,SAASF,MAAV,GAAoB,CAAnC;AACD,CATD","file":"calc.js","sourcesContent":["'use strict'\n\n/* A simple Ï€ estimation function using a Monte Carlo method\n * For 0 to `points`, take 2 random numbers < 1, square and add them to\n * find the area under that point in a 1x1 square. If that area is <= 1\n * then it's *within* a quarter-circle, otherwise it's outside.\n * Take the number of points <= 1 and multiply it by 4 and you have an\n * estimate!\n * Do this across multiple processes and average the results to\n * increase accuracy.\n */\n\nmodule.exports = function (points, callback) {\n  let inside = 0\n    , i = points\n\n  while (i--)\n    if (Math.pow(Math.random(), 2) + Math.pow(Math.random(), 2) <= 1)\n      inside++\n\n  callback(null, (inside / points) * 4)\n}\n"]}