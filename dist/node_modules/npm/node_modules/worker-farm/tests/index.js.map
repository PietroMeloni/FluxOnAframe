{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/worker-farm/tests/index.js"],"names":["tape","require","child_process","workerFarm","childPath","resolve","fs","os","uniq","ar","a","i","j","o","length","t","plan","child","err","pid","rnd","ok","process","end","run0","maxConcurrentWorkers","pids","push","equal","fail","autoStart","count","delay","setTimeout","uptime","maxConcurrentCallsPerWorker","Infinity","maxCallsPerWorker","defer","cbc","start","Date","now","time","callsPerWorker","ids","killable","id","pass","maxCallTime","type","undefined","Error","message","foo","baz","maxConcurrentCalls","notOk","block","filepath1","child1","maxRetries","stubborn","result","unlinkSync","filepath2","child2","cwd","realpathSync","tmpdir","workerOptions","execArgv","args","script","__dirname","debugArg","version","replace","spawn","execPath","stdout","on","data","toString","code","indexOf"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst tape          = require('tape')\n    , child_process = require('child_process')\n    , workerFarm    = require('../')\n    , childPath     = require.resolve('./child')\n    , fs            = require('fs')\n    , os            = require('os')\n\nfunction uniq (ar) {\n  let a = [], i, j\n  o: for (i = 0; i < ar.length; ++i) {\n    for (j = 0; j < a.length; ++j) if (a[j] == ar[i]) continue o\n    a[a.length] = ar[i]\n  }\n  return a\n}\n\n\n// a child where module.exports = function ...\ntape('simple, exports=function test', function (t) {\n  t.plan(4)\n\n  let child = workerFarm(childPath)\n  child(0, function (err, pid, rnd) {\n    t.ok(pid > process.pid, 'pid makes sense')\n    t.ok(pid < process.pid + 750, 'pid makes sense')\n    t.ok(rnd >= 0 && rnd < 1, 'rnd result makes sense')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\n// a child where we have module.exports.fn = function ...\ntape('simple, exports.fn test', function (t) {\n  t.plan(4)\n\n  let child = workerFarm(childPath, [ 'run0' ])\n  child.run0(function (err, pid, rnd) {\n    t.ok(pid > process.pid, 'pid makes sense')\n    t.ok(pid < process.pid + 750, 'pid makes sense')\n    t.ok(rnd >= 0 && rnd < 1, 'rnd result makes sense')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\n// use the returned pids to check that we're using a single child process\n// when maxConcurrentWorkers = 1\ntape('single worker', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({ maxConcurrentWorkers: 1 }, childPath)\n    , pids  = []\n    , i     = 10\n\n  while (i--) {\n    child(0, function (err, pid) {\n      pids.push(pid)\n      if (pids.length == 10) {\n        t.equal(1, uniq(pids).length, 'only a single process (by pid)')\n      } else if (pids.length > 10)\n        t.fail('too many callbacks!')\n    })\n  }\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\n// use the returned pids to check that we're using two child processes\n// when maxConcurrentWorkers = 2\ntape('two workers', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({ maxConcurrentWorkers: 2 }, childPath)\n    , pids  = []\n    , i     = 10\n\n  while (i--) {\n    child(0, function (err, pid) {\n      pids.push(pid)\n      if (pids.length == 10) {\n        t.equal(2, uniq(pids).length, 'only two child processes (by pid)')\n      } else if (pids.length > 10)\n        t.fail('too many callbacks!')\n    })\n  }\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\n// use the returned pids to check that we're using a child process per\n// call when maxConcurrentWorkers = 10\ntape('many workers', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({ maxConcurrentWorkers: 10 }, childPath)\n    , pids  = []\n    , i     = 10\n\n  while (i--) {\n    child(1, function (err, pid) {\n      pids.push(pid)\n      if (pids.length == 10) {\n        t.equal(10, uniq(pids).length, 'pids are all the same (by pid)')\n      } else if (pids.length > 10)\n        t.fail('too many callbacks!')\n    })\n  }\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\ntape('auto start workers', function (t) {\n  let child = workerFarm({ maxConcurrentWorkers: 3, autoStart: true }, childPath, ['uptime'])\n    , pids  = []\n    , count = 5\n    , i     = count\n    , delay = 250\n\n  t.plan(count + 1)\n\n  setTimeout(function() {\n    while (i--)\n      child.uptime(function (err, uptime) {\n        t.ok(uptime > 10, 'child has been up before the request (' + uptime + 'ms)')\n      })\n\n    workerFarm.end(child, function () {\n      t.ok(true, 'workerFarm ended')\n    })\n  }, delay)\n})\n\n\n// use the returned pids to check that we're using a child process per\n// call when we set maxCallsPerWorker = 1 even when we have maxConcurrentWorkers = 1\ntape('single call per worker', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({\n          maxConcurrentWorkers: 1\n        , maxConcurrentCallsPerWorker: Infinity\n        , maxCallsPerWorker: 1\n        , autoStart: true\n      }, childPath)\n    , pids  = []\n    , count = 25\n    , i     = count\n\n  while (i--) {\n    child(0, function (err, pid) {\n      pids.push(pid)\n      if (pids.length == count) {\n        t.equal(count, uniq(pids).length, 'one process for each call (by pid)')\n        workerFarm.end(child, function () {\n          t.ok(true, 'workerFarm ended')\n        })\n      } else if (pids.length > count)\n        t.fail('too many callbacks!')\n    })\n  }\n})\n\n\n// use the returned pids to check that we're using a child process per\n// two-calls when we set maxCallsPerWorker = 2 even when we have maxConcurrentWorkers = 1\ntape('two calls per worker', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({\n          maxConcurrentWorkers: 1\n        , maxConcurrentCallsPerWorker: Infinity\n        , maxCallsPerWorker: 2\n        , autoStart: true\n      }, childPath)\n    , pids  = []\n    , count = 20\n    , i     = count\n\n  while (i--) {\n    child(0, function (err, pid) {\n      pids.push(pid)\n      if (pids.length == count) {\n        t.equal(count / 2, uniq(pids).length, 'one process for each call (by pid)')\n        workerFarm.end(child, function () {\n          t.ok(true, 'workerFarm ended')\n        })\n      } else if (pids.length > count)\n        t.fail('too many callbacks!')\n    })\n  }\n})\n\n\n// use timing to confirm that one worker will process calls sequentially\ntape('many concurrent calls', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({\n          maxConcurrentWorkers: 1\n        , maxConcurrentCallsPerWorker: Infinity\n        , maxCallsPerWorker: Infinity\n        , autoStart: true\n      }, childPath)\n    , defer = 200\n    , count = 200\n    , i     = count\n    , cbc   = 0\n\n  setTimeout(function () {\n    let start = Date.now()\n\n    while (i--) {\n      child(defer, function () {\n        if (++cbc == count) {\n          let time = Date.now() - start\n          // upper-limit not tied to `count` at all\n          t.ok(time > defer && time < (defer * 2.5), 'processed tasks concurrently (' + time + 'ms)')\n          workerFarm.end(child, function () {\n            t.ok(true, 'workerFarm ended')\n          })\n        } else if (cbc > count)\n          t.fail('too many callbacks!')\n      })\n    }\n  }, 250)\n})\n\n\n// use timing to confirm that one child processes calls sequentially with\n// maxConcurrentCallsPerWorker = 1\ntape('single concurrent call', function (t) {\n  t.plan(2)\n\n  let child = workerFarm({\n          maxConcurrentWorkers: 1\n        , maxConcurrentCallsPerWorker: 1\n        , maxCallsPerWorker: Infinity\n        , autoStart: true\n      }, childPath)\n    , defer = 20\n    , count = 100\n    , i     = count\n    , cbc   = 0\n\n  setTimeout(function () {\n    let start = Date.now()\n\n    while (i--) {\n      child(defer, function () {\n        if (++cbc == count) {\n          let time = Date.now() - start\n          // upper-limit tied closely to `count`, 1.3 is generous but accounts for all the timers\n          // coming back at the same time and the IPC overhead\n          t.ok(time > (defer * count) && time < (defer * count * 1.3), 'processed tasks sequentially (' + time + ')')\n          workerFarm.end(child, function () {\n            t.ok(true, 'workerFarm ended')\n          })\n        } else if (cbc > count)\n          t.fail('too many callbacks!')\n      })\n    }\n  }, 250)\n})\n\n\n// use timing to confirm that one child processes *only* 5 calls concurrently\ntape('multiple concurrent calls', function (t) {\n  t.plan(2)\n\n  let callsPerWorker = 5\n    , child = workerFarm({\n          maxConcurrentWorkers: 1\n        , maxConcurrentCallsPerWorker: callsPerWorker\n        , maxCallsPerWorker: Infinity\n        , autoStart: true\n      }, childPath)\n    , defer = 100\n    , count = 100\n    , i     = count\n    , cbc   = 0\n\n  setTimeout(function () {\n    let start = Date.now()\n\n    while (i--) {\n      child(defer, function () {\n        if (++cbc == count) {\n          let time = Date.now() - start\n          // (defer * (count / callsPerWorker + 1)) - if precise it'd be count/callsPerWorker\n          // but accounting for IPC and other overhead, we need to give it a bit of extra time,\n          // hence the +1\n          t.ok(time > (defer * 1.5) && time < (defer * (count / callsPerWorker + 1)), 'processed tasks concurrently (' + time + 'ms)')\n          workerFarm.end(child, function () {\n            t.ok(true, 'workerFarm ended')\n          })\n        } else if (cbc > count)\n          t.fail('too many callbacks!')\n      })\n    }\n  }, 250)\n})\n\n\n// call a method that will die with a probability of 0.5 but expect that\n// we'll get results for each of our calls anyway\ntape('durability', function (t) {\n  t.plan(3)\n\n  let child = workerFarm({ maxConcurrentWorkers: 2 }, childPath, [ 'killable' ])\n    , ids   = []\n    , pids  = []\n    , count = 20\n    , i     = count\n\n  while (i--) {\n    child.killable(i, function (err, id, pid) {\n      ids.push(id)\n      pids.push(pid)\n      if (ids.length == count) {\n        t.ok(uniq(pids).length > 2, 'processed by many (' + uniq(pids).length + ') workers, but got there in the end!')\n        t.ok(uniq(ids).length == count, 'received a single result for each unique call')\n        workerFarm.end(child, function () {\n          t.ok(true, 'workerFarm ended')\n        })\n      } else if (ids.length > count)\n        t.fail('too many callbacks!')\n    })\n  }\n})\n\n\n// a callback provided to .end() can and will be called (uses \"simple, exports=function test\" to create a child)\ntape('simple, end callback', function (t) {\n  t.plan(4)\n\n  let child = workerFarm(childPath)\n  child(0, function (err, pid, rnd) {\n    t.ok(pid > process.pid, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(pid < process.pid + 750, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(rnd >= 0 && rnd < 1, 'rnd result makes sense')\n  })\n\n  workerFarm.end(child, function() {\n    t.pass('an .end() callback was successfully called')\n  })\n})\n\n\ntape('call timeout test', function (t) {\n  t.plan(3 + 3 + 4 + 4 + 4 + 3 + 1)\n\n  let child = workerFarm({ maxCallTime: 250, maxConcurrentWorkers: 1 }, childPath)\n\n  // should come back ok\n  child(50, function (err, pid, rnd) {\n    t.ok(pid > process.pid, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(pid < process.pid + 750, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(rnd > 0 && rnd < 1, 'rnd result makes sense ' + rnd)\n  })\n\n  // should come back ok\n  child(50, function (err, pid, rnd) {\n    t.ok(pid > process.pid, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(pid < process.pid + 750, 'pid makes sense ' + pid + ' vs ' + process.pid)\n    t.ok(rnd > 0 && rnd < 1, 'rnd result makes sense ' + rnd)\n  })\n\n  // should die\n  child(500, function (err, pid, rnd) {\n    t.ok(err, 'got an error')\n    t.equal(err.type, 'TimeoutError', 'correct error type')\n    t.ok(pid === undefined, 'no pid')\n    t.ok(rnd === undefined, 'no rnd')\n  })\n\n  // should die\n  child(1000, function (err, pid, rnd) {\n    t.ok(err, 'got an error')\n    t.equal(err.type, 'TimeoutError', 'correct error type')\n    t.ok(pid === undefined, 'no pid')\n    t.ok(rnd === undefined, 'no rnd')\n  })\n\n  // should die even though it is only a 100ms task, it'll get caught up\n  // in a dying worker\n  setTimeout(function () {\n    child(100, function (err, pid, rnd) {\n      t.ok(err, 'got an error')\n      t.equal(err.type, 'TimeoutError', 'correct error type')\n      t.ok(pid === undefined, 'no pid')\n      t.ok(rnd === undefined, 'no rnd')\n    })\n  }, 200)\n\n  // should be ok, new worker\n  setTimeout(function () {\n    child(50, function (err, pid, rnd) {\n      t.ok(pid > process.pid, 'pid makes sense ' + pid + ' vs ' + process.pid)\n      t.ok(pid < process.pid + 750, 'pid makes sense ' + pid + ' vs ' + process.pid)\n      t.ok(rnd > 0 && rnd < 1, 'rnd result makes sense ' + rnd)\n    })\n    workerFarm.end(child, function () {\n      t.ok(true, 'workerFarm ended')\n    })\n  }, 400)\n})\n\n\ntape('test error passing', function (t) {\n  t.plan(10)\n\n  let child = workerFarm(childPath, [ 'err' ])\n  child.err('Error', 'this is an Error', function (err) {\n    t.ok(err instanceof Error, 'is an Error object')\n    t.equal('Error', err.type, 'correct type')\n    t.equal('this is an Error', err.message, 'correct message')\n  })\n  child.err('TypeError', 'this is a TypeError', function (err) {\n    t.ok(err instanceof Error, 'is a TypeError object')\n    t.equal('TypeError', err.type, 'correct type')\n    t.equal('this is a TypeError', err.message, 'correct message')\n  })\n  child.err('Error', 'this is an Error with custom props', {foo: 'bar', 'baz': 1}, function (err) {\n    t.ok(err instanceof Error, 'is an Error object')\n    t.equal(err.foo, 'bar', 'passes data')\n    t.equal(err.baz, 1, 'passes data')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\ntape('test maxConcurrentCalls', function (t) {\n  t.plan(10)\n\n  let child = workerFarm({ maxConcurrentCalls: 5 }, childPath)\n\n  child(50, function (err) { t.notOk(err, 'no error') })\n  child(50, function (err) { t.notOk(err, 'no error') })\n  child(50, function (err) { t.notOk(err, 'no error') })\n  child(50, function (err) { t.notOk(err, 'no error') })\n  child(50, function (err) { t.notOk(err, 'no error') })\n  child(50, function (err) {\n    t.ok(err)\n    t.equal(err.type, 'MaxConcurrentCallsError', 'correct error type')\n  })\n  child(50, function (err) {\n    t.ok(err)\n    t.equal(err.type, 'MaxConcurrentCallsError', 'correct error type')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\n// this test should not keep the process running! if the test process\n// doesn't die then the problem is here\ntape('test timeout kill', function (t) {\n  t.plan(3)\n\n  let child = workerFarm({ maxCallTime: 250, maxConcurrentWorkers: 1 }, childPath, [ 'block' ])\n  child.block(function (err) {\n    t.ok(err, 'got an error')\n    t.equal(err.type, 'TimeoutError', 'correct error type')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\ntape('test max retries after process terminate', function (t) {\n  t.plan(7)\n\n  // temporary file is used to store the number of retries among terminating workers\n  let filepath1 = '.retries1'\n  let child1 = workerFarm({ maxConcurrentWorkers: 1, maxRetries: 5}, childPath, [ 'stubborn' ])\n  child1.stubborn(filepath1, function (err, result) {\n    t.notOk(err, 'no error')\n    t.equal(result, 12, 'correct result')\n  })\n\n  workerFarm.end(child1, function () {\n    fs.unlinkSync(filepath1)\n    t.ok(true, 'workerFarm ended')\n  })\n\n  let filepath2 = '.retries2'\n  let child2 = workerFarm({ maxConcurrentWorkers: 1, maxRetries: 3}, childPath, [ 'stubborn' ])\n  child2.stubborn(filepath2, function (err, result) {\n    t.ok(err, 'got an error')\n    t.equal(err.type, 'ProcessTerminatedError', 'correct error type')\n    t.equal(err.message, 'cancel after 3 retries!', 'correct message and number of retries')\n  })\n\n  workerFarm.end(child2, function () {\n    fs.unlinkSync(filepath2)\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\ntape('custom arguments can be passed to \"fork\"', function (t) {\n  t.plan(3)\n\n  // allocate a real, valid path, in any OS\n  let cwd = fs.realpathSync(os.tmpdir())\n    , workerOptions = {\n        cwd      : cwd\n      , execArgv : ['--no-warnings']\n    }\n    , child = workerFarm({ maxConcurrentWorkers: 1, maxRetries: 5, workerOptions: workerOptions}, childPath, ['args'])\n\n  child.args(function (err, result) {\n    t.equal(result.execArgv[0], '--no-warnings', 'flags passed (overridden default)')\n    t.equal(result.cwd, cwd, 'correct cwd folder')\n  })\n\n  workerFarm.end(child, function () {\n    t.ok(true, 'workerFarm ended')\n  })\n})\n\n\ntape('ensure --debug/--inspect not propagated to children', function (t) {\n  t.plan(3)\n\n  let script   = __dirname + '/debug.js'\n    , debugArg = process.version.replace(/^v(\\d+)\\..*$/, '$1') >= 8 ? '--inspect' : '--debug=8881'\n    , child    = child_process.spawn(process.execPath, [ debugArg, script ])\n    , stdout   = ''\n\n  child.stdout.on('data', function (data) {\n    stdout += data.toString()\n  })\n\n  child.on('close', function (code) {\n    t.equal(code, 0, 'exited without error (' + code + ')')\n    t.ok(stdout.indexOf('FINISHED') > -1, 'process finished')\n    t.ok(stdout.indexOf('--debug') === -1, 'child does not receive debug flag')\n  })\n})\n"]}