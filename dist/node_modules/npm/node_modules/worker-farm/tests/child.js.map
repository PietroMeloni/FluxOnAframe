{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/worker-farm/tests/child.js"],"names":["fs","require","started","Date","now","module","exports","timeout","callback","bind","process","pid","Math","random","setTimeout","args","argv","cwd","execArgv","run0","killable","id","exit","err","type","message","data","Error","Object","keys","forEach","key","TypeError","block","stubborn","path","isOutdated","getTime","statSync","mtime","existsSync","writeFileSync","retry","parseInt","readFileSync","Number","isNaN","String","uptime"],"mappings":"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","file":"child.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst started = Date.now()\n\n\nmodule.exports = function (timeout, callback) {\n  callback = callback.bind(null, null, process.pid, Math.random(), timeout)\n  if (timeout)\n    return setTimeout(callback, timeout)\n  callback()\n}\n\n\nmodule.exports.args = function (callback) {\n  callback(null, {\n      argv     : process.argv\n    , cwd      : process.cwd()\n    , execArgv : process.execArgv\n  })\n}\n\n\nmodule.exports.run0 = function (callback) {\n  module.exports(0, callback)\n}\n\n\nmodule.exports.killable = function (id, callback) {\n  if (Math.random() < 0.5)\n    return process.exit(-1)\n  callback(null, id, process.pid)\n}\n\n\nmodule.exports.err = function (type, message, data, callback) {\n  if (typeof data == 'function') {\n    callback = data\n    data = null\n  } else {\n    let err = new Error(message)\n    Object.keys(data).forEach(function(key) {\n      err[key] = data[key]\n    })\n    callback(err)\n    return\n  }\n\n  if (type == 'TypeError')\n    return callback(new TypeError(message))\n  callback(new Error(message))\n}\n\n\nmodule.exports.block = function () {\n  while (true);\n}\n\n\n// use provided file path to save retries count among terminated workers\nmodule.exports.stubborn = function (path, callback) {\n  function isOutdated(path) {\n    return ((new Date).getTime() - fs.statSync(path).mtime.getTime()) > 2000\n  }\n\n  // file may not be properly deleted, check if modified no earler than two seconds ago\n  if (!fs.existsSync(path) || isOutdated(path)) {\n    fs.writeFileSync(path, '1')\n    process.exit(-1)\n  }\n\n  let retry = parseInt(fs.readFileSync(path, 'utf8'))\n  if (Number.isNaN(retry))\n    return callback(new Error('file contents is not a number'))\n\n  if (retry > 4) {\n    callback(null, 12)\n  } else {\n    fs.writeFileSync(path, String(retry + 1))\n    process.exit(-1)\n  }\n}\n\n\nmodule.exports.uptime = function (callback) {\n  callback(null, Date.now() - started)\n}\n"]}