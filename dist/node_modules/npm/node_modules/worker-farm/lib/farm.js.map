{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/worker-farm/lib/farm.js"],"names":["DEFAULT_OPTIONS","workerOptions","maxCallsPerWorker","Infinity","maxConcurrentWorkers","require","cpus","length","maxConcurrentCallsPerWorker","maxConcurrentCalls","maxCallTime","maxRetries","forcedKillTime","autoStart","fork","TimeoutError","create","ProcessTerminatedError","MaxConcurrentCallsError","Farm","options","path","Object","assign","activeCalls","prototype","mkhandle","method","args","Array","slice","call","arguments","err","process","nextTick","bind","addCall","callback","pop","retries","setup","methods","iface","forEach","m","searchStart","childId","children","activeChildren","callQueue","startChild","onExit","setTimeout","doQueue","calls","i","receive","idx","child","unshift","stopChild","processQueue","forked","id","c","send","exitCode","on","once","code","kill","unref","data","console","error","clearTimeout","timer","$error","e","type","TypeError","message","RangeError","EvalError","ReferenceError","SyntaxError","URIError","Error","stack","keys","key","apply","childTimeout","push","childKeys","cka","cks","splice","concat","ending","end","shift","complete","module","exports"],"mappings":"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","file":"farm.js","sourcesContent":["'use strict'\n\nconst DEFAULT_OPTIONS = {\n          workerOptions               : {}\n        , maxCallsPerWorker           : Infinity\n        , maxConcurrentWorkers        : (require('os').cpus() || { length: 1 }).length\n        , maxConcurrentCallsPerWorker : 10\n        , maxConcurrentCalls          : Infinity\n        , maxCallTime                 : Infinity // exceed this and the whole worker is terminated\n        , maxRetries                  : Infinity\n        , forcedKillTime              : 100\n        , autoStart                   : false\n      }\n\nconst fork                    = require('./fork')\n    , TimeoutError            = require('errno').create('TimeoutError')\n    , ProcessTerminatedError  = require('errno').create('ProcessTerminatedError')\n    , MaxConcurrentCallsError = require('errno').create('MaxConcurrentCallsError')\n\n\nfunction Farm (options, path) {\n  this.options     = Object.assign({}, DEFAULT_OPTIONS, options)\n  this.path        = path\n  this.activeCalls = 0\n}\n\n\n// make a handle to pass back in the form of an external API\nFarm.prototype.mkhandle = function (method) {\n  return function () {\n    let args = Array.prototype.slice.call(arguments)\n    if (this.activeCalls >= this.options.maxConcurrentCalls) {\n      let err = new MaxConcurrentCallsError('Too many concurrent calls (' + this.activeCalls + ')')\n      if (typeof args[args.length - 1] == 'function')\n        return process.nextTick(args[args.length - 1].bind(null, err))\n      throw err\n    }\n    this.addCall({\n        method   : method\n      , callback : args.pop()\n      , args     : args\n      , retries  : 0\n    })\n  }.bind(this)\n}\n\n\n// a constructor of sorts\nFarm.prototype.setup = function (methods) {\n  let iface\n  if (!methods) { // single-function export\n    iface = this.mkhandle()\n  } else { // multiple functions on the export\n    iface = {}\n    methods.forEach(function (m) {\n      iface[m] = this.mkhandle(m)\n    }.bind(this))\n  }\n\n  this.searchStart    = -1\n  this.childId        = -1\n  this.children       = {}\n  this.activeChildren = 0\n  this.callQueue      = []\n\n  if (this.options.autoStart) {\n    while (this.activeChildren < this.options.maxConcurrentWorkers)\n      this.startChild()\n  }\n\n  return iface\n}\n\n\n// when a child exits, check if there are any outstanding jobs and requeue them\nFarm.prototype.onExit = function (childId) {\n  // delay this to give any sends a chance to finish\n  setTimeout(function () {\n    let doQueue = false\n    if (this.children[childId] && this.children[childId].activeCalls) {\n      this.children[childId].calls.forEach(function (call, i) {\n        if (!call) return\n        else if (call.retries >= this.options.maxRetries) {\n          this.receive({\n              idx   : i\n            , child : childId\n            , args  : [ new ProcessTerminatedError('cancel after ' + call.retries + ' retries!') ]\n          })\n        } else {\n          call.retries++\n          this.callQueue.unshift(call)\n          doQueue = true\n        }\n      }.bind(this))\n    }\n    this.stopChild(childId)\n    doQueue && this.processQueue()\n  }.bind(this), 10)\n}\n\n\n// start a new worker\nFarm.prototype.startChild = function () {\n  this.childId++\n\n  let forked = fork(this.path, this.options.workerOptions)\n    , id     = this.childId\n    , c      = {\n          send        : forked.send\n        , child       : forked.child\n        , calls       : []\n        , activeCalls : 0\n        , exitCode    : null\n      }\n\n  forked.child.on('message', this.receive.bind(this))\n  forked.child.once('exit', function (code) {\n    c.exitCode = code\n    this.onExit(id)\n  }.bind(this))\n\n  this.activeChildren++\n  this.children[id] = c\n}\n\n\n// stop a worker, identified by id\nFarm.prototype.stopChild = function (childId) {\n  let child = this.children[childId]\n  if (child) {\n    child.send('die')\n    setTimeout(function () {\n      if (child.exitCode === null)\n        child.child.kill('SIGKILL')\n    }, this.options.forcedKillTime).unref()\n    ;delete this.children[childId]\n    this.activeChildren--\n  }\n}\n\n\n// called from a child process, the data contains information needed to\n// look up the child and the original call so we can invoke the callback\nFarm.prototype.receive = function (data) {\n  let idx     = data.idx\n    , childId = data.child\n    , args    = data.args\n    , child   = this.children[childId]\n    , call\n\n  if (!child) {\n    return console.error(\n        'Worker Farm: Received message for unknown child. '\n      + 'This is likely as a result of premature child death, '\n      + 'the operation will have been re-queued.'\n    )\n  }\n\n  call = child.calls[idx]\n  if (!call) {\n    return console.error(\n        'Worker Farm: Received message for unknown index for existing child. '\n      + 'This should not happen!'\n    )\n  }\n\n  if (this.options.maxCallTime !== Infinity)\n    clearTimeout(call.timer)\n\n  if (args[0] && args[0].$error == '$error') {\n    let e = args[0]\n    switch (e.type) {\n      case 'TypeError': args[0] = new TypeError(e.message); break\n      case 'RangeError': args[0] = new RangeError(e.message); break\n      case 'EvalError': args[0] = new EvalError(e.message); break\n      case 'ReferenceError': args[0] = new ReferenceError(e.message); break\n      case 'SyntaxError': args[0] = new SyntaxError(e.message); break\n      case 'URIError': args[0] = new URIError(e.message); break\n      default: args[0] = new Error(e.message)\n    }\n    args[0].type = e.type\n    args[0].stack = e.stack\n\n    // Copy any custom properties to pass it on.\n    Object.keys(e).forEach(function(key) {\n      args[0][key] = e[key];\n    });\n  }\n\n  process.nextTick(function () {\n    call.callback.apply(null, args)\n  })\n\n  ;delete child.calls[idx]\n  child.activeCalls--\n  this.activeCalls--\n\n  if (child.calls.length >= this.options.maxCallsPerWorker\n      && !Object.keys(child.calls).length) {\n    // this child has finished its run, kill it\n    this.stopChild(childId)\n  }\n\n  // allow any outstanding calls to be processed\n  this.processQueue()\n}\n\n\nFarm.prototype.childTimeout = function (childId) {\n  let child = this.children[childId]\n    , i\n\n  if (!child)\n    return\n\n  for (i in child.calls) {\n    this.receive({\n        idx   : i\n      , child : childId\n      , args  : [ new TimeoutError('worker call timed out!') ]\n    })\n  }\n  this.stopChild(childId)\n}\n\n\n// send a call to a worker, identified by id\nFarm.prototype.send = function (childId, call) {\n  let child = this.children[childId]\n    , idx   = child.calls.length\n\n  child.calls.push(call)\n  child.activeCalls++\n  this.activeCalls++\n\n  child.send({\n      idx    : idx\n    , child  : childId\n    , method : call.method\n    , args   : call.args\n  })\n\n  if (this.options.maxCallTime !== Infinity) {\n    call.timer =\n      setTimeout(this.childTimeout.bind(this, childId), this.options.maxCallTime)\n  }\n}\n\n\n// a list of active worker ids, in order, but the starting offset is\n// shifted each time this method is called, so we work our way through\n// all workers when handing out jobs\nFarm.prototype.childKeys = function () {\n  let cka = Object.keys(this.children)\n    , cks\n\n  if (this.searchStart >= cka.length - 1)\n    this.searchStart = 0\n  else\n    this.searchStart++\n\n  cks = cka.splice(0, this.searchStart)\n\n  return cka.concat(cks)\n}\n\n\n// Calls are added to a queue, this processes the queue and is called\n// whenever there might be a chance to send more calls to the workers.\n// The various options all impact on when we're able to send calls,\n// they may need to be kept in a queue until a worker is ready.\nFarm.prototype.processQueue = function () {\n  let cka, i = 0, childId\n\n  if (!this.callQueue.length)\n    return this.ending && this.end()\n\n  if (this.activeChildren < this.options.maxConcurrentWorkers)\n    this.startChild()\n\n  for (cka = this.childKeys(); i < cka.length; i++) {\n    childId = +cka[i]\n    if (this.children[childId].activeCalls < this.options.maxConcurrentCallsPerWorker\n        && this.children[childId].calls.length < this.options.maxCallsPerWorker) {\n\n      this.send(childId, this.callQueue.shift())\n      if (!this.callQueue.length)\n        return this.ending && this.end()\n    } /*else {\n      console.log(\n        , this.children[childId].activeCalls < this.options.maxConcurrentCallsPerWorker\n        , this.children[childId].calls.length < this.options.maxCallsPerWorker\n        , this.children[childId].calls.length , this.options.maxCallsPerWorker)\n    }*/\n  }\n\n  if (this.ending)\n    this.end()\n}\n\n\n// add a new call to the call queue, then trigger a process of the queue\nFarm.prototype.addCall = function (call) {\n  if (this.ending)\n    return this.end() // don't add anything new to the queue\n  this.callQueue.push(call)\n  this.processQueue()\n}\n\n\n// kills child workers when they're all done\nFarm.prototype.end = function (callback) {\n  let complete = true\n  if (this.ending === false)\n    return\n  if (callback)\n    this.ending = callback\n  else if (this.ending == null)\n    this.ending = true\n  Object.keys(this.children).forEach(function (child) {\n    if (!this.children[child])\n      return\n    if (!this.children[child].activeCalls)\n      this.stopChild(child)\n    else\n      complete = false\n  }.bind(this))\n\n  if (complete && typeof this.ending == 'function') {\n    process.nextTick(function () {\n      this.ending()\n      this.ending = false\n    }.bind(this))\n  }\n}\n\n\nmodule.exports              = Farm\nmodule.exports.TimeoutError = TimeoutError\n"]}