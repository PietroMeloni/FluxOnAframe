{"version":3,"sources":["../../../../../node_modules/npm/node_modules/hosted-git-info/index.js"],"names":["url","require","gitHosts","GitHost","module","exports","protocolToRepresentationMap","protocolToRepresentation","protocol","substr","slice","authProtocols","cache","fromUrl","giturl","opts","key","JSON","stringify","fixupUnqualifiedGist","isGitHubShorthand","parsed","parseGitUrl","shortcutMatch","match","RegExp","matches","Object","keys","map","gitHostName","gitHostInfo","auth","decodeURIComponent","committish","hash","user","project","defaultRepresentation","host","domain","protocols_re","test","path","pathmatch","matched","replace","ex","URIError","filter","length","arg","parse","slashes","port","hostname","search","query","pathname","href"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\nvar url = require('url')\nvar gitHosts = require('./git-host-info.js')\nvar GitHost = module.exports = require('./git-host.js')\n\nvar protocolToRepresentationMap = {\n  'git+ssh': 'sshurl',\n  'git+https': 'https',\n  'ssh': 'sshurl',\n  'git': 'git'\n}\n\nfunction protocolToRepresentation (protocol) {\n  if (protocol.substr(-1) === ':') protocol = protocol.slice(0, -1)\n  return protocolToRepresentationMap[protocol] || protocol\n}\n\nvar authProtocols = {\n  'git:': true,\n  'https:': true,\n  'git+https:': true,\n  'http:': true,\n  'git+http:': true\n}\n\nvar cache = {}\n\nmodule.exports.fromUrl = function (giturl, opts) {\n  var key = giturl + JSON.stringify(opts || {})\n\n  if (!(key in cache)) {\n    cache[key] = fromUrl(giturl, opts)\n  }\n\n  return cache[key]\n}\n\nfunction fromUrl (giturl, opts) {\n  if (giturl == null || giturl === '') return\n  var url = fixupUnqualifiedGist(\n    isGitHubShorthand(giturl) ? 'github:' + giturl : giturl\n  )\n  var parsed = parseGitUrl(url)\n  var shortcutMatch = url.match(new RegExp('^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^/]*))[/](.+?)(?:[.]git)?($|#)'))\n  var matches = Object.keys(gitHosts).map(function (gitHostName) {\n    try {\n      var gitHostInfo = gitHosts[gitHostName]\n      var auth = null\n      if (parsed.auth && authProtocols[parsed.protocol]) {\n        auth = decodeURIComponent(parsed.auth)\n      }\n      var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null\n      var user = null\n      var project = null\n      var defaultRepresentation = null\n      if (shortcutMatch && shortcutMatch[1] === gitHostName) {\n        user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2])\n        project = decodeURIComponent(shortcutMatch[3])\n        defaultRepresentation = 'shortcut'\n      } else {\n        if (parsed.host !== gitHostInfo.domain) return\n        if (!gitHostInfo.protocols_re.test(parsed.protocol)) return\n        if (!parsed.path) return\n        var pathmatch = gitHostInfo.pathmatch\n        var matched = parsed.path.match(pathmatch)\n        if (!matched) return\n        if (matched[1] != null) user = decodeURIComponent(matched[1].replace(/^:/, ''))\n        if (matched[2] != null) project = decodeURIComponent(matched[2])\n        defaultRepresentation = protocolToRepresentation(parsed.protocol)\n      }\n      return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts)\n    } catch (ex) {\n      if (!(ex instanceof URIError)) throw ex\n    }\n  }).filter(function (gitHostInfo) { return gitHostInfo })\n  if (matches.length !== 1) return\n  return matches[0]\n}\n\nfunction isGitHubShorthand (arg) {\n  // Note: This does not fully test the git ref format.\n  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html\n  //\n  // The only way to do this properly would be to shell out to\n  // git-check-ref-format, and as this is a fast sync function,\n  // we don't want to do that.  Just let git fail if it turns\n  // out that the commit-ish is invalid.\n  // GH usernames cannot start with . or -\n  return /^[^:@%/\\s.-][^:@%/\\s]*[/][^:@\\s/%]+(?:#.*)?$/.test(arg)\n}\n\nfunction fixupUnqualifiedGist (giturl) {\n  // necessary for round-tripping gists\n  var parsed = url.parse(giturl)\n  if (parsed.protocol === 'gist:' && parsed.host && !parsed.path) {\n    return parsed.protocol + '/' + parsed.host\n  } else {\n    return giturl\n  }\n}\n\nfunction parseGitUrl (giturl) {\n  if (typeof giturl !== 'string') giturl = '' + giturl\n  var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/)\n  if (!matched) return url.parse(giturl)\n  return {\n    protocol: 'git+ssh:',\n    slashes: true,\n    auth: matched[1],\n    host: matched[2],\n    port: null,\n    hostname: matched[2],\n    hash: matched[4],\n    search: null,\n    query: null,\n    pathname: '/' + matched[3],\n    path: '/' + matched[3],\n    href: 'git+ssh://' + matched[1] + '@' + matched[2] +\n          '/' + matched[3] + (matched[4] || '')\n  }\n}\n"]}