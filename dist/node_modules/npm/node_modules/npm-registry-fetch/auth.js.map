{"version":3,"sources":["../../../../../node_modules/npm/node_modules/npm-registry-fetch/auth.js"],"names":["config","require","url","module","exports","getAuth","registry","opts","Error","AUTH","regKey","registryKey","doKey","key","alias","addKey","password","Buffer","from","toString","alwaysAuth","obj","scope","objKey","get","parsed","parse","formatted","format","host","pathname","slashes","resolve"],"mappings":"AAAA;;AAEA,IAAMA,SAASC,QAAQ,aAAR,CAAf;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;;AAEAE,OAAOC,OAAP,GAAiBC,OAAjB;AACA,SAASA,OAAT,CAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AAChC,MAAI,CAACD,QAAL,EAAe;AAAE,UAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;AAAyC;AAC1DD,SAAOP,OAAOO,IAAP,CAAP;AACA,MAAIE,OAAO,EAAX;AACA,MAAMC,SAASJ,YAAYK,YAAYL,QAAZ,CAA3B;AACA,MAAMM,QAAQ,SAARA,KAAQ,CAACC,GAAD,EAAMC,KAAN;AAAA,WAAgBC,OAAOR,IAAP,EAAaE,IAAb,EAAmBC,MAAnB,EAA2BG,GAA3B,EAAgCC,KAAhC,CAAhB;AAAA,GAAd;AACAF,QAAM,YAAN,EAAoB,OAApB;AACAA,QAAM,UAAN;AACAA,QAAM,UAAN;AACAA,QAAM,WAAN,EAAmB,UAAnB;AACAA,QAAM,OAAN;AACAA,QAAM,OAAN;AACAA,QAAM,KAAN;AACAA,QAAM,aAAN,EAAqB,YAArB;AACA,MAAIH,KAAKO,QAAT,EAAmB;AACjBP,SAAKO,QAAL,GAAgBC,OAAOC,IAAP,CAAYT,KAAKO,QAAjB,EAA2B,QAA3B,EAAqCG,QAArC,CAA8C,MAA9C,CAAhB;AACD;AACDV,OAAKW,UAAL,GAAkBX,KAAKW,UAAL,KAAoB,OAApB,GAA8B,KAA9B,GAAsC,CAAC,CAACX,KAAKW,UAA/D;AACA,SAAOX,IAAP;AACD;;AAED,SAASM,MAAT,CAAiBR,IAAjB,EAAuBc,GAAvB,EAA4BC,KAA5B,EAAmCT,GAAnC,EAAwCU,MAAxC,EAAgD;AAC9C,MAAIhB,KAAKiB,GAAL,CAASX,GAAT,CAAJ,EAAmB;AACjBQ,QAAIE,UAAUV,GAAd,IAAqBN,KAAKiB,GAAL,CAASX,GAAT,CAArB;AACD;AACD,MAAIS,SAASf,KAAKiB,GAAL,CAAYF,KAAZ,SAAqBT,GAArB,CAAb,EAA0C;AACxCQ,QAAIE,UAAUV,GAAd,IAAqBN,KAAKiB,GAAL,CAAYF,KAAZ,SAAqBT,GAArB,CAArB;AACD;AACF;;AAED;AACA;AACA,SAASF,WAAT,CAAsBL,QAAtB,EAAgC;AAC9B,MAAMmB,SAASvB,IAAIwB,KAAJ,CAAUpB,QAAV,CAAf;AACA,MAAMqB,YAAYzB,IAAI0B,MAAJ,CAAW;AAC3BC,UAAMJ,OAAOI,IADc;AAE3BC,cAAUL,OAAOK,QAFU;AAG3BC,aAASN,OAAOM;AAHW,GAAX,CAAlB;AAKA,SAAO7B,IAAI8B,OAAJ,CAAYL,SAAZ,EAAuB,GAAvB,CAAP;AACD","file":"auth.js","sourcesContent":["'use strict'\n\nconst config = require('./config.js')\nconst url = require('url')\n\nmodule.exports = getAuth\nfunction getAuth (registry, opts) {\n  if (!registry) { throw new Error('registry is required') }\n  opts = config(opts)\n  let AUTH = {}\n  const regKey = registry && registryKey(registry)\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias)\n  doKey('_authToken', 'token')\n  doKey('username')\n  doKey('password')\n  doKey('_password', 'password')\n  doKey('email')\n  doKey('_auth')\n  doKey('otp')\n  doKey('always-auth', 'alwaysAuth')\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8')\n  }\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth\n  return AUTH\n}\n\nfunction addKey (opts, obj, scope, key, objKey) {\n  if (opts.get(key)) {\n    obj[objKey || key] = opts.get(key)\n  }\n  if (scope && opts.get(`${scope}:${key}`)) {\n    obj[objKey || key] = opts.get(`${scope}:${key}`)\n  }\n}\n\n// Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\nfunction registryKey (registry) {\n  const parsed = url.parse(registry)\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  })\n  return url.resolve(formatted, '.')\n}\n"]}