'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HttpErrorBase = function (_Error) {
  _inherits(HttpErrorBase, _Error);

  function HttpErrorBase(method, res, body, spec) {
    _classCallCheck(this, HttpErrorBase);

    var _this = _possibleConstructorReturn(this, (HttpErrorBase.__proto__ || Object.getPrototypeOf(HttpErrorBase)).call(this));

    _this.headers = res.headers.raw();
    _this.statusCode = res.status;
    _this.code = 'E' + res.status;
    _this.method = method;
    _this.uri = res.url;
    _this.body = body;
    return _this;
  }

  return HttpErrorBase;
}(Error);

module.exports.HttpErrorBase = HttpErrorBase;

var HttpErrorGeneral = function (_HttpErrorBase) {
  _inherits(HttpErrorGeneral, _HttpErrorBase);

  function HttpErrorGeneral(method, res, body, spec) {
    _classCallCheck(this, HttpErrorGeneral);

    var _this2 = _possibleConstructorReturn(this, (HttpErrorGeneral.__proto__ || Object.getPrototypeOf(HttpErrorGeneral)).call(this, method, res, body, spec));

    _this2.message = res.status + ' ' + res.statusText + ' - ' + _this2.method.toUpperCase() + ' ' + (_this2.spec || _this2.uri) + (body && body.error ? ' - ' + body.error : '');
    Error.captureStackTrace(_this2, HttpErrorGeneral);
    return _this2;
  }

  return HttpErrorGeneral;
}(HttpErrorBase);

module.exports.HttpErrorGeneral = HttpErrorGeneral;

var HttpErrorAuthOTP = function (_HttpErrorBase2) {
  _inherits(HttpErrorAuthOTP, _HttpErrorBase2);

  function HttpErrorAuthOTP(method, res, body, spec) {
    _classCallCheck(this, HttpErrorAuthOTP);

    var _this3 = _possibleConstructorReturn(this, (HttpErrorAuthOTP.__proto__ || Object.getPrototypeOf(HttpErrorAuthOTP)).call(this, method, res, body, spec));

    _this3.message = 'OTP required for authentication';
    _this3.code = 'EOTP';
    Error.captureStackTrace(_this3, HttpErrorAuthOTP);
    return _this3;
  }

  return HttpErrorAuthOTP;
}(HttpErrorBase);

module.exports.HttpErrorAuthOTP = HttpErrorAuthOTP;

var HttpErrorAuthIPAddress = function (_HttpErrorBase3) {
  _inherits(HttpErrorAuthIPAddress, _HttpErrorBase3);

  function HttpErrorAuthIPAddress(method, res, body, spec) {
    _classCallCheck(this, HttpErrorAuthIPAddress);

    var _this4 = _possibleConstructorReturn(this, (HttpErrorAuthIPAddress.__proto__ || Object.getPrototypeOf(HttpErrorAuthIPAddress)).call(this, method, res, body, spec));

    _this4.message = 'Login is not allowed from your IP address';
    _this4.code = 'EAUTHIP';
    Error.captureStackTrace(_this4, HttpErrorAuthIPAddress);
    return _this4;
  }

  return HttpErrorAuthIPAddress;
}(HttpErrorBase);

module.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress;

var HttpErrorAuthUnknown = function (_HttpErrorBase4) {
  _inherits(HttpErrorAuthUnknown, _HttpErrorBase4);

  function HttpErrorAuthUnknown(method, res, body, spec) {
    _classCallCheck(this, HttpErrorAuthUnknown);

    var _this5 = _possibleConstructorReturn(this, (HttpErrorAuthUnknown.__proto__ || Object.getPrototypeOf(HttpErrorAuthUnknown)).call(this, method, res, body, spec));

    _this5.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate');
    Error.captureStackTrace(_this5, HttpErrorAuthUnknown);
    return _this5;
  }

  return HttpErrorAuthUnknown;
}(HttpErrorBase);

module.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown;
//# sourceMappingURL=errors.js.map