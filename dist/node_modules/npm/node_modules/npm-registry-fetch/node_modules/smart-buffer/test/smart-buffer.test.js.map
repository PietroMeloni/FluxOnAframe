{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/smart-buffer/test/smart-buffer.test.js"],"names":["SmartBuffer","require","assert","describe","buff","Buffer","reader","it","strictEqual","deepEqual","toBuffer","encoding","size","length","throws","Error","TypeError","writeInt8","writeUInt8","writeInt16BE","writeInt16LE","writeUInt16BE","writeUInt16LE","writeInt32BE","writeInt32LE","writeUInt32BE","writeUInt32LE","writeFloatBE","writeFloatLE","writeDoubleBE","writeDoubleLE","readInt8","readUInt8","readInt16BE","readInt16LE","readUInt16BE","readUInt16LE","readInt32BE","readInt32LE","readUInt32BE","readUInt32LE","closeTo","readFloatBE","readFloatLE","readDoubleBE","readDoubleLE","writeStringNT","writeString","readStringNT","readString","str","writer","skipTo","frontBuff","writeBuffer","readBuff","readBuffer","writeBufferNT","console","log","readBufferNT","read1","read2","equal","remaining","largeBuff","skip","rewind","notStrictEqual","clear","sbuff","toString","str64","destroy","notProperty"],"mappings":"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","file":"smart-buffer.test.js","sourcesContent":["var SmartBuffer = require('../lib/smart-buffer.js');\nvar assert = require('chai').assert;\n\n\ndescribe('Constructing a SmartBuffer', function () {\n    describe('Constructing with an existing Buffer', function () {\n        var buff = new Buffer([0xAA, 0xBB, 0xCC, 0xDD, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99]);\n        var reader = new SmartBuffer(buff);\n\n        it('should have the exact same internal Buffer when constructed with a Buffer', function () {\n            assert.strictEqual(reader.buff, buff);\n        });\n\n        it('should return a buffer with the same content', function () {\n            assert.deepEqual(reader.toBuffer(), buff);\n        });\n    });\n\n    describe('Constructing with an existing Buffer and setting the encoding', function () {\n        var buff = new Buffer([0xAA, 0xBB, 0xCC, 0xDD, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99]);\n        var reader = new SmartBuffer(buff, 'ascii');\n\n        it('should have the exact same internal Buffer', function () {\n            assert.strictEqual(reader.buff, buff);\n        });\n\n        it('should have the same encoding that was set', function () {\n            assert.strictEqual(reader.encoding, 'ascii');\n        });\n    });\n\n    describe('Constructing with a specified size', function () {\n        var size = 128;\n        var reader = new SmartBuffer(size);\n\n        it('should have an internal Buffer with the same length as the size defined in the constructor', function () {\n            assert.strictEqual(reader.buff.length, size);\n        });\n    });\n\n    describe('Constructing with a specified encoding', function () {\n        var encoding = 'utf8';\n\n        it('should have an internal encoding with the encoding given to the constructor (1st argument)', function () {\n            var reader = new SmartBuffer(encoding);\n            assert.strictEqual(reader.encoding, encoding);\n        });\n\n        it('should have an internal encoding with the encoding given to the constructor (2nd argument)', function () {\n            var reader = new SmartBuffer(1024, encoding);\n            assert.strictEqual(reader.encoding, encoding);\n        });\n\n    });\n\n    describe('Constructing with invalid parameters', function () {\n        it('should throw an exception when given an invalid number size', function () {\n            assert.throws(function () {\n                var reader = new SmartBuffer(-100);\n            }, Error);\n        });\n\n        it('should throw an exception when give a invalid encoding', function () {\n            assert.throws(function () {\n                var reader = new SmartBuffer('invalid');\n            }, Error);\n\n            assert.throws(function () {\n                var reader = new SmartBuffer(1024, 'invalid');\n            }, Error);\n        });\n\n        it('should throw and exception when given an object that is not a Buffer', function () {\n            assert.throws(function () {\n                var reader = new SmartBuffer(null);\n            }, TypeError);\n        });\n    });\n});\n\n\ndescribe('Reading/Writing To/From SmartBuffer', function () {\n    /**\n     * Technically, if one of these works, they all should. But they're all here anyways.\n     */\n\n    describe('Numeric Values', function () {\n        var reader = new SmartBuffer();\n        reader.writeInt8(0x44);\n        reader.writeUInt8(0xFF);\n        reader.writeInt16BE(0x6699);\n        reader.writeInt16LE(0x6699);\n        reader.writeUInt16BE(0xFFDD);\n        reader.writeUInt16LE(0xFFDD);\n        reader.writeInt32BE(0x77889900);\n        reader.writeInt32LE(0x77889900);\n        reader.writeUInt32BE(0xFFDDCCBB);\n        reader.writeUInt32LE(0xFFDDCCBB);\n        reader.writeFloatBE(1.234);\n        reader.writeFloatLE(1.234);\n        reader.writeDoubleBE(1.234567890);\n        reader.writeDoubleLE(1.234567890);\n\n        it('should equal the correct values that were written above', function () {\n            assert.strictEqual(reader.readInt8(), 0x44);\n            assert.strictEqual(reader.readUInt8(), 0xFF);\n            assert.strictEqual(reader.readInt16BE(), 0x6699);\n            assert.strictEqual(reader.readInt16LE(), 0x6699);\n            assert.strictEqual(reader.readUInt16BE(), 0xFFDD);\n            assert.strictEqual(reader.readUInt16LE(), 0xFFDD);\n            assert.strictEqual(reader.readInt32BE(), 0x77889900);\n            assert.strictEqual(reader.readInt32LE(), 0x77889900);\n            assert.strictEqual(reader.readUInt32BE(), 0xFFDDCCBB);\n            assert.strictEqual(reader.readUInt32LE(), 0xFFDDCCBB);\n            assert.closeTo(reader.readFloatBE(), 1.234, 0.001);\n            assert.closeTo(reader.readFloatLE(), 1.234, 0.001);\n            assert.closeTo(reader.readDoubleBE(), 1.234567890, 0.001);\n            assert.closeTo(reader.readDoubleLE(), 1.234567890, 0.001);\n        });\n\n    });\n\n    describe('Basic String Values', function () {\n        var reader = new SmartBuffer();\n        reader.writeStringNT('hello');\n        reader.writeString('world');\n        reader.writeStringNT('✎✏✎✏✎✏');\n\n        it('should equal the correct strings that were written above', function () {\n            assert.strictEqual(reader.readStringNT(), 'hello');\n            assert.strictEqual(reader.readString(5), 'world');\n            assert.strictEqual(reader.readStringNT(), '✎✏✎✏✎✏');\n        });\n    });\n\n    describe('Mixed Encoding Strings', function () {\n        var reader = new SmartBuffer('ascii');\n        reader.writeStringNT('some ascii text');\n        reader.writeStringNT('ѕσмє υтƒ8 тєχт', 'utf8');\n\n        it('should equal the correct strings that were written above', function () {\n            assert.strictEqual(reader.readStringNT(), 'some ascii text');\n            assert.strictEqual(reader.readStringNT('utf8'), 'ѕσмє υтƒ8 тєχт');\n        });\n    });\n\n    describe('Null/non-null terminating strings', function () {\n        var reader = new SmartBuffer();\n        reader.writeString('hello\\0test\\0bleh');\n\n        it('should equal hello', function () {\n            assert.strictEqual(reader.readStringNT(), 'hello');\n        });\n\n        it('should equal: test', function () {\n            assert.strictEqual(reader.readString(4), 'test');\n        });\n\n        it('should have a length of zero', function () {\n            assert.strictEqual(reader.readStringNT().length, 0);\n        });\n\n        it('should equal: bleh', function () {\n            assert.strictEqual(reader.readStringNT(), 'bleh');\n        });\n\n\n    });\n\n    describe('Reading string without specifying length', function () {\n        var str = 'hello123';\n        var writer = new SmartBuffer();\n        writer.writeString(str);\n\n        var reader = new SmartBuffer(writer.toBuffer());\n\n        assert.strictEqual(reader.readString(), str);\n    });\n\n    describe('Write string as specific position', function () {\n        var str = 'hello123';\n        var writer = new SmartBuffer();\n        writer.writeString(str, 10);\n\n        var reader = new SmartBuffer(writer.toBuffer());\n\n        reader.skipTo(10);\n        it('Should read the correct string from the original position it was written to.', function () {\n            assert.strictEqual(reader.readString(), str);\n        });\n\n\n    });\n\n    describe('Buffer Values', function () {\n        describe('Writing buffer to position 0', function () {\n            var buff = new SmartBuffer();\n            var frontBuff = new Buffer([1, 2, 3, 4, 5, 6]);\n            buff.writeStringNT('hello');\n            buff.writeBuffer(frontBuff, 0);\n\n            it('should write the buffer to the front of the smart buffer instance', function () {\n                var readBuff = buff.readBuffer(frontBuff.length);\n                assert.deepEqual(readBuff, frontBuff);\n            });\n        });\n\n        describe('Writing null terminated buffer to position 0', function () {\n            var buff = new SmartBuffer();\n            var frontBuff = new Buffer([1, 2, 3, 4, 5, 6]);\n            buff.writeStringNT('hello');\n            buff.writeBufferNT(frontBuff, 0);\n\n            console.log(buff);\n\n            it('should write the buffer to the front of the smart buffer instance', function () {\n                var readBuff = buff.readBufferNT();\n                console.log(readBuff);\n                assert.deepEqual(readBuff, frontBuff);\n            });\n        });\n\n        describe('Explicit lengths', function () {\n            var buff = new Buffer([0x01, 0x02, 0x04, 0x08, 0x16, 0x32, 0x64]);\n            var reader = new SmartBuffer();\n            reader.writeBuffer(buff);\n\n            it('should equal the buffer that was written above.', function () {\n                assert.deepEqual(reader.readBuffer(7), buff);\n            });\n        });\n\n        describe('Implicit lengths', function () {\n            var buff = new Buffer([0x01, 0x02, 0x04, 0x08, 0x16, 0x32, 0x64]);\n            var reader = new SmartBuffer();\n            reader.writeBuffer(buff);\n\n            it('should equal the buffer that was written above.', function () {\n                assert.deepEqual(reader.readBuffer(), buff);\n            });\n        });\n\n        describe('Null Terminated Buffer Reading', function () {\n            var buff = new SmartBuffer();\n            buff.writeBuffer(new Buffer([0x01, 0x02, 0x03, 0x04, 0x00, 0x01, 0x02, 0x03]));\n\n            var read1 = buff.readBufferNT();\n            var read2 = buff.readBufferNT();\n\n            it('Should return a length of 4 for the four bytes before the first null in the buffer.', function () {\n                assert.equal(read1.length, 4);\n            });\n\n            it('Should return a length of 3 for the three bytes after the first null in the buffer after reading to end.', function () {\n                assert.equal(read2.length, 3);\n            });\n        });\n\n        describe('Null Terminated Buffer Writing', function () {\n            var buff = new SmartBuffer();\n            buff.writeBufferNT(new Buffer([0x01, 0x02, 0x03, 0x04]));\n\n            var read1 = buff.readBufferNT();\n\n            it('Should read the correct null terminated buffer data.', function () {\n                assert.equal(read1.length, 4);\n            });\n\n        })\n\n    });\n\n    describe('Inserting values into specific positions', function () {\n        var reader = new SmartBuffer();\n\n        reader.writeUInt16LE(0x0060);\n        reader.writeStringNT('something');\n        reader.writeUInt32LE(8485934);\n        reader.writeUInt16LE(6699);\n        reader.writeStringNT('else');\n        reader.writeUInt16LE(reader.length - 2, 2);\n\n\n        it('should equal the size of the remaining data in the buffer', function () {\n            reader.readUInt16LE();\n            var size = reader.readUInt16LE();\n            assert.strictEqual(reader.remaining(), size);\n        });\n    });\n\n    describe('Adding more data to the buffer than the internal buffer currently allows.', function () {\n        it('Should automatically adjust internal buffer size when needed', function () {\n            var writer = new SmartBuffer();\n            var largeBuff = new Buffer(10000);\n\n            writer.writeBuffer(largeBuff);\n\n            assert.strictEqual(writer.length, largeBuff.length);\n        });\n    });\n\n});\n\ndescribe('Skipping around data', function () {\n    var writer = new SmartBuffer();\n    writer.writeStringNT('hello');\n    writer.writeUInt16LE(6699);\n    writer.writeStringNT('world!');\n\n    it('Should equal the UInt16 that was written above', function () {\n        var reader = new SmartBuffer(writer.toBuffer());\n        reader.skip(6);\n        assert.strictEqual(reader.readUInt16LE(), 6699);\n        reader.skipTo(0);\n        assert.strictEqual(reader.readStringNT(), 'hello');\n        reader.rewind(6);\n        assert.strictEqual(reader.readStringNT(), 'hello');\n    });\n\n    it('Should throw an error when attempting to skip more bytes than actually exist.', function () {\n        var reader = new SmartBuffer(writer.toBuffer());\n\n        assert.throws(function () {\n            reader.skip(10000);\n        });\n    });\n\n    it('Should throw an error when attempting to skip to a position that does not exist.', function () {\n        var reader = new SmartBuffer(writer.toBuffer());\n\n        assert.throws(function () {\n            reader.skipTo(10000);\n        });\n    });\n\n    it('Should throw an error when attempting to rewind past the start of the buffer.', function () {\n        var buff = new SmartBuffer();\n        assert.throws(function () {\n            buff.rewind(10000);\n        });\n    });\n});\n\ndescribe('Automatic internal buffer resizing', function () {\n    var writer;\n\n    it('Should not throw an error when adding data that is larger than current buffer size (internal resize algo fails)', function () {\n        var str = 'String larger than one byte';\n        writer = new SmartBuffer(1);\n        writer.writeString(str);\n\n        assert.strictEqual(writer.buff.length, str.length);\n\n    });\n\n    it('Should not throw an error when adding data that is larger than current buffer size (internal resize algo succeeds)', function () {\n        writer = new SmartBuffer(100);\n        var buff = new Buffer(105);\n\n        writer.writeBuffer(buff);\n\n        // Test internal array growth algo.\n        assert.strictEqual(writer.buff.length, (100 * 3 / 2 + 1));\n    });\n});\n\ndescribe('Clearing the buffer', function () {\n    var writer = new SmartBuffer();\n    writer.writeString('somedata');\n\n    it('Should contain some data.', function () {\n        assert.notStrictEqual(writer.length, 0);\n    });\n\n    it('Should contain zero data after being cleared.', function () {\n        writer.clear();\n        assert.strictEqual(writer.length, 0);\n    });\n});\n\ndescribe('Displaying the buffer as a string', function () {\n    var buff = new Buffer([1, 2, 3, 4]);\n    var sbuff = new SmartBuffer(buff);\n\n    var str = buff.toString();\n    var str64 = buff.toString('base64');\n\n    it('Should return a valid string representing the internal buffer', function () {\n        assert.strictEqual(str, sbuff.toString());\n    });\n\n    it('Should return a valid base64 string representing the internal buffer', function () {\n        assert.strictEqual(str64, sbuff.toString('base64'));\n    });\n});\n\ndescribe('Destroying the buffer', function () {\n    var writer = new SmartBuffer();\n    writer.writeString('hello123');\n\n    writer.destroy();\n\n    it('Should have a length of zero when buffer is destroyed', function () {\n        assert.strictEqual(0, writer.length);\n    });\n\n    it('Should have no internal buff property when buffer is destroyed', function () {\n        assert.notProperty(writer, 'buff');\n    });\n});"]}