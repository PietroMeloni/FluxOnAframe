{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/cacache/put.js"],"names":["index","require","memo","write","to","module","exports","putData","cache","key","data","opts","then","size","res","insert","integrity","memoize","put","entry","stream","putStream","contentStream","on","int","s","memoData","memoTotal","chunk","enc","cb","push","length","end","Buffer","concat","emit","erred","once","err"],"mappings":"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","file":"put.js","sourcesContent":["'use strict'\n\nconst index = require('./lib/entry-index')\nconst memo = require('./lib/memoization')\nconst write = require('./lib/content/write')\nconst to = require('mississippi').to\n\nmodule.exports = putData\nfunction putData (cache, key, data, opts) {\n  opts = opts || {}\n  return write(cache, data, opts).then(res => {\n    // TODO - stop modifying opts\n    opts.size = res.size\n    return index.insert(cache, key, res.integrity, opts).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts)\n      }\n      return res.integrity\n    })\n  })\n}\n\nmodule.exports.stream = putStream\nfunction putStream (cache, key, opts) {\n  opts = opts || {}\n  let integrity\n  let size\n  const contentStream = write.stream(\n    cache, opts\n  ).on('integrity', int => {\n    integrity = int\n  }).on('size', s => {\n    size = s\n  })\n  let memoData\n  let memoTotal = 0\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) { memoData = [] }\n        memoData.push(chunk)\n        memoTotal += chunk.length\n      }\n      cb()\n    })\n  }, cb => {\n    contentStream.end(() => {\n      // TODO - stop modifying `opts`\n      opts.size = size\n      index.insert(cache, key, integrity, opts).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts)\n        }\n        stream.emit('integrity', integrity)\n        cb()\n      })\n    })\n  })\n  let erred = false\n  stream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    contentStream.emit('error', err)\n  })\n  contentStream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    stream.emit('error', err)\n  })\n  return stream\n}\n"]}