'use strict';

var index = require('./lib/entry-index');
var memo = require('./lib/memoization');
var write = require('./lib/content/write');
var to = require('mississippi').to;

module.exports = putData;
function putData(cache, key, data, opts) {
  opts = opts || {};
  return write(cache, data, opts).then(function (res) {
    // TODO - stop modifying opts
    opts.size = res.size;
    return index.insert(cache, key, res.integrity, opts).then(function (entry) {
      if (opts.memoize) {
        memo.put(cache, entry, data, opts);
      }
      return res.integrity;
    });
  });
}

module.exports.stream = putStream;
function putStream(cache, key, opts) {
  opts = opts || {};
  var integrity = void 0;
  var size = void 0;
  var contentStream = write.stream(cache, opts).on('integrity', function (int) {
    integrity = int;
  }).on('size', function (s) {
    size = s;
  });
  var memoData = void 0;
  var memoTotal = 0;
  var stream = to(function (chunk, enc, cb) {
    contentStream.write(chunk, enc, function () {
      if (opts.memoize) {
        if (!memoData) {
          memoData = [];
        }
        memoData.push(chunk);
        memoTotal += chunk.length;
      }
      cb();
    });
  }, function (cb) {
    contentStream.end(function () {
      // TODO - stop modifying `opts`
      opts.size = size;
      index.insert(cache, key, integrity, opts).then(function (entry) {
        if (opts.memoize) {
          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts);
        }
        stream.emit('integrity', integrity);
        cb();
      });
    });
  });
  var erred = false;
  stream.once('error', function (err) {
    if (erred) {
      return;
    }
    erred = true;
    contentStream.emit('error', err);
  });
  contentStream.once('error', function (err) {
    if (erred) {
      return;
    }
    erred = true;
    stream.emit('error', err);
  });
  return stream;
}
//# sourceMappingURL=put.js.map