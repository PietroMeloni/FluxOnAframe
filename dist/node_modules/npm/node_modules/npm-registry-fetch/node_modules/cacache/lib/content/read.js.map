{"version":3,"sources":["../../../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/cacache/lib/content/read.js"],"names":["BB","require","contentPath","fs","PassThrough","pipe","promisify","ssri","Y","promisifyAll","module","exports","read","cache","integrity","opts","pickContentSri","then","sri","content","cpath","readFileAsync","size","data","length","sizeError","checkData","integrityError","stream","readStream","createReadStream","integrityStream","catch","emit","err","copyFile","copy","dest","copyFileAsync","hasContent","resolve","code","process","platform","stat","_pickContentSri","parse","algo","pickAlgorithm","digests","lstatAsync","any","map","meta","some","call","e","Object","assign","Error","toString","expected","found","path"],"mappings":"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","file":"read.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst contentPath = require('./path')\nconst fs = require('graceful-fs')\nconst PassThrough = require('stream').PassThrough\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst ssri = require('ssri')\nconst Y = require('../util/y.js')\n\nBB.promisifyAll(fs)\n\nmodule.exports = read\nfunction read (cache, integrity, opts) {\n  opts = opts || {}\n  return pickContentSri(cache, integrity).then(content => {\n    const sri = content.sri\n    const cpath = contentPath(cache, sri)\n    return fs.readFileAsync(cpath, null).then(data => {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length)\n      } else if (ssri.checkData(data, sri)) {\n        return data\n      } else {\n        throw integrityError(sri, cpath)\n      }\n    })\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\nfunction readStream (cache, integrity, opts) {\n  opts = opts || {}\n  const stream = new PassThrough()\n  pickContentSri(\n    cache, integrity\n  ).then(content => {\n    const sri = content.sri\n    return pipe(\n      fs.createReadStream(contentPath(cache, sri)),\n      ssri.integrityStream({\n        integrity: sri,\n        size: opts.size\n      }),\n      stream\n    )\n  }).catch(err => {\n    stream.emit('error', err)\n  })\n  return stream\n}\n\nif (fs.copyFile) {\n  module.exports.copy = copy\n}\nfunction copy (cache, integrity, dest, opts) {\n  opts = opts || {}\n  return pickContentSri(cache, integrity).then(content => {\n    const sri = content.sri\n    const cpath = contentPath(cache, sri)\n    return fs.copyFileAsync(cpath, dest).then(() => content.size)\n  })\n}\n\nmodule.exports.hasContent = hasContent\nfunction hasContent (cache, integrity) {\n  if (!integrity) { return BB.resolve(false) }\n  return pickContentSri(cache, integrity)\n  .catch({code: 'ENOENT'}, () => false)\n  .catch({code: 'EPERM'}, err => {\n    if (process.platform !== 'win32') {\n      throw err\n    } else {\n      return false\n    }\n  }).then(content => {\n    if (!content.sri) return false\n    return ({ sri: content.sri, size: content.stat.size })\n  })\n}\n\nmodule.exports._pickContentSri = pickContentSri\nfunction pickContentSri (cache, integrity) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fs.lstatAsync(cpath).then(stat => ({ sri: digests[0], stat }))\n  } else {\n    return BB.any(sri[sri.pickAlgorithm()].map(meta => {\n      return pickContentSri(cache, meta)\n    }))\n    .catch(err => {\n      if ([].some.call(err, e => e.code === 'ENOENT')) {\n        throw Object.assign(\n          new Error('No matching content found for ' + sri.toString()),\n          {code: 'ENOENT'}\n        )\n      } else {\n        throw err[0]\n      }\n    })\n  }\n}\n\nfunction sizeError (expected, found) {\n  var err = new Error(Y`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  var err = new Error(Y`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"]}