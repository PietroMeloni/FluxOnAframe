{"version":3,"sources":["../../../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/cacache/lib/util/move-file.js"],"names":["fs","require","BB","chmod","promisify","unlink","move","pinflight","module","exports","moveFile","src","dest","fromNode","link","err","code","process","platform","cb","then","join","catch","stat"],"mappings":"AAAA;;AAEA,IAAMA,KAAKC,QAAQ,aAAR,CAAX;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,QAAQD,GAAGE,SAAH,CAAaJ,GAAGG,KAAhB,CAAd;AACA,IAAME,SAASH,GAAGE,SAAH,CAAaJ,GAAGK,MAAhB,CAAf;AACA,IAAIC,aAAJ;AACA,IAAIC,kBAAJ;;AAEAC,OAAOC,OAAP,GAAiBC,QAAjB;AACA,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOV,GAAGW,QAAH,CAAY,cAAM;AACvBb,OAAGc,IAAH,CAAQH,GAAR,EAAaC,IAAb,EAAmB,eAAO;AACxB,UAAIG,GAAJ,EAAS;AACP,YAAIA,IAAIC,IAAJ,KAAa,QAAb,IAAyBD,IAAIC,IAAJ,KAAa,OAA1C,EAAmD;AACjD;AACD,SAFD,MAEO,IAAID,IAAIC,IAAJ,KAAa,OAAb,IAAwBC,QAAQC,QAAR,KAAqB,OAAjD,EAA0D;AAC/D;AACD,SAFM,MAEA;AACL,iBAAOC,GAAGJ,GAAH,CAAP;AACD;AACF;AACD,aAAOI,IAAP;AACD,KAXD;AAYD,GAbM,EAaJC,IAbI,CAaC,YAAM;AACZ;AACA,WAAOlB,GAAGmB,IAAH,CAAQhB,OAAOM,GAAP,CAAR,EAAqBM,QAAQC,QAAR,KAAqB,OAArB,IAAgCf,MAAMS,IAAN,EAAY,MAAZ,CAArD,CAAP;AACD,GAhBM,EAgBJU,KAhBI,CAgBE,YAAM;AACb,QAAI,CAACf,SAAL,EAAgB;AAAEA,kBAAYN,QAAQ,kBAAR,CAAZ;AAAyC;AAC3D,WAAOM,UAAU,uBAAuBK,IAAjC,EAAuC,YAAM;AAClD,aAAOV,GAAGE,SAAH,CAAaJ,GAAGuB,IAAhB,EAAsBX,IAAtB,EAA4BU,KAA5B,CAAkC,eAAO;AAC9C,YAAIP,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzB;AACA,gBAAMD,GAAN;AACD;AACD;AACA,YAAI,CAACT,IAAL,EAAW;AAAEA,iBAAOL,QAAQ,mBAAR,CAAP;AAAqC;AAClD,eAAOK,KAAKK,GAAL,EAAUC,IAAV,EAAgB,EAAEV,MAAF,EAAMF,MAAN,EAAhB,CAAP;AACD,OARM,CAAP;AASD,KAVM,CAAP;AAWD,GA7BM,CAAP;AA8BD","file":"move-file.js","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst BB = require('bluebird')\nconst chmod = BB.promisify(fs.chmod)\nconst unlink = BB.promisify(fs.unlink)\nlet move\nlet pinflight\n\nmodule.exports = moveFile\nfunction moveFile (src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return BB.fromNode(cb => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {\n          // file handle stayed open even past graceful-fs limits\n        } else {\n          return cb(err)\n        }\n      }\n      return cb()\n    })\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'))\n  }).catch(() => {\n    if (!pinflight) { pinflight = require('promise-inflight') }\n    return pinflight('cacache-move-file:' + dest, () => {\n      return BB.promisify(fs.stat)(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err\n        }\n        // file doesn't already exist! let's try a rename -> copy fallback\n        if (!move) { move = require('move-concurrently') }\n        return move(src, dest, { BB, fs })\n      })\n    })\n  })\n}\n"]}