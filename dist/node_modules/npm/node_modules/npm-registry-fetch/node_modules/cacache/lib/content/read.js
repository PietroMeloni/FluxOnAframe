'use strict';

var _templateObject = _taggedTemplateLiteral(['Bad data size: expected inserted data to be ', ' bytes, but got ', ' instead'], ['Bad data size: expected inserted data to be ', ' bytes, but got ', ' instead']),
    _templateObject2 = _taggedTemplateLiteral(['Integrity verification failed for ', ' (', ')'], ['Integrity verification failed for ', ' (', ')']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var BB = require('bluebird');

var contentPath = require('./path');
var fs = require('graceful-fs');
var PassThrough = require('stream').PassThrough;
var pipe = BB.promisify(require('mississippi').pipe);
var ssri = require('ssri');
var Y = require('../util/y.js');

BB.promisifyAll(fs);

module.exports = read;
function read(cache, integrity, opts) {
  opts = opts || {};
  return pickContentSri(cache, integrity).then(function (content) {
    var sri = content.sri;
    var cpath = contentPath(cache, sri);
    return fs.readFileAsync(cpath, null).then(function (data) {
      if (typeof opts.size === 'number' && opts.size !== data.length) {
        throw sizeError(opts.size, data.length);
      } else if (ssri.checkData(data, sri)) {
        return data;
      } else {
        throw integrityError(sri, cpath);
      }
    });
  });
}

module.exports.stream = readStream;
module.exports.readStream = readStream;
function readStream(cache, integrity, opts) {
  opts = opts || {};
  var stream = new PassThrough();
  pickContentSri(cache, integrity).then(function (content) {
    var sri = content.sri;
    return pipe(fs.createReadStream(contentPath(cache, sri)), ssri.integrityStream({
      integrity: sri,
      size: opts.size
    }), stream);
  }).catch(function (err) {
    stream.emit('error', err);
  });
  return stream;
}

if (fs.copyFile) {
  module.exports.copy = copy;
}
function copy(cache, integrity, dest, opts) {
  opts = opts || {};
  return pickContentSri(cache, integrity).then(function (content) {
    var sri = content.sri;
    var cpath = contentPath(cache, sri);
    return fs.copyFileAsync(cpath, dest).then(function () {
      return content.size;
    });
  });
}

module.exports.hasContent = hasContent;
function hasContent(cache, integrity) {
  if (!integrity) {
    return BB.resolve(false);
  }
  return pickContentSri(cache, integrity).catch({ code: 'ENOENT' }, function () {
    return false;
  }).catch({ code: 'EPERM' }, function (err) {
    if (process.platform !== 'win32') {
      throw err;
    } else {
      return false;
    }
  }).then(function (content) {
    if (!content.sri) return false;
    return { sri: content.sri, size: content.stat.size };
  });
}

module.exports._pickContentSri = pickContentSri;
function pickContentSri(cache, integrity) {
  var sri = ssri.parse(integrity);
  // If `integrity` has multiple entries, pick the first digest
  // with available local data.
  var algo = sri.pickAlgorithm();
  var digests = sri[algo];
  if (digests.length <= 1) {
    var cpath = contentPath(cache, digests[0]);
    return fs.lstatAsync(cpath).then(function (stat) {
      return { sri: digests[0], stat: stat };
    });
  } else {
    return BB.any(sri[sri.pickAlgorithm()].map(function (meta) {
      return pickContentSri(cache, meta);
    })).catch(function (err) {
      if ([].some.call(err, function (e) {
        return e.code === 'ENOENT';
      })) {
        throw Object.assign(new Error('No matching content found for ' + sri.toString()), { code: 'ENOENT' });
      } else {
        throw err[0];
      }
    });
  }
}

function sizeError(expected, found) {
  var err = new Error(Y(_templateObject, expected, found));
  err.expected = expected;
  err.found = found;
  err.code = 'EBADSIZE';
  return err;
}

function integrityError(sri, path) {
  var err = new Error(Y(_templateObject2, sri, path));
  err.code = 'EINTEGRITY';
  err.sri = sri;
  err.path = path;
  return err;
}
//# sourceMappingURL=read.js.map