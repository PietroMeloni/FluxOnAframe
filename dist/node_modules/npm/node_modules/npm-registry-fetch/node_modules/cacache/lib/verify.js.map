{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/cacache/lib/verify.js"],"names":["BB","require","contentPath","finished","promisify","fixOwner","fs","glob","index","path","rimraf","ssri","promisifyAll","module","exports","verify","cache","opts","log","silly","reduce","markStartTime","fixPerms","garbageCollect","rebuildIndex","cleanTmp","writeVerifile","markEndTime","stats","step","i","label","name","start","Date","resolve","then","s","Object","keys","forEach","k","end","runTime","tap","total","endTime","startTime","mkdirfix","uid","gid","chownr","indexStream","lsStream","liveContent","Set","on","filter","entry","add","integrity","toString","contentDir","_contentDir","join","follow","nodir","nosort","verifiedContent","reclaimedCount","reclaimedSize","badContentCount","keptSize","map","files","f","split","digest","slice","length","algo","fromHex","has","verifyContent","info","valid","size","statAsync","concurrency","filepath","sri","contentInfo","stat","checkStream","createReadStream","catch","err","code","ls","missingContent","rejectedEntries","totalEntries","buckets","entries","hasOwnProperty","hashed","_hashKey","excluded","push","_path","_bucketPath","rebuildBucket","key","bucket","truncateAsync","mapSeries","content","insert","metadata","verifile","writeFileAsync","lastRun","readFileAsync","data"],"mappings":"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","file":"verify.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst contentPath = require('./content/path')\nconst finished = BB.promisify(require('mississippi').finished)\nconst fixOwner = require('./util/fix-owner')\nconst fs = require('graceful-fs')\nconst glob = BB.promisify(require('glob'))\nconst index = require('./entry-index')\nconst path = require('path')\nconst rimraf = BB.promisify(require('rimraf'))\nconst ssri = require('ssri')\n\nBB.promisifyAll(fs)\n\nmodule.exports = verify\nfunction verify (cache, opts) {\n  opts = opts || {}\n  opts.log && opts.log.silly('verify', 'verifying cache at', cache)\n  return BB.reduce([\n    markStartTime,\n    fixPerms,\n    garbageCollect,\n    rebuildIndex,\n    cleanTmp,\n    writeVerifile,\n    markEndTime\n  ], (stats, step, i) => {\n    const label = step.name || `step #${i}`\n    const start = new Date()\n    return BB.resolve(step(cache, opts)).then(s => {\n      s && Object.keys(s).forEach(k => {\n        stats[k] = s[k]\n      })\n      const end = new Date()\n      if (!stats.runTime) { stats.runTime = {} }\n      stats.runTime[label] = end - start\n      return stats\n    })\n  }, {}).tap(stats => {\n    stats.runTime.total = stats.endTime - stats.startTime\n    opts.log && opts.log.silly('verify', 'verification finished for', cache, 'in', `${stats.runTime.total}ms`)\n  })\n}\n\nfunction markStartTime (cache, opts) {\n  return { startTime: new Date() }\n}\n\nfunction markEndTime (cache, opts) {\n  return { endTime: new Date() }\n}\n\nfunction fixPerms (cache, opts) {\n  opts.log && opts.log.silly('verify', 'fixing cache permissions')\n  return fixOwner.mkdirfix(cache, opts.uid, opts.gid).then(() => {\n    // TODO - fix file permissions too\n    return fixOwner.chownr(cache, opts.uid, opts.gid)\n  }).then(() => null)\n}\n\n// Implements a naive mark-and-sweep tracing garbage collector.\n//\n// The algorithm is basically as follows:\n// 1. Read (and filter) all index entries (\"pointers\")\n// 2. Mark each integrity value as \"live\"\n// 3. Read entire filesystem tree in `content-vX/` dir\n// 4. If content is live, verify its checksum and delete it if it fails\n// 5. If content is not marked as live, rimraf it.\n//\nfunction garbageCollect (cache, opts) {\n  opts.log && opts.log.silly('verify', 'garbage collecting content')\n  const indexStream = index.lsStream(cache)\n  const liveContent = new Set()\n  indexStream.on('data', entry => {\n    if (opts && opts.filter && !opts.filter(entry)) { return }\n    liveContent.add(entry.integrity.toString())\n  })\n  return finished(indexStream).then(() => {\n    const contentDir = contentPath._contentDir(cache)\n    return glob(path.join(contentDir, '**'), {\n      follow: false,\n      nodir: true,\n      nosort: true\n    }).then(files => {\n      return BB.resolve({\n        verifiedContent: 0,\n        reclaimedCount: 0,\n        reclaimedSize: 0,\n        badContentCount: 0,\n        keptSize: 0\n      }).tap((stats) => BB.map(files, (f) => {\n        const split = f.split(/[/\\\\]/)\n        const digest = split.slice(split.length - 3).join('')\n        const algo = split[split.length - 4]\n        const integrity = ssri.fromHex(digest, algo)\n        if (liveContent.has(integrity.toString())) {\n          return verifyContent(f, integrity).then(info => {\n            if (!info.valid) {\n              stats.reclaimedCount++\n              stats.badContentCount++\n              stats.reclaimedSize += info.size\n            } else {\n              stats.verifiedContent++\n              stats.keptSize += info.size\n            }\n            return stats\n          })\n        } else {\n          // No entries refer to this content. We can delete.\n          stats.reclaimedCount++\n          return fs.statAsync(f).then(s => {\n            return rimraf(f).then(() => {\n              stats.reclaimedSize += s.size\n              return stats\n            })\n          })\n        }\n      }, {concurrency: opts.concurrency || 20}))\n    })\n  })\n}\n\nfunction verifyContent (filepath, sri) {\n  return fs.statAsync(filepath).then(stat => {\n    const contentInfo = {\n      size: stat.size,\n      valid: true\n    }\n    return ssri.checkStream(\n      fs.createReadStream(filepath),\n      sri\n    ).catch(err => {\n      if (err.code !== 'EINTEGRITY') { throw err }\n      return rimraf(filepath).then(() => {\n        contentInfo.valid = false\n      })\n    }).then(() => contentInfo)\n  }).catch({code: 'ENOENT'}, () => ({size: 0, valid: false}))\n}\n\nfunction rebuildIndex (cache, opts) {\n  opts.log && opts.log.silly('verify', 'rebuilding index')\n  return index.ls(cache).then(entries => {\n    const stats = {\n      missingContent: 0,\n      rejectedEntries: 0,\n      totalEntries: 0\n    }\n    const buckets = {}\n    for (let k in entries) {\n      if (entries.hasOwnProperty(k)) {\n        const hashed = index._hashKey(k)\n        const entry = entries[k]\n        const excluded = opts && opts.filter && !opts.filter(entry)\n        excluded && stats.rejectedEntries++\n        if (buckets[hashed] && !excluded) {\n          buckets[hashed].push(entry)\n        } else if (buckets[hashed] && excluded) {\n          // skip\n        } else if (excluded) {\n          buckets[hashed] = []\n          buckets[hashed]._path = index._bucketPath(cache, k)\n        } else {\n          buckets[hashed] = [entry]\n          buckets[hashed]._path = index._bucketPath(cache, k)\n        }\n      }\n    }\n    return BB.map(Object.keys(buckets), key => {\n      return rebuildBucket(cache, buckets[key], stats, opts)\n    }, {concurrency: opts.concurrency || 20}).then(() => stats)\n  })\n}\n\nfunction rebuildBucket (cache, bucket, stats, opts) {\n  return fs.truncateAsync(bucket._path).then(() => {\n    // This needs to be serialized because cacache explicitly\n    // lets very racy bucket conflicts clobber each other.\n    return BB.mapSeries(bucket, entry => {\n      const content = contentPath(cache, entry.integrity)\n      return fs.statAsync(content).then(() => {\n        return index.insert(cache, entry.key, entry.integrity, {\n          uid: opts.uid,\n          gid: opts.gid,\n          metadata: entry.metadata\n        }).then(() => { stats.totalEntries++ })\n      }).catch({code: 'ENOENT'}, () => {\n        stats.rejectedEntries++\n        stats.missingContent++\n      })\n    })\n  })\n}\n\nfunction cleanTmp (cache, opts) {\n  opts.log && opts.log.silly('verify', 'cleaning tmp directory')\n  return rimraf(path.join(cache, 'tmp'))\n}\n\nfunction writeVerifile (cache, opts) {\n  const verifile = path.join(cache, '_lastverified')\n  opts.log && opts.log.silly('verify', 'writing verifile to ' + verifile)\n  return fs.writeFileAsync(verifile, '' + (+(new Date())))\n}\n\nmodule.exports.lastRun = lastRun\nfunction lastRun (cache) {\n  return fs.readFileAsync(\n    path.join(cache, '_lastverified'), 'utf8'\n  ).then(data => new Date(+data))\n}\n"]}