{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/socks-proxy-agent/index.js"],"names":["tls","url","require","dns","Agent","SocksClient","inherits","module","exports","SocksProxyAgent","opts","parse","Error","call","proxy","Object","assign","host","hostname","port","path","pathname","lookup","protocol","version","TypeError","auth","split","authentication","username","password","userid","prototype","callback","connect","req","fn","onhostconnect","err","socket","s","secureEndpoint","servername","resume","onlookup","ip","options","target","createConnection","ipaddress","type","command"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar tls; // lazy-loaded...\nvar url = require('url');\nvar dns = require('dns');\nvar Agent = require('agent-base');\nvar SocksClient = require('socks');\nvar inherits = require('util').inherits;\n\n/**\n * Module exports.\n */\n\nmodule.exports = SocksProxyAgent;\n\n/**\n * The `SocksProxyAgent`.\n *\n * @api public\n */\n\nfunction SocksProxyAgent(opts) {\n  if (!(this instanceof SocksProxyAgent)) return new SocksProxyAgent(opts);\n  if ('string' == typeof opts) opts = url.parse(opts);\n  if (!opts)\n    throw new Error(\n      'a SOCKS proxy server `host` and `port` must be specified!'\n    );\n  Agent.call(this, opts);\n\n  var proxy = Object.assign({}, opts);\n\n  // prefer `hostname` over `host`, because of `url.parse()`\n  proxy.host = proxy.hostname || proxy.host;\n\n  // SOCKS doesn't *technically* have a default port, but this is\n  // the same default that `curl(1)` uses\n  proxy.port = +proxy.port || 1080;\n\n  if (proxy.host && proxy.path) {\n    // if both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete proxy.path;\n    delete proxy.pathname;\n  }\n\n  // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n  proxy.lookup = false;\n  switch (proxy.protocol) {\n    case 'socks4:':\n      proxy.lookup = true;\n    // pass through\n    case 'socks4a:':\n      proxy.version = 4;\n      break;\n    case 'socks5:':\n      proxy.lookup = true;\n    // pass through\n    case 'socks:': // no version specified, default to 5h\n    case 'socks5h:':\n      proxy.version = 5;\n      break;\n    default:\n      throw new TypeError(\n        'A \"socks\" protocol must be specified! Got: ' + proxy.protocol\n      );\n  }\n\n  if (proxy.auth) {\n    var auth = proxy.auth.split(':');\n    proxy.authentication = { username: auth[0], password: auth[1] };\n    proxy.userid = auth[0];\n  }\n  this.proxy = proxy;\n}\ninherits(SocksProxyAgent, Agent);\n\n/**\n * Initiates a SOCKS connection to the specified SOCKS proxy server,\n * which in turn connects to the specified remote host and port.\n *\n * @api public\n */\n\nSocksProxyAgent.prototype.callback = function connect(req, opts, fn) {\n  var proxy = this.proxy;\n\n  // called once the SOCKS proxy has connected to the specified remote endpoint\n  function onhostconnect(err, socket) {\n    if (err) return fn(err);\n    var s = socket;\n    if (opts.secureEndpoint) {\n      // since the proxy is connecting to an SSL server, we have\n      // to upgrade this socket connection to an SSL connection\n      if (!tls) tls = require('tls');\n      opts.socket = socket;\n      opts.servername = opts.host;\n      opts.host = null;\n      opts.hostname = null;\n      opts.port = null;\n      s = tls.connect(opts);\n    }\n    socket.resume();\n    fn(null, s);\n  }\n\n  // called for the `dns.lookup()` callback\n  function onlookup(err, ip) {\n    if (err) return fn(err);\n    options.target.host = ip;\n    SocksClient.createConnection(options, onhostconnect);\n  }\n\n  var options = {\n    proxy: {\n      ipaddress: proxy.host,\n      port: +proxy.port,\n      type: proxy.version\n    },\n    target: {\n      port: +opts.port\n    },\n    command: 'connect'\n  };\n  if (proxy.authentication) {\n    options.proxy.authentication = proxy.authentication;\n    options.proxy.userid = proxy.userid;\n  }\n\n  if (proxy.lookup) {\n    // client-side DNS resolution for \"4\" and \"5\" socks proxy versions\n    dns.lookup(opts.host, onlookup);\n  } else {\n    // proxy hostname DNS resolution for \"4a\" and \"5h\" socks proxy servers\n    onlookup(null, opts.host);\n  }\n}\n"]}