{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/npm-registry-fetch/node_modules/socks/lib/socks-agent.js"],"names":["tls","require","inherits","EventEmitter","SocksClient","SocksAgent","options","secure","rejectUnauthorized","undefined","prototype","createConnection","req","opts","fn","handler","host","self","target","port","err","socket","info","cleartext","encryptedSocket","servername","connect","on","resume","addRequest","localAddress","path","sync","emitErr","emit","process","nextTick","onSocket","exports","Agent"],"mappings":"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","file":"socks-agent.js","sourcesContent":["var tls = require('tls');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar SocksClient = require('./socks-client.js');\n\nfunction SocksAgent(options, secure, rejectUnauthorized) {\n    this.options = options;\n    this.secure = secure || false;\n    this.rejectUnauthorized = rejectUnauthorized;\n\n    if (this.rejectUnauthorized === undefined) {\n        this.rejectUnauthorized = true;\n    }\n}\n\ninherits(SocksAgent, EventEmitter);\n\nSocksAgent.prototype.createConnection = function(req, opts, fn) {\n    var handler = fn, host, self = this;\n\n    this.options.target = this.options.target || {};\n\n    if (!this.options.target.host) {\n        this.options.target.host = opts.host;\n    }\n\n    if (!this.options.target.port) {\n        this.options.target.port = opts.port;\n    }\n\n    host = this.options.target.host;\n\n    if (this.secure) {\n        handler = function(err, socket, info) {\n            var options, cleartext;\n\n            if (err) {\n                return fn(err);\n            }\n\n            // save encrypted socket\n            self.encryptedSocket = socket;\n\n            options = {\n                socket: socket,\n                servername: host,\n                rejectUnauthorized: self.rejectUnauthorized\n            };\n\n            cleartext = tls.connect(options, function (err) {\n                return fn(err, this);\n            });\n            cleartext.on('error', fn);\n\n            socket.resume();\n        }\n    }\n\n    SocksClient.createConnection(this.options, handler);\n};\n\n/**\n * @see https://www.npmjs.com/package/agent-base\n */\nSocksAgent.prototype.addRequest = function(req, host, port, localAddress) {\n    var opts;\n    if ('object' === typeof host) {\n        // >= v0.11.x API\n        opts = host;\n        if (opts.host && opts.path) {\n            // if both a `host` and `path` are specified then it's most likely the\n            // result of a `url.parse()` call... we need to remove the `path` portion so\n            // that `net.connect()` doesn't attempt to open that as a unix socket file.\n            delete opts.path;\n        }\n    } else {\n        // <= v0.10.x API\n        opts = { host: host, port: port };\n        if (null !== localAddress) {\n            opts.localAddress = localAddress;\n        }\n    }\n\n    var sync = true;\n\n    this.createConnection(req, opts, function (err, socket) {\n        function emitErr () {\n            req.emit('error', err);\n        }\n        if (err) {\n            if (sync) {\n                // need to defer the \"error\" event, when sync, because by now the `req`\n                // instance hasn't event been passed back to the user yet...\n                process.nextTick(emitErr);\n            } else {\n                emitErr();\n            }\n        } else {\n            req.onSocket(socket);\n            //have to resume this socket when node 12\n            socket.resume();\n        }\n    });\n\n    sync = false;\n};\n\nexports.Agent = SocksAgent;\n"]}