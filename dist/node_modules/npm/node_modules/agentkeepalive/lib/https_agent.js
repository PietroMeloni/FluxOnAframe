/**
 * Https Agent base on custom http agent
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var https = require('https');
var HttpAgent = require('./agent');
var OriginalHttpsAgent = https.Agent;

var HttpsAgent = function (_HttpAgent) {
  _inherits(HttpsAgent, _HttpAgent);

  function HttpsAgent(options) {
    _classCallCheck(this, HttpsAgent);

    var _this = _possibleConstructorReturn(this, (HttpsAgent.__proto__ || Object.getPrototypeOf(HttpsAgent)).call(this, options));

    _this.defaultPort = 443;
    _this.protocol = 'https:';
    _this.maxCachedSessions = _this.options.maxCachedSessions;
    if (_this.maxCachedSessions === undefined) {
      _this.maxCachedSessions = 100;
    }

    _this._sessionCache = {
      map: {},
      list: []
    };
    return _this;
  }

  return HttpsAgent;
}(HttpAgent);

['createConnection', 'getName', '_getSession', '_cacheSession',
// https://github.com/nodejs/node/pull/4982
'_evictSession'].forEach(function (method) {
  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {
    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
  }
});

module.exports = HttpsAgent;
//# sourceMappingURL=https_agent.js.map