{"version":3,"sources":["../../../../../node_modules/npm/node_modules/unzip-response/index.js"],"names":["PassThrough","require","zlib","module","exports","indexOf","res","headers","unzip","createUnzip","stream","httpVersion","rawHeaders","trailers","rawTrailers","setTimeout","bind","statusCode","statusMessage","socket","on","err","code","end","emit","pipe"],"mappings":"AAAA;;AACA,IAAMA,cAAcC,QAAQ,QAAR,EAAkBD,WAAtC;AACA,IAAME,OAAOD,QAAQ,MAAR,CAAb;;AAEAE,OAAOC,OAAP,GAAiB,eAAO;AACvB;AACA,KAAI,CAAC,MAAD,EAAS,SAAT,EAAoBC,OAApB,CAA4BC,IAAIC,OAAJ,CAAY,kBAAZ,CAA5B,MAAiE,CAAC,CAAtE,EAAyE;AACxE,SAAOD,GAAP;AACA;;AAED,KAAME,QAAQN,KAAKO,WAAL,EAAd;AACA,KAAMC,SAAS,IAAIV,WAAJ,EAAf;;AAEAU,QAAOC,WAAP,GAAqBL,IAAIK,WAAzB;AACAD,QAAOH,OAAP,GAAiBD,IAAIC,OAArB;AACAG,QAAOE,UAAP,GAAoBN,IAAIM,UAAxB;AACAF,QAAOG,QAAP,GAAkBP,IAAIO,QAAtB;AACAH,QAAOI,WAAP,GAAqBR,IAAIQ,WAAzB;AACAJ,QAAOK,UAAP,GAAoBT,IAAIS,UAAJ,CAAeC,IAAf,CAAoBV,GAApB,CAApB;AACAI,QAAOO,UAAP,GAAoBX,IAAIW,UAAxB;AACAP,QAAOQ,aAAP,GAAuBZ,IAAIY,aAA3B;AACAR,QAAOS,MAAP,GAAgBb,IAAIa,MAApB;;AAEAX,OAAMY,EAAN,CAAS,OAAT,EAAkB,eAAO;AACxB,MAAIC,IAAIC,IAAJ,KAAa,aAAjB,EAAgC;AAC/BZ,UAAOa,GAAP;AACA;AACA;;AAEDb,SAAOc,IAAP,CAAY,OAAZ,EAAqBH,GAArB;AACA,EAPD;;AASAf,KAAImB,IAAJ,CAASjB,KAAT,EAAgBiB,IAAhB,CAAqBf,MAArB;;AAEA,QAAOA,MAAP;AACA,CA/BD","file":"index.js","sourcesContent":["'use strict';\nconst PassThrough = require('stream').PassThrough;\nconst zlib = require('zlib');\n\nmodule.exports = res => {\n\t// TODO: use Array#includes when targeting Node.js 6\n\tif (['gzip', 'deflate'].indexOf(res.headers['content-encoding']) === -1) {\n\t\treturn res;\n\t}\n\n\tconst unzip = zlib.createUnzip();\n\tconst stream = new PassThrough();\n\n\tstream.httpVersion = res.httpVersion;\n\tstream.headers = res.headers;\n\tstream.rawHeaders = res.rawHeaders;\n\tstream.trailers = res.trailers;\n\tstream.rawTrailers = res.rawTrailers;\n\tstream.setTimeout = res.setTimeout.bind(res);\n\tstream.statusCode = res.statusCode;\n\tstream.statusMessage = res.statusMessage;\n\tstream.socket = res.socket;\n\n\tunzip.on('error', err => {\n\t\tif (err.code === 'Z_BUF_ERROR') {\n\t\t\tstream.end();\n\t\t\treturn;\n\t\t}\n\n\t\tstream.emit('error', err);\n\t});\n\n\tres.pipe(unzip).pipe(stream);\n\n\treturn stream;\n};\n"]}