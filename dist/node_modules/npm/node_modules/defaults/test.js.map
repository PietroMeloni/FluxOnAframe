{"version":3,"sources":["../../../../../node_modules/npm/node_modules/defaults/test.js"],"names":["defaults","require","test","t","options","a","ok","end","result","b","equal","d","hello","length","Object","keys"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,IAAR,CAAf;AAAA,IACIC,OAAOD,QAAQ,KAAR,EAAeC,IAD1B;;AAGAA,KAAK,6BAAL,EAAoC,UAASC,CAAT,EAAY;AAC9C,MAAIC,UAAUJ,SAAS,KAAT,EAAgB,EAAEK,GAAI,IAAN,EAAhB,CAAd;AACAF,IAAEG,EAAF,CAAKF,QAAQC,CAAb;AACAF,IAAEI,GAAF;AACD,CAJD;;AAMAL,KAAK,+BAAL,EAAsC,UAASC,CAAT,EAAY;AAChD,MAAIK,SAASR,SAAS,EAAT,EAAa,EAAEK,GAAG,KAAL,EAAYI,GAAG,IAAf,EAAb,CAAb;AACAN,IAAEG,EAAF,CAAKE,OAAOC,CAAZ,EAAe,yBAAf;AACAN,IAAEO,KAAF,CAAQF,OAAOH,CAAf,EAAkB,KAAlB,EAAyB,yBAAzB;AACAF,IAAEI,GAAF;AACD,CALD;;AAOAL,KAAK,yCAAL,EAAgD,UAASC,CAAT,EAAY;AAC1D,MAAIK,SAASR,SAAS,EAAES,GAAG,KAAL,EAAT,EAAuB,EAAEJ,GAAG,KAAL,EAAYI,GAAG,IAAf,EAAvB,CAAb;AACAN,IAAEO,KAAF,CAAQF,OAAOC,CAAf,EAAkB,KAAlB,EAAyB,cAAzB;AACAN,IAAEO,KAAF,CAAQF,OAAOH,CAAf,EAAkB,KAAlB,EAAyB,yBAAzB;AACAF,IAAEI,GAAF;AACD,CALD;;AAOAL,KAAK,sCAAL,EAA6C,UAASC,CAAT,EAAY;AACvD,MAAIQ,IAAI,EAAEN,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAL,EAAcI,GAAG,EAAEG,OAAQ,OAAV,EAAjB,EAAR;AACA,MAAIJ,SAASR,SAAS,EAAT,EAAaW,CAAb,CAAb;AACAR,IAAEO,KAAF,CAAQF,OAAOH,CAAP,CAASQ,MAAjB,EAAyB,CAAzB,EAA4B,0BAA5B;AACAV,IAAEG,EAAF,CAAKE,OAAOH,CAAP,KAAaM,EAAEN,CAApB,EAAuB,0BAAvB;;AAEAF,IAAEO,KAAF,CAAQI,OAAOC,IAAP,CAAYP,OAAOC,CAAnB,EAAsBI,MAA9B,EAAsC,CAAtC,EAAyC,0BAAzC;AACAV,IAAEG,EAAF,CAAKE,OAAOC,CAAP,KAAaE,EAAEF,CAApB,EAAuB,0BAAvB;AACAN,IAAEI,GAAF;AACD,CATD","file":"test.js","sourcesContent":["var defaults = require('./'),\n    test = require('tap').test;\n\ntest(\"ensure options is an object\", function(t) {\n  var options = defaults(false, { a : true });\n  t.ok(options.a);\n  t.end()\n});\n\ntest(\"ensure defaults override keys\", function(t) {\n  var result = defaults({}, { a: false, b: true });\n  t.ok(result.b, 'b merges over undefined');\n  t.equal(result.a, false, 'a merges over undefined');\n  t.end();\n});\n\ntest(\"ensure defined keys are not overwritten\", function(t) {\n  var result = defaults({ b: false }, { a: false, b: true });\n  t.equal(result.b, false, 'b not merged');\n  t.equal(result.a, false, 'a merges over undefined');\n  t.end();\n});\n\ntest(\"ensure defaults clone nested objects\", function(t) {\n  var d = { a: [1,2,3], b: { hello : 'world' } };\n  var result = defaults({}, d);\n  t.equal(result.a.length, 3, 'objects should be clones');\n  t.ok(result.a !== d.a, 'objects should be clones');\n\n  t.equal(Object.keys(result.b).length, 1, 'objects should be clones');\n  t.ok(result.b !== d.b, 'objects should be clones');\n  t.end();\n});\n\n"]}