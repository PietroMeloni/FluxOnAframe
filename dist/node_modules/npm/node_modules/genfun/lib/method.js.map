{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/genfun/lib/method.js"],"names":["Role","require","util","module","exports","Method","genfun","selector","func","method","_rank","minimalSelector","tmpSelector","length","Object","prototype","object","i","hasOwnProperty","call","dispatchableObject","isGenfun","isObjectProto","roleKeyName","defineProperty","value","enumerable","unshift","setRankHierarchyPosition","index","hierarchyPosition","clearRank","isFullySpecified","score","reduce","a","b"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;AAgBA,IAAMA,OAAOC,QAAQ,QAAR,CAAb;AACA,IAAMC,OAAOD,QAAQ,QAAR,CAAb;;AAEAE,OAAOC,OAAP,GAAiBC,MAAjB;AACA,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;AACvC,MAAIC,SAAS,IAAb;AACAA,SAAOH,MAAP,GAAgBA,MAAhB;AACAG,SAAOD,IAAP,GAAcA,IAAd;AACAC,SAAOC,KAAP,GAAe,EAAf;AACAD,SAAOE,eAAP,GAAyB,CAAzB;;AAEA,MAAMC,cAAcL,SAASM,MAAT,GAAkBN,QAAlB,GAA6B,CAACO,OAAOC,SAAR,CAAjD;AACA,OAAK,IAAIC,MAAJ,EAAYC,IAAIL,YAAYC,MAAZ,GAAqB,CAA1C,EAA6CI,KAAK,CAAlD,EAAqDA,GAArD,EAA0D;AACxDD,aAASF,OAAOI,cAAP,CAAsBC,IAAtB,CAA2BP,WAA3B,EAAwCK,CAAxC,IACPL,YAAYK,CAAZ,CADO,GAEPH,OAAOC,SAFT;AAGAC,aAASd,KAAKkB,kBAAL,CAAwBJ,MAAxB,CAAT;AACA,QACE,OAAOA,MAAP,KAAkB,UAAlB,IACA,CAACA,OAAOK,QAFV,EAGE;AACAL,eAASA,OAAOD,SAAhB;AACD;AACD,QAAIE,IAAI,CAAJ,IACA,CAACR,OAAOE,eADR,IAEAT,KAAKoB,aAAL,CAAmBN,MAAnB,CAFJ,EAEgC;AAC9B;AACD,KAJD,MAIO;AACLP,aAAOE,eAAP;AACA,UAAI,CAACG,OAAOI,cAAP,CAAsBC,IAAtB,CAA2BH,MAA3B,EAAmChB,KAAKuB,WAAxC,CAAL,EAA2D;AACzD,YAAIT,OAAOU,cAAX,EAA2B;AACzB;AACAV,iBAAOU,cAAP,CACER,MADF,EACUhB,KAAKuB,WADf,EAC4B,EAACE,OAAO,EAAR,EAAYC,YAAY,KAAxB,EAD5B;AAED,SAJD,MAIO;AACLV,iBAAOhB,KAAKuB,WAAZ,IAA2B,EAA3B;AACD;AACF;AACD;AACA;AACA;AACA;AACAP,aAAOhB,KAAKuB,WAAZ,EAAyBI,OAAzB,CAAiC,IAAI3B,IAAJ,CAASS,MAAT,EAAiBQ,CAAjB,CAAjC;AACD;AACF;AACF;;AAEDZ,OAAOuB,wBAAP,GAAkC,UAACnB,MAAD,EAASoB,KAAT,EAAgBC,iBAAhB,EAAsC;AACtErB,SAAOC,KAAP,CAAamB,KAAb,IAAsBC,iBAAtB;AACD,CAFD;;AAIAzB,OAAO0B,SAAP,GAAmB,kBAAU;AAC3BtB,SAAOC,KAAP,GAAe,EAAf;AACD,CAFD;;AAIAL,OAAO2B,gBAAP,GAA0B,kBAAU;AAClC,OAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIR,OAAOE,eAA3B,EAA4CM,GAA5C,EAAiD;AAC/C,QAAI,CAACR,OAAOC,KAAP,CAAaQ,cAAb,CAA4BD,CAA5B,CAAL,EAAqC;AACnC,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD,CAPD;;AASAZ,OAAO4B,KAAP,GAAe,kBAAU;AACvB;AACA,SAAOxB,OAAOC,KAAP,CAAawB,MAAb,CAAoB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,IAAIC,CAAd;AAAA,GAApB,EAAqC,CAArC,CAAP;AACD,CAHD","file":"method.js","sourcesContent":["'use strict'\n\n/*\n * Method\n *\n * Methods are added, conceptually, to Genfuns, not to objects\n * themselves, although the Genfun object does not have any pointers to\n * method objects.\n *\n * The _rank vector is an internal datastructure used during dispatch\n * to figure out whether a method is applicable, and if so, how to\n * order multiple discovered methods.\n *\n * Right now, the score method on Method does not take into account any\n * ordering, and all arguments to a method are ranked equally for the\n * sake of ordering.\n *\n */\nconst Role = require('./role')\nconst util = require('./util')\n\nmodule.exports = Method\nfunction Method (genfun, selector, func) {\n  var method = this\n  method.genfun = genfun\n  method.func = func\n  method._rank = []\n  method.minimalSelector = 0\n\n  const tmpSelector = selector.length ? selector : [Object.prototype]\n  for (var object, i = tmpSelector.length - 1; i >= 0; i--) {\n    object = Object.hasOwnProperty.call(tmpSelector, i)\n    ? tmpSelector[i]\n    : Object.prototype\n    object = util.dispatchableObject(object)\n    if (\n      typeof object === 'function' &&\n      !object.isGenfun\n    ) {\n      object = object.prototype\n    }\n    if (i > 0 &&\n        !method.minimalSelector &&\n        util.isObjectProto(object)) {\n      continue\n    } else {\n      method.minimalSelector++\n      if (!Object.hasOwnProperty.call(object, Role.roleKeyName)) {\n        if (Object.defineProperty) {\n          // Object.defineProperty is JS 1.8.0+\n          Object.defineProperty(\n            object, Role.roleKeyName, {value: [], enumerable: false})\n        } else {\n          object[Role.roleKeyName] = []\n        }\n      }\n      // XXX HACK - no method replacement now, so we just shove\n      // it in a place where it'll always show up first. This\n      // would probably seriously break method combination if we\n      // had it.\n      object[Role.roleKeyName].unshift(new Role(method, i))\n    }\n  }\n}\n\nMethod.setRankHierarchyPosition = (method, index, hierarchyPosition) => {\n  method._rank[index] = hierarchyPosition\n}\n\nMethod.clearRank = method => {\n  method._rank = []\n}\n\nMethod.isFullySpecified = method => {\n  for (var i = 0; i < method.minimalSelector; i++) {\n    if (!method._rank.hasOwnProperty(i)) {\n      return false\n    }\n  }\n  return true\n}\n\nMethod.score = method => {\n  // TODO - this makes all items in the list equal\n  return method._rank.reduce((a, b) => a + b, 0)\n}\n"]}