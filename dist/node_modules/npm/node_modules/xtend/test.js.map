{"version":3,"sources":["../../../../../node_modules/npm/node_modules/xtend/test.js"],"names":["test","require","extend","mutableExtend","assert","a","b","deepEqual","end","undefined","record","foo","equal","c","bar","Object","create"],"mappings":"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","file":"test.js","sourcesContent":["var test = require(\"tape\")\nvar extend = require(\"./\")\nvar mutableExtend = require(\"./mutable\")\n\ntest(\"merge\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { b: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"replace\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { a: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"bar\" })\n    assert.end()\n})\n\ntest(\"undefined\", function(assert) {\n    var a = { a: undefined }\n    var b = { b: \"foo\" }\n\n    assert.deepEqual(extend(a, b), { a: undefined, b: \"foo\" })\n    assert.deepEqual(extend(b, a), { a: undefined, b: \"foo\" })\n    assert.end()\n})\n\ntest(\"handle 0\", function(assert) {\n    var a = { a: \"default\" }\n    var b = { a: 0 }\n\n    assert.deepEqual(extend(a, b), { a: 0 })\n    assert.deepEqual(extend(b, a), { a: \"default\" })\n    assert.end()\n})\n\ntest(\"is immutable\", function (assert) {\n    var record = {}\n\n    extend(record, { foo: \"bar\" })\n    assert.equal(record.foo, undefined)\n    assert.end()\n})\n\ntest(\"null as argument\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = null\n    var c = void 0\n\n    assert.deepEqual(extend(b, a, c), { foo: \"bar\" })\n    assert.end()\n})\n\ntest(\"mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n\n    mutableExtend(a, { bar: \"baz\" })\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"null prototype\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = Object.create(null)\n    b.b = \"bar\";\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"null prototype mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = Object.create(null)\n    b.bar = \"baz\";\n\n    mutableExtend(a, b)\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n"]}