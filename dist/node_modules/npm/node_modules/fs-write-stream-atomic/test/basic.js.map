{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fs-write-stream-atomic/test/basic.js"],"names":["fs","require","test","path","writeStream","rename","from","to","cb","setTimeout","t","target","resolve","__dirname","n","plan","streams","i","s","on","verifier","push","ev","num","equal","__emittedFinish","res","readFileSync","lines","trim","split","forEach","line","lineno","first","match","cur","resExpr","similar","stream","write","writeFileSync","unlinkSync","end","readdirSync","filter","f","file"],"mappings":"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","file":"basic.js","sourcesContent":["var fs = require('graceful-fs')\nvar test = require('tap').test\nvar path = require('path')\nvar writeStream = require('../index.js')\n\nvar rename = fs.rename\nfs.rename = function (from, to, cb) {\n  setTimeout(function () {\n    rename(from, to, cb)\n  }, 100)\n}\n\ntest('basic', function (t) {\n  // open 10 write streams to the same file.\n  // then write to each of them, and to the target\n  // and verify at the end that each of them does their thing\n  var target = path.resolve(__dirname, 'test.txt')\n  var n = 10\n\n  // We run all of our assertions twice:\n  //   once for finish, once for close\n  // There are 6 assertions, two fixed, plus 4 lines in the file.\n  t.plan(n * 2 * 6)\n\n  var streams = []\n  for (var i = 0; i < n; i++) {\n    var s = writeStream(target)\n    s.on('finish', verifier('finish', i))\n    s.on('close', verifier('close', i))\n    streams.push(s)\n  }\n\n  function verifier (ev, num) {\n    return function () {\n      if (ev === 'close') {\n        t.equal(this.__emittedFinish, true, num + '. closed only after finish')\n      } else {\n        this.__emittedFinish = true\n        t.equal(ev, 'finish', num + '. finished')\n      }\n\n      // make sure that one of the atomic streams won.\n      var res = fs.readFileSync(target, 'utf8')\n      var lines = res.trim().split(/\\n/)\n      lines.forEach(function (line, lineno) {\n        var first = lines[0].match(/\\d+$/)[0]\n        var cur = line.match(/\\d+$/)[0]\n        t.equal(cur, first, num + '. line ' + lineno + ' matches')\n      })\n\n      var resExpr = /^first write \\d+\\nsecond write \\d+\\nthird write \\d+\\nfinal write \\d+\\n$/\n      t.similar(res, resExpr, num + '. content matches')\n    }\n  }\n\n  // now write something to each stream.\n  streams.forEach(function (stream, i) {\n    stream.write('first write ' + i + '\\n')\n  })\n\n  // wait a sec for those writes to go out.\n  setTimeout(function () {\n    // write something else to the target.\n    fs.writeFileSync(target, 'brutality!\\n')\n\n    // write some more stuff.\n    streams.forEach(function (stream, i) {\n      stream.write('second write ' + i + '\\n')\n    })\n\n    setTimeout(function () {\n      // Oops!  Deleted the file!\n      fs.unlinkSync(target)\n\n      // write some more stuff.\n      streams.forEach(function (stream, i) {\n        stream.write('third write ' + i + '\\n')\n      })\n\n      setTimeout(function () {\n        fs.writeFileSync(target, 'brutality TWO!\\n')\n        streams.forEach(function (stream, i) {\n          stream.end('final write ' + i + '\\n')\n        })\n      }, 50)\n    }, 50)\n  }, 50)\n})\n\ntest('cleanup', function (t) {\n  fs.readdirSync(__dirname).filter(function (f) {\n    return f.match(/^test.txt/)\n  }).forEach(function (file) {\n    fs.unlinkSync(path.resolve(__dirname, file))\n  })\n  t.end()\n})\n"]}