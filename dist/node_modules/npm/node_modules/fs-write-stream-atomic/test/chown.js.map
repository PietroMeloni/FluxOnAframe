{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fs-write-stream-atomic/test/chown.js"],"names":["fs","require","path","test","rimraf","writeStream","target","resolve","__dirname","t","plan","stream","chown","uid","process","getuid","gid","getgid","hadError","on","er","console","log","is","end","file","cb","Error","sync"],"mappings":"AAAA;;AACA,IAAIA,KAAKC,QAAQ,aAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,OAAOF,QAAQ,KAAR,EAAeE,IAA1B;AACA,IAAIC,SAASH,QAAQ,QAAR,CAAb;AACA,IAAII,cAAcJ,QAAQ,aAAR,CAAlB;;AAEA,IAAIK,SAASJ,KAAKK,OAAL,CAAaC,SAAb,EAAwB,YAAxB,CAAb;;AAEAL,KAAK,aAAL,EAAoB,UAAUM,CAAV,EAAa;AAC/BA,IAAEC,IAAF,CAAO,CAAP;AACA,MAAIC,SAASN,YAAYC,MAAZ,EAAoB,EAACM,OAAO,EAACC,KAAKC,QAAQC,MAAR,EAAN,EAAwBC,KAAKF,QAAQG,MAAR,EAA7B,EAAR,EAApB,CAAb;AACA,MAAIC,WAAW,KAAf;AACAP,SAAOQ,EAAP,CAAU,OAAV,EAAmB,UAAUC,EAAV,EAAc;AAC/BF,eAAW,IAAX;AACAG,YAAQC,GAAR,CAAY,GAAZ,EAAiBF,EAAjB;AACD,GAHD;AAIAT,SAAOQ,EAAP,CAAU,OAAV,EAAmB,YAAY;AAC7BV,MAAEc,EAAF,CAAKL,QAAL,EAAe,KAAf,EAAsB,wBAAtB;AACD,GAFD;AAGAP,SAAOa,GAAP;AACD,CAZD;;AAcArB,KAAK,aAAL,EAAoB,UAAUM,CAAV,EAAa;AAC/BA,IAAEC,IAAF,CAAO,CAAP;AACAV,KAAGY,KAAH,GAAW,UAAUa,IAAV,EAAgBZ,GAAhB,EAAqBG,GAArB,EAA0BU,EAA1B,EAA8B;AACvCA,OAAG,IAAIC,KAAJ,CAAU,YAAV,CAAH;AACD,GAFD;AAGA,MAAIhB,SAASN,YAAYC,MAAZ,EAAoB,EAACM,OAAO,EAACC,KAAKC,QAAQC,MAAR,EAAN,EAAwBC,KAAKF,QAAQG,MAAR,EAA7B,EAAR,EAApB,CAAb;AACA,MAAIC,WAAW,KAAf;AACAP,SAAOQ,EAAP,CAAU,OAAV,EAAmB,UAAUC,EAAV,EAAc;AAC/BF,eAAW,IAAX;AACAG,YAAQC,GAAR,CAAY,GAAZ,EAAiBF,EAAjB;AACD,GAHD;AAIAT,SAAOQ,EAAP,CAAU,OAAV,EAAmB,YAAY;AAC7BV,MAAEc,EAAF,CAAKL,QAAL,EAAe,IAAf,EAAqB,oBAArB;AACD,GAFD;AAGAP,SAAOa,GAAP;AACD,CAfD;;AAiBArB,KAAK,SAAL,EAAgB,UAAUM,CAAV,EAAa;AAC3BL,SAAOwB,IAAP,CAAYtB,MAAZ;AACAG,IAAEe,GAAF;AACD,CAHD","file":"chown.js","sourcesContent":["'use strict'\nvar fs = require('graceful-fs')\nvar path = require('path')\nvar test = require('tap').test\nvar rimraf = require('rimraf')\nvar writeStream = require('../index.js')\n\nvar target = path.resolve(__dirname, 'test-chown')\n\ntest('chown works', function (t) {\n  t.plan(1)\n  var stream = writeStream(target, {chown: {uid: process.getuid(), gid: process.getgid()}})\n  var hadError = false\n  stream.on('error', function (er) {\n    hadError = true\n    console.log('#', er)\n  })\n  stream.on('close', function () {\n    t.is(hadError, false, 'no errors before close')\n  })\n  stream.end()\n})\n\ntest('chown fails', function (t) {\n  t.plan(1)\n  fs.chown = function (file, uid, gid, cb) {\n    cb(new Error('TEST BREAK'))\n  }\n  var stream = writeStream(target, {chown: {uid: process.getuid(), gid: process.getgid()}})\n  var hadError = false\n  stream.on('error', function (er) {\n    hadError = true\n    console.log('#', er)\n  })\n  stream.on('close', function () {\n    t.is(hadError, true, 'error before close')\n  })\n  stream.end()\n})\n\ntest('cleanup', function (t) {\n  rimraf.sync(target)\n  t.end()\n})\n"]}