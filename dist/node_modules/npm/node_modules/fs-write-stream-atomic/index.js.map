{"version":3,"sources":["../../../../../node_modules/npm/node_modules/fs-write-stream-atomic/index.js"],"names":["fs","require","Writable","util","MurmurHash3","iferr","crypto","murmurhex","hash","ii","arguments","length","result","invocations","getTmpname","filename","__filename","process","pid","setImmediate","global","setTimeout","module","exports","WriteStreamAtomic","inherits","path","options","call","__isWin","hasOwnProperty","isWin","platform","__atomicTarget","__atomicTmp","__atomicChown","chown","__atomicClosed","__atomicStream","WriteStream","once","handleOpen","handleClose","handleError","prototype","emit","event","end","apply","_write","buffer","encoding","cb","flushed","write","writeStream","fd","uid","gid","cleanup","moveIntoPlace","rename","trapWindowsEPERM","err","syscall","code","checkFileHashes","eperm","inprocess","tmpFileHash","createHash","targetFileHash","createReadStream","on","data","enc","update","fileHashError","fileHashComplete","digest","unlink","er","cleanupSync","unlinkSync"],"mappings":"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","file":"index.js","sourcesContent":["var fs = require('graceful-fs')\nvar Writable = require('readable-stream').Writable\nvar util = require('util')\nvar MurmurHash3 = require('imurmurhash')\nvar iferr = require('iferr')\nvar crypto = require('crypto')\n\nfunction murmurhex () {\n  var hash = MurmurHash3('')\n  for (var ii = 0; ii < arguments.length; ++ii) {\n    hash.hash('' + arguments[ii])\n  }\n  return hash.result()\n}\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations)\n}\n\nvar setImmediate = global.setImmediate || setTimeout\n\nmodule.exports = WriteStreamAtomic\n\n// Requirements:\n//   1. Write everything written to the stream to a temp file.\n//   2. If there are no errors:\n//      a. moves the temp file into its final destination\n//      b. emits `finish` & `closed` ONLY after the file is\n//         fully flushed and renamed.\n//   3. If there's an error, removes the temp file.\n\nutil.inherits(WriteStreamAtomic, Writable)\nfunction WriteStreamAtomic (path, options) {\n  if (!(this instanceof WriteStreamAtomic)) {\n    return new WriteStreamAtomic(path, options)\n  }\n  Writable.call(this, options)\n\n  this.__isWin = options && options.hasOwnProperty('isWin') ? options.isWin : process.platform === 'win32'\n\n  this.__atomicTarget = path\n  this.__atomicTmp = getTmpname(path)\n\n  this.__atomicChown = options && options.chown\n\n  this.__atomicClosed = false\n\n  this.__atomicStream = fs.WriteStream(this.__atomicTmp, options)\n\n  this.__atomicStream.once('open', handleOpen(this))\n  this.__atomicStream.once('close', handleClose(this))\n  this.__atomicStream.once('error', handleError(this))\n}\n\n// We have to suppress default finish emitting, because ordinarily it\n// would happen as soon as `end` is called on us and all of the\n// data has been written to our target stream. So we suppress\n// finish from being emitted here, and only emit it after our\n// target stream is closed and we've moved everything around.\nWriteStreamAtomic.prototype.emit = function (event) {\n  if (event === 'finish') return this.__atomicStream.end()\n  return Writable.prototype.emit.apply(this, arguments)\n}\n\nWriteStreamAtomic.prototype._write = function (buffer, encoding, cb) {\n  var flushed = this.__atomicStream.write(buffer, encoding)\n  if (flushed) return cb()\n  this.__atomicStream.once('drain', cb)\n}\n\nfunction handleOpen (writeStream) {\n  return function (fd) {\n    writeStream.emit('open', fd)\n  }\n}\n\nfunction handleClose (writeStream) {\n  return function () {\n    if (writeStream.__atomicClosed) return\n    writeStream.__atomicClosed = true\n    if (writeStream.__atomicChown) {\n      var uid = writeStream.__atomicChown.uid\n      var gid = writeStream.__atomicChown.gid\n      return fs.chown(writeStream.__atomicTmp, uid, gid, iferr(cleanup, moveIntoPlace))\n    } else {\n      moveIntoPlace()\n    }\n  }\n\n  function moveIntoPlace () {\n    fs.rename(writeStream.__atomicTmp, writeStream.__atomicTarget, iferr(trapWindowsEPERM, end))\n  }\n\n  function trapWindowsEPERM (err) {\n    if (writeStream.__isWin &&\n        err.syscall && err.syscall === 'rename' &&\n        err.code && err.code === 'EPERM'\n    ) {\n      checkFileHashes(err)\n    } else {\n      cleanup(err)\n    }\n  }\n\n  function checkFileHashes (eperm) {\n    var inprocess = 2\n    var tmpFileHash = crypto.createHash('sha512')\n    var targetFileHash = crypto.createHash('sha512')\n\n    fs.createReadStream(writeStream.__atomicTmp)\n      .on('data', function (data, enc) { tmpFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n    fs.createReadStream(writeStream.__atomicTarget)\n      .on('data', function (data, enc) { targetFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n\n    function fileHashError () {\n      if (inprocess === 0) return\n      inprocess = 0\n      cleanup(eperm)\n    }\n\n    function fileHashComplete () {\n      if (inprocess === 0) return\n      if (--inprocess) return\n      if (tmpFileHash.digest('hex') === targetFileHash.digest('hex')) {\n        return cleanup()\n      } else {\n        return cleanup(eperm)\n      }\n    }\n  }\n\n  function cleanup (err) {\n    fs.unlink(writeStream.__atomicTmp, function () {\n      if (err) {\n        writeStream.emit('error', err)\n        writeStream.emit('close')\n      } else {\n        end()\n      }\n    })\n  }\n\n  function end () {\n    // We have to use our parent class directly because we suppress `finish`\n    // events fired via our own emit method.\n    Writable.prototype.emit.call(writeStream, 'finish')\n\n    // Delay the close to provide the same temporal separation a physical\n    // file operation would have– that is, the close event is emitted only\n    // after the async close operation completes.\n    setImmediate(function () {\n      writeStream.emit('close')\n    })\n  }\n}\n\nfunction handleError (writeStream) {\n  return function (er) {\n    cleanupSync()\n    writeStream.emit('error', er)\n    writeStream.__atomicClosed = true\n    writeStream.emit('close')\n  }\n  function cleanupSync () {\n    try {\n      fs.unlinkSync(writeStream.__atomicTmp)\n    } finally {\n      return\n    }\n  }\n}\n"]}