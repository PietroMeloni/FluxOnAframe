{"version":3,"sources":["../../../../../node_modules/npm/node_modules/sha/index.js"],"names":["Transform","require","crypto","fs","exports","check","checkSync","get","getSync","stream","file","expected","options","cb","undefined","toLowerCase","trim","er","actual","message","Error","ex","algorithm","hash","createHash","source","createReadStream","errState","on","chunk","update","digest","readFileSync","_transform","encoding","callback","push","_flush"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nvar Transform = require('stream').Transform || require('readable-stream').Transform\nvar crypto = require('crypto')\nvar fs = require('graceful-fs')\n\nexports.check = check\nexports.checkSync = checkSync\nexports.get = get\nexports.getSync = getSync\nexports.stream = stream\n\nfunction check(file, expected, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = undefined\n  }\n  expected = expected.toLowerCase().trim()\n  get(file, options, function (er, actual) {\n    if (er) {\n      if (er.message) er.message += ' while getting shasum for ' + file\n      return cb(er)\n    }\n    if (actual === expected) return cb(null)\n    cb(new Error(\n        'shasum check failed for ' + file + '\\n'\n      + 'Expected: ' + expected + '\\n'\n      + 'Actual:   ' + actual))\n  })\n}\nfunction checkSync(file, expected, options) {\n  expected = expected.toLowerCase().trim()\n  var actual\n  try {\n    actual = getSync(file, options)\n  } catch (er) {\n    if (er.message) er.message += ' while getting shasum for ' + file\n    throw er\n  }\n  if (actual !== expected) {\n    var ex = new Error(\n        'shasum check failed for ' + file + '\\n'\n      + 'Expected: ' + expected + '\\n'\n      + 'Actual:   ' + actual)\n    throw ex\n  }\n}\n\n\nfunction get(file, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = undefined\n  }\n  options = options || {}\n  var algorithm = options.algorithm || 'sha1'\n  var hash = crypto.createHash(algorithm)\n  var source = fs.createReadStream(file)\n  var errState = null\n  source\n    .on('error', function (er) {\n      if (errState) return\n      return cb(errState = er)\n    })\n    .on('data', function (chunk) {\n      if (errState) return\n      hash.update(chunk)\n    })\n    .on('end', function () {\n      if (errState) return\n      var actual = hash.digest(\"hex\").toLowerCase().trim()\n      cb(null, actual)\n    })\n}\n\nfunction getSync(file, options) {\n  options = options || {}\n  var algorithm = options.algorithm || 'sha1'\n  var hash = crypto.createHash(algorithm)\n  var source = fs.readFileSync(file)\n  hash.update(source)\n  return hash.digest(\"hex\").toLowerCase().trim()\n}\n\nfunction stream(expected, options) {\n  expected = expected.toLowerCase().trim()\n  options = options || {}\n  var algorithm = options.algorithm || 'sha1'\n  var hash = crypto.createHash(algorithm)\n\n  var stream = new Transform()\n  stream._transform = function (chunk, encoding, callback) {\n    hash.update(chunk)\n    stream.push(chunk)\n    callback()\n  }\n  stream._flush = function (cb) {\n    var actual = hash.digest(\"hex\").toLowerCase().trim()\n    if (actual === expected) return cb(null)\n    cb(new Error(\n        'shasum check failed for:\\n'\n      + '  Expected: ' + expected + '\\n'\n      + '  Actual:   ' + actual))\n    this.push(null)\n  }\n  return stream\n}"]}