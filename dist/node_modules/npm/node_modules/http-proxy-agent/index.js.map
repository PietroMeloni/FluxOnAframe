{"version":3,"sources":["../../../../../node_modules/npm/node_modules/http-proxy-agent/index.js"],"names":["net","require","tls","url","Agent","inherits","debug","module","exports","HttpProxyAgent","opts","parse","Error","call","proxy","Object","assign","secureProxy","protocol","test","host","hostname","port","path","pathname","prototype","callback","connect","req","fn","parsed","absolute","format","auth","setHeader","Buffer","from","toString","socket","_header","_implicitHeader","output","length","first","endOfHeaders","indexOf","substring"],"mappings":"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","file":"index.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar tls = require('tls');\nvar url = require('url');\nvar Agent = require('agent-base');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('http-proxy-agent');\n\n/**\n * Module exports.\n */\n\nmodule.exports = HttpProxyAgent;\n\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\n\nfunction HttpProxyAgent (opts) {\n  if (!(this instanceof HttpProxyAgent)) return new HttpProxyAgent(opts);\n  if ('string' == typeof opts) opts = url.parse(opts);\n  if (!opts) throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n  debug('creating new HttpProxyAgent instance: %o', opts);\n  Agent.call(this, opts);\n\n  var proxy = Object.assign({}, opts);\n\n  // if `true`, then connect to the proxy server over TLS. defaults to `false`.\n  this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false;\n\n  // prefer `hostname` over `host`, and set the `port` if needed\n  proxy.host = proxy.hostname || proxy.host;\n  proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);\n\n  if (proxy.host && proxy.path) {\n    // if both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete proxy.path;\n    delete proxy.pathname;\n  }\n\n  this.proxy = proxy;\n}\ninherits(HttpProxyAgent, Agent);\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpProxyAgent.prototype.callback = function connect (req, opts, fn) {\n  var proxy = this.proxy;\n\n  // change the `http.ClientRequest` instance's \"path\" field\n  // to the absolute path of the URL that will be requested\n  var parsed = url.parse(req.path);\n  if (null == parsed.protocol) parsed.protocol = 'http:';\n  if (null == parsed.hostname) parsed.hostname = opts.hostname || opts.host;\n  if (null == parsed.port) parsed.port = opts.port;\n  if (parsed.port == 80) {\n    // if port is 80, then we can remove the port so that the\n    // \":80\" portion is not on the produced URL\n    delete parsed.port;\n  }\n  var absolute = url.format(parsed);\n  req.path = absolute;\n\n  // inject the `Proxy-Authorization` header if necessary\n  if (proxy.auth) {\n    req.setHeader(\n      'Proxy-Authorization',\n      'Basic ' + Buffer.from(proxy.auth).toString('base64')\n    );\n  }\n\n  // create a socket connection to the proxy server\n  var socket;\n  if (this.secureProxy) {\n    socket = tls.connect(proxy);\n  } else {\n    socket = net.connect(proxy);\n  }\n\n  // at this point, the http ClientRequest's internal `_header` field might have\n  // already been set. If this is the case then we'll need to re-generate the\n  // string since we just changed the `req.path`\n  if (req._header) {\n    debug('regenerating stored HTTP header string for request');\n    req._header = null;\n    req._implicitHeader();\n    if (req.output && req.output.length > 0) {\n      debug('patching connection write() output buffer with updated header');\n      // the _header has already been queued to be written to the socket\n      var first = req.output[0];\n      var endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n      req.output[0] = req._header + first.substring(endOfHeaders);\n      debug('output buffer: %o', req.output);\n    }\n  }\n\n  fn(null, socket);\n};\n"]}