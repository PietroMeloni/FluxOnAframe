{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/extsprintf/lib/extsprintf.js"],"names":["mod_assert","require","mod_util","exports","sprintf","jsSprintf","printf","jsPrintf","fprintf","jsFprintf","fmt","regex","join","re","RegExp","args","Array","prototype","slice","call","arguments","flags","width","precision","conversion","left","pad","sign","arg","match","ret","argn","equal","exec","substring","length","Error","shift","undefined","doPad","toString","Math","floor","inspect","dumpException","unshift","process","stdout","apply","stream","write","chr","str","ex","constructor","name","stack","cause","cex"],"mappings":"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","file":"extsprintf.js","sourcesContent":["/*\n * extsprintf.js: extended POSIX-style sprintf\n */\n\nvar mod_assert = require('assert');\nvar mod_util = require('util');\n\n/*\n * Public interface\n */\nexports.sprintf = jsSprintf;\nexports.printf = jsPrintf;\nexports.fprintf = jsFprintf;\n\n/*\n * Stripped down version of s[n]printf(3c).  We make a best effort to throw an\n * exception when given a format string we don't understand, rather than\n * ignoring it, so that we won't break existing programs if/when we go implement\n * the rest of this.\n *\n * This implementation currently supports specifying\n *\t- field alignment ('-' flag),\n * \t- zero-pad ('0' flag)\n *\t- always show numeric sign ('+' flag),\n *\t- field width\n *\t- conversions for strings, decimal integers, and floats (numbers).\n *\t- argument size specifiers.  These are all accepted but ignored, since\n *\t  Javascript has no notion of the physical size of an argument.\n *\n * Everything else is currently unsupported, most notably precision, unsigned\n * numbers, non-decimal numbers, and characters.\n */\nfunction jsSprintf(fmt)\n{\n\tvar regex = [\n\t    '([^%]*)',\t\t\t\t/* normal text */\n\t    '%',\t\t\t\t/* start of format */\n\t    '([\\'\\\\-+ #0]*?)',\t\t\t/* flags (optional) */\n\t    '([1-9]\\\\d*)?',\t\t\t/* width (optional) */\n\t    '(\\\\.([1-9]\\\\d*))?',\t\t/* precision (optional) */\n\t    '[lhjztL]*?',\t\t\t/* length mods (ignored) */\n\t    '([diouxXfFeEgGaAcCsSp%jr])'\t/* conversion */\n\t].join('');\n\n\tvar re = new RegExp(regex);\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\tvar flags, width, precision, conversion;\n\tvar left, pad, sign, arg, match;\n\tvar ret = '';\n\tvar argn = 1;\n\n\tmod_assert.equal('string', typeof (fmt));\n\n\twhile ((match = re.exec(fmt)) !== null) {\n\t\tret += match[1];\n\t\tfmt = fmt.substring(match[0].length);\n\n\t\tflags = match[2] || '';\n\t\twidth = match[3] || 0;\n\t\tprecision = match[4] || '';\n\t\tconversion = match[6];\n\t\tleft = false;\n\t\tsign = false;\n\t\tpad = ' ';\n\n\t\tif (conversion == '%') {\n\t\t\tret += '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (args.length === 0)\n\t\t\tthrow (new Error('too few args to sprintf'));\n\n\t\targ = args.shift();\n\t\targn++;\n\n\t\tif (flags.match(/[\\' #]/))\n\t\t\tthrow (new Error(\n\t\t\t    'unsupported flags: ' + flags));\n\n\t\tif (precision.length > 0)\n\t\t\tthrow (new Error(\n\t\t\t    'non-zero precision not supported'));\n\n\t\tif (flags.match(/-/))\n\t\t\tleft = true;\n\n\t\tif (flags.match(/0/))\n\t\t\tpad = '0';\n\n\t\tif (flags.match(/\\+/))\n\t\t\tsign = true;\n\n\t\tswitch (conversion) {\n\t\tcase 's':\n\t\t\tif (arg === undefined || arg === null)\n\t\t\t\tthrow (new Error('argument ' + argn +\n\t\t\t\t    ': attempted to print undefined or null ' +\n\t\t\t\t    'as a string'));\n\t\t\tret += doPad(pad, width, left, arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\t\targ = Math.floor(arg);\n\t\t\t/*jsl:fallthru*/\n\t\tcase 'f':\n\t\t\tsign = sign && arg > 0 ? '+' : '';\n\t\t\tret += sign + doPad(pad, width, left,\n\t\t\t    arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'x':\n\t\t\tret += doPad(pad, width, left, arg.toString(16));\n\t\t\tbreak;\n\n\t\tcase 'j': /* non-standard */\n\t\t\tif (width === 0)\n\t\t\t\twidth = 10;\n\t\t\tret += mod_util.inspect(arg, false, width);\n\t\t\tbreak;\n\n\t\tcase 'r': /* non-standard */\n\t\t\tret += dumpException(arg);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow (new Error('unsupported conversion: ' +\n\t\t\t    conversion));\n\t\t}\n\t}\n\n\tret += fmt;\n\treturn (ret);\n}\n\nfunction jsPrintf() {\n\tvar args = Array.prototype.slice.call(arguments);\n\targs.unshift(process.stdout);\n\tjsFprintf.apply(null, args);\n}\n\nfunction jsFprintf(stream) {\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\treturn (stream.write(jsSprintf.apply(this, args)));\n}\n\nfunction doPad(chr, width, left, str)\n{\n\tvar ret = str;\n\n\twhile (ret.length < width) {\n\t\tif (left)\n\t\t\tret += chr;\n\t\telse\n\t\t\tret = chr + ret;\n\t}\n\n\treturn (ret);\n}\n\n/*\n * This function dumps long stack traces for exceptions having a cause() method.\n * See node-verror for an example.\n */\nfunction dumpException(ex)\n{\n\tvar ret;\n\n\tif (!(ex instanceof Error))\n\t\tthrow (new Error(jsSprintf('invalid type for %%r: %j', ex)));\n\n\t/* Note that V8 prepends \"ex.stack\" with ex.toString(). */\n\tret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;\n\n\tif (ex.cause && typeof (ex.cause) === 'function') {\n\t\tvar cex = ex.cause();\n\t\tif (cex) {\n\t\t\tret += '\\nCaused by: ' + dumpException(cex);\n\t\t}\n\t}\n\n\treturn (ret);\n}\n"]}