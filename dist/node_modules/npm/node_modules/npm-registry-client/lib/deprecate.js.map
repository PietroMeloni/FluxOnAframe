{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/npm-registry-client/lib/deprecate.js"],"names":["module","exports","deprecate","assert","require","semver","uri","params","cb","version","message","auth","validRange","Error","get","er","data","Object","keys","versions","filter","v","satisfies","forEach","deprecated","options","method","body","request","bind"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiBC,SAAjB;;AAEA,IAAIC,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;;AAEA,SAASF,SAAT,CAAoBI,GAApB,EAAyBC,MAAzB,EAAiCC,EAAjC,EAAqC;AACnCL,SAAO,OAAOG,GAAP,KAAe,QAAtB,EAAgC,qCAAhC;AACAH,SAAOI,UAAU,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAnC,EAA6C,+BAA7C;AACAJ,SAAO,OAAOK,EAAP,KAAc,UAArB,EAAiC,iCAAjC;;AAEAL,SAAO,OAAOI,OAAOE,OAAd,KAA0B,QAAjC,EAA2C,gCAA3C;AACAN,SAAO,OAAOI,OAAOG,OAAd,KAA0B,QAAjC,EAA2C,gCAA3C;AACAP,SACEI,OAAOI,IAAP,IAAe,QAAOJ,OAAOI,IAAd,MAAuB,QADxC,EAEE,6BAFF;;AAKA,MAAIF,UAAUF,OAAOE,OAArB;AACA,MAAIC,UAAUH,OAAOG,OAArB;AACA,MAAIC,OAAOJ,OAAOI,IAAlB;;AAEA,MAAIN,OAAOO,UAAP,CAAkBH,OAAlB,MAA+B,IAAnC,EAAyC;AACvC,WAAOD,GAAG,IAAIK,KAAJ,CAAU,4BAA4BJ,OAAtC,CAAH,CAAP;AACD;;AAED,OAAKK,GAAL,CAASR,MAAM,aAAf,EAA8B,EAAEK,MAAMA,IAAR,EAA9B,EAA8C,UAAUI,EAAV,EAAcC,IAAd,EAAoB;AAChE,QAAID,EAAJ,EAAQ,OAAOP,GAAGO,EAAH,CAAP;AACR;AACAE,WAAOC,IAAP,CAAYF,KAAKG,QAAjB,EAA2BC,MAA3B,CAAkC,UAAUC,CAAV,EAAa;AAC7C,aAAOhB,OAAOiB,SAAP,CAAiBD,CAAjB,EAAoBZ,OAApB,CAAP;AACD,KAFD,EAEGc,OAFH,CAEW,UAAUF,CAAV,EAAa;AACtBL,WAAKG,QAAL,CAAcE,CAAd,EAAiBG,UAAjB,GAA8Bd,OAA9B;AACD,KAJD;AAKA;AACA,QAAIe,UAAU;AACZC,cAAQ,KADI;AAEZC,YAAMX,IAFM;AAGZL,YAAMA;AAHM,KAAd;AAKA,SAAKiB,OAAL,CAAatB,GAAb,EAAkBmB,OAAlB,EAA2BjB,EAA3B;AACD,GAf6C,CAe5CqB,IAf4C,CAevC,IAfuC,CAA9C;AAgBD","file":"deprecate.js","sourcesContent":["module.exports = deprecate\n\nvar assert = require('assert')\nvar semver = require('semver')\n\nfunction deprecate (uri, params, cb) {\n  assert(typeof uri === 'string', 'must pass registry URI to deprecate')\n  assert(params && typeof params === 'object', 'must pass params to deprecate')\n  assert(typeof cb === 'function', 'must pass callback to deprecate')\n\n  assert(typeof params.version === 'string', 'must pass version to deprecate')\n  assert(typeof params.message === 'string', 'must pass message to deprecate')\n  assert(\n    params.auth && typeof params.auth === 'object',\n    'must pass auth to deprecate'\n  )\n\n  var version = params.version\n  var message = params.message\n  var auth = params.auth\n\n  if (semver.validRange(version) === null) {\n    return cb(new Error('invalid version range: ' + version))\n  }\n\n  this.get(uri + '?write=true', { auth: auth }, function (er, data) {\n    if (er) return cb(er)\n    // filter all the versions that match\n    Object.keys(data.versions).filter(function (v) {\n      return semver.satisfies(v, version)\n    }).forEach(function (v) {\n      data.versions[v].deprecated = message\n    })\n    // now update the doc on the registry\n    var options = {\n      method: 'PUT',\n      body: data,\n      auth: auth\n    }\n    this.request(uri, options, cb)\n  }.bind(this))\n}\n"]}