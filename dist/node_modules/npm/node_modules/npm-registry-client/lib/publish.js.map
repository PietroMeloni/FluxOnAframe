{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/npm-registry-client/lib/publish.js"],"names":["module","exports","publish","url","require","semver","Stream","assert","fixer","concat","ssri","escaped","name","replace","uri","params","cb","access","indexOf","auth","token","password","username","email","er","Error","code","metadata","fixNameField","strict","allowLegacyCase","version","clean","body","client","sink","tarbuffer","putFirst","call","on","pipe","registry","data","root","_id","description","versions","readme","maintainers","JSON","parse","stringify","tag","config","defaultTag","tbName","tbURI","integrity","fromData","algorithms","dist","toString","shasum","hexDigest","tarball","resolve","_attachments","length","fixed","options","method","request","parsed","json","res","r409","r409b","conflict","statusCode","reason","log","error","current","putNext","newVersion","curVers","Object","keys","map","v","time","valid","filter","conflictError","i","j","maint","pkgid","e"],"mappings":";;;;AAAAA,OAAOC,OAAP,GAAiBC,OAAjB;;AAEA,IAAIC,MAAMC,QAAQ,KAAR,CAAV;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,SAASF,QAAQ,QAAR,EAAkBE,MAA/B;AACA,IAAIC,SAASH,QAAQ,QAAR,CAAb;AACA,IAAII,QAAQJ,QAAQ,wBAAR,EAAkCI,KAA9C;AACA,IAAIC,SAASL,QAAQ,eAAR,CAAb;AACA,IAAIM,OAAON,QAAQ,MAAR,CAAX;;AAEA,SAASO,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOA,KAAKC,OAAL,CAAa,GAAb,EAAkB,KAAlB,CAAP;AACD;;AAED,SAASX,OAAT,CAAkBY,GAAlB,EAAuBC,MAAvB,EAA+BC,EAA/B,EAAmC;AACjCT,SAAO,OAAOO,GAAP,KAAe,QAAtB,EAAgC,mCAAhC;AACAP,SAAOQ,UAAU,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAnC,EAA6C,6BAA7C;AACAR,SAAO,OAAOS,EAAP,KAAc,UAArB,EAAiC,+BAAjC;;AAEA,MAAIC,SAASF,OAAOE,MAApB;AACAV,SACG,CAACU,MAAF,IAAa,CAAC,QAAD,EAAW,YAAX,EAAyBC,OAAzB,CAAiCD,MAAjC,MAA6C,CAAC,CAD7D,EAEE,kEAFF;;AAKA,MAAIE,OAAOJ,OAAOI,IAAlB;AACAZ,SAAOY,QAAQ,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAA/B,EAAyC,2BAAzC;AACA,MAAI,EAAEA,KAAKC,KAAL,IACCD,KAAKE,QAAL,IAAiBF,KAAKG,QAAtB,IAAkCH,KAAKI,KAD1C,CAAJ,EACuD;AACrD,QAAIC,KAAK,IAAIC,KAAJ,CAAU,8BAAV,CAAT;AACAD,OAAGE,IAAH,GAAU,WAAV;AACA,WAAOV,GAAGQ,EAAH,CAAP;AACD;;AAED,MAAIG,WAAWZ,OAAOY,QAAtB;AACApB,SACEoB,YAAY,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QADlC,EAEE,uCAFF;AAIA,MAAI;AACFnB,UAAMoB,YAAN,CAAmBD,QAAnB,EAA6B,EAACE,QAAQ,IAAT,EAAeC,iBAAiB,IAAhC,EAA7B;AACD,GAFD,CAEE,OAAON,EAAP,EAAW;AACX,WAAOR,GAAGQ,EAAH,CAAP;AACD;AACD,MAAIO,UAAU1B,OAAO2B,KAAP,CAAaL,SAASI,OAAtB,CAAd;AACA,MAAI,CAACA,OAAL,EAAc,OAAOf,GAAG,IAAIS,KAAJ,CAAU,qBAAqBE,SAASI,OAAxC,CAAH,CAAP;AACdJ,WAASI,OAAT,GAAmBA,OAAnB;;AAEA,MAAIE,OAAOlB,OAAOkB,IAAlB;AACA1B,SAAO0B,IAAP,EAAa,mCAAb;AACA1B,SAAO0B,gBAAgB3B,MAAvB,EAA+B,iDAA/B;AACA,MAAI4B,SAAS,IAAb;AACA,MAAIC,OAAO1B,OAAO,UAAU2B,SAAV,EAAqB;AACrCC,aAASC,IAAT,CAAcJ,MAAd,EAAsBpB,GAAtB,EAA2Ba,QAA3B,EAAqCS,SAArC,EAAgDnB,MAAhD,EAAwDE,IAAxD,EAA8DH,EAA9D;AACD,GAFU,CAAX;AAGAmB,OAAKI,EAAL,CAAQ,OAAR,EAAiBvB,EAAjB;AACAiB,OAAKO,IAAL,CAAUL,IAAV;AACD;;AAED,SAASE,QAAT,CAAmBI,QAAnB,EAA6BC,IAA7B,EAAmCN,SAAnC,EAA8CnB,MAA9C,EAAsDE,IAAtD,EAA4DH,EAA5D,EAAgE;AAC9D;AACA;AACA;;AAEA,MAAI2B,OAAO;AACTC,SAAKF,KAAK9B,IADD;AAETA,UAAM8B,KAAK9B,IAFF;AAGTiC,iBAAaH,KAAKG,WAHT;AAIT,iBAAa,EAJJ;AAKTC,cAAU,EALD;AAMTC,YAAQL,KAAKK,MAAL,IAAe;AANd,GAAX;;AASA,MAAI9B,MAAJ,EAAY0B,KAAK1B,MAAL,GAAcA,MAAd;;AAEZ,MAAI,CAACE,KAAKC,KAAV,EAAiB;AACfuB,SAAKK,WAAL,GAAmB,CAAC,EAAEpC,MAAMO,KAAKG,QAAb,EAAuBC,OAAOJ,KAAKI,KAAnC,EAAD,CAAnB;AACAmB,SAAKM,WAAL,GAAmBC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeR,KAAKK,WAApB,CAAX,CAAnB;AACD;;AAEDL,OAAKG,QAAL,CAAeJ,KAAKX,OAApB,IAAgCW,IAAhC;AACA,MAAIU,MAAMV,KAAKU,GAAL,IAAY,KAAKC,MAAL,CAAYC,UAAlC;AACAX,OAAK,WAAL,EAAkBS,GAAlB,IAAyBV,KAAKX,OAA9B;;AAEA,MAAIwB,SAASb,KAAK9B,IAAL,GAAY,GAAZ,GAAkB8B,KAAKX,OAAvB,GAAiC,MAA9C;AACA,MAAIyB,QAAQd,KAAK9B,IAAL,GAAY,KAAZ,GAAoB2C,MAAhC;AACA,MAAIE,YAAY/C,KAAKgD,QAAL,CAActB,SAAd,EAAyB;AACvCuB,gBAAY,CAAC,MAAD,EAAS,QAAT;AAD2B,GAAzB,CAAhB;;AAIAjB,OAAKE,GAAL,GAAWF,KAAK9B,IAAL,GAAY,GAAZ,GAAkB8B,KAAKX,OAAlC;AACAW,OAAKkB,IAAL,GAAYlB,KAAKkB,IAAL,IAAa,EAAzB;AACA;AACAlB,OAAKkB,IAAL,CAAUH,SAAV,GAAsBA,UAAU,QAAV,EAAoB,CAApB,EAAuBI,QAAvB,EAAtB;AACA;AACAnB,OAAKkB,IAAL,CAAUE,MAAV,GAAmBL,UAAU,MAAV,EAAkB,CAAlB,EAAqBM,SAArB,EAAnB;AACArB,OAAKkB,IAAL,CAAUI,OAAV,GAAoB7D,IAAI8D,OAAJ,CAAYxB,QAAZ,EAAsBe,KAAtB,EACjB3C,OADiB,CACT,aADS,EACM,SADN,CAApB;;AAGA8B,OAAKuB,YAAL,GAAoB,EAApB;AACAvB,OAAKuB,YAAL,CAAmBX,MAAnB,IAA8B;AAC5B,oBAAgB,0BADY;AAE5B,YAAQnB,UAAUyB,QAAV,CAAmB,QAAnB,CAFoB;AAG5B,cAAUzB,UAAU+B;AAHQ,GAA9B;;AAMA,MAAIC,QAAQjE,IAAI8D,OAAJ,CAAYxB,QAAZ,EAAsB9B,QAAQ+B,KAAK9B,IAAb,CAAtB,CAAZ;AACA,MAAIsB,SAAS,IAAb;AACA,MAAImC,UAAU;AACZC,YAAQ,KADI;AAEZrC,UAAMU,IAFM;AAGZxB,UAAMA;AAHM,GAAd;AAKA,OAAKoD,OAAL,CAAaH,KAAb,EAAoBC,OAApB,EAA6B,UAAU7C,EAAV,EAAcgD,MAAd,EAAsBC,IAAtB,EAA4BC,GAA5B,EAAiC;AAC5D,QAAIC,OAAO,oDAAX;AACA,QAAIC,QAAQ,2BAAZ;AACA,QAAIC,WAAWH,OAAOA,IAAII,UAAJ,KAAmB,GAAzC;AACA,QAAIN,WAAWA,OAAOO,MAAP,KAAkBJ,IAAlB,IAA0BH,OAAOO,MAAP,KAAkBH,KAAvD,CAAJ,EAAmE;AACjEC,iBAAW,IAAX;AACD;;AAED;AACA,QAAIrD,MAAM,CAACqD,QAAX,EAAqB;AACnB3C,aAAO8C,GAAP,CAAWC,KAAX,CAAiB,SAAjB,EAA4B,iBAAiBP,OAAOA,IAAII,UAA5B,CAA5B;AACA,aAAO9D,GAAGQ,EAAH,CAAP;AACD;;AAED,QAAI,CAACA,EAAD,IAAO,CAACqD,QAAZ,EAAsB,OAAO7D,GAAGQ,EAAH,EAAOgD,MAAP,EAAeC,IAAf,EAAqBC,GAArB,CAAP;;AAEtB;AACAxC,WAAOqC,OAAP,CAAeH,QAAQ,aAAvB,EAAsC,EAAEjD,MAAMA,IAAR,EAAtC,EAAsD,UAAUK,EAAV,EAAc0D,OAAd,EAAuB;AAC3E,UAAI1D,EAAJ,EAAQ,OAAOR,GAAGQ,EAAH,CAAP;;AAER2D,cAAQ7C,IAAR,CAAaJ,MAAb,EAAqBO,QAArB,EAA+BC,KAAKX,OAApC,EAA6CY,IAA7C,EAAmDuC,OAAnD,EAA4D/D,IAA5D,EAAkEH,EAAlE;AACD,KAJD;AAKD,GAtBD;AAuBD;;AAED,SAASmE,OAAT,CAAkB1C,QAAlB,EAA4B2C,UAA5B,EAAwCzC,IAAxC,EAA8CuC,OAA9C,EAAuD/D,IAAvD,EAA6DH,EAA7D,EAAiE;AAC/D;AACA;AACA,MAAIqE,UAAUC,OAAOC,IAAP,CAAYL,QAAQpC,QAAR,IAAoB,EAAhC,EAAoC0C,GAApC,CAAwC,UAAUC,CAAV,EAAa;AACjE,WAAOpF,OAAO2B,KAAP,CAAayD,CAAb,EAAgB,IAAhB,CAAP;AACD,GAFa,EAEXhF,MAFW,CAEJ6E,OAAOC,IAAP,CAAYL,QAAQQ,IAAR,IAAgB,EAA5B,EAAgCF,GAAhC,CAAoC,UAAUC,CAAV,EAAa;AACzD,QAAIpF,OAAOsF,KAAP,CAAaF,CAAb,EAAgB,IAAhB,CAAJ,EAA2B,OAAOpF,OAAO2B,KAAP,CAAayD,CAAb,EAAgB,IAAhB,CAAP;AAC5B,GAFS,EAEPG,MAFO,CAEA,UAAUH,CAAV,EAAa;AACrB,WAAOA,CAAP;AACD,GAJS,CAFI,CAAd;;AAQA,MAAIJ,QAAQnE,OAAR,CAAgBkE,UAAhB,MAAgC,CAAC,CAArC,EAAwC;AACtC,WAAOpE,GAAG6E,cAAclD,KAAK/B,IAAnB,EAAyBwE,UAAzB,CAAH,CAAP;AACD;;AAEDF,UAAQpC,QAAR,CAAiBsC,UAAjB,IAA+BzC,KAAKG,QAAL,CAAcsC,UAAd,CAA/B;AACAF,UAAQhB,YAAR,GAAuBgB,QAAQhB,YAAR,IAAwB,EAA/C;AACA,OAAK,IAAI4B,CAAT,IAAcnD,IAAd,EAAoB;AAClB,YAAQmD,CAAR;AACE;AACA,WAAK,WAAL;AACA,WAAK,UAAL;AACA,WAAK,cAAL;AACE,aAAK,IAAIC,CAAT,IAAcpD,KAAKmD,CAAL,CAAd,EAAuB;AACrBZ,kBAAQY,CAAR,EAAWC,CAAX,IAAgBpD,KAAKmD,CAAL,EAAQC,CAAR,CAAhB;AACD;AACD;;AAEF;AACA,WAAK,aAAL;AACE;;AAEF;AACA;AACEb,gBAAQY,CAAR,IAAanD,KAAKmD,CAAL,CAAb;AAhBJ;AAkBD;AACD,MAAIE,QAAQ/C,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeR,KAAKK,WAApB,CAAX,CAAZ;AACAL,OAAKG,QAAL,CAAcsC,UAAd,EAA0BpC,WAA1B,GAAwCgD,KAAxC;;AAEA,MAAIlF,MAAMX,IAAI8D,OAAJ,CAAYxB,QAAZ,EAAsB9B,QAAQgC,KAAK/B,IAAb,CAAtB,CAAV;AACA,MAAIyD,UAAU;AACZC,YAAQ,KADI;AAEZrC,UAAMiD,OAFM;AAGZ/D,UAAMA;AAHM,GAAd;AAKA,OAAKoD,OAAL,CAAazD,GAAb,EAAkBuD,OAAlB,EAA2BrD,EAA3B;AACD;;AAED,SAAS6E,aAAT,CAAwBI,KAAxB,EAA+BlE,OAA/B,EAAwC;AACtC,MAAImE,IAAI,IAAIzE,KAAJ,CAAU,oCAAV,CAAR;AACAyE,IAAExE,IAAF,GAAS,kBAAT;AACAwE,IAAED,KAAF,GAAUA,KAAV;AACAC,IAAEnE,OAAF,GAAYA,OAAZ;AACA,SAAOmE,CAAP;AACD","file":"publish.js","sourcesContent":["module.exports = publish\n\nvar url = require('url')\nvar semver = require('semver')\nvar Stream = require('stream').Stream\nvar assert = require('assert')\nvar fixer = require('normalize-package-data').fixer\nvar concat = require('concat-stream')\nvar ssri = require('ssri')\n\nfunction escaped (name) {\n  return name.replace('/', '%2f')\n}\n\nfunction publish (uri, params, cb) {\n  assert(typeof uri === 'string', 'must pass registry URI to publish')\n  assert(params && typeof params === 'object', 'must pass params to publish')\n  assert(typeof cb === 'function', 'must pass callback to publish')\n\n  var access = params.access\n  assert(\n    (!access) || ['public', 'restricted'].indexOf(access) !== -1,\n    \"if present, access level must be either 'public' or 'restricted'\"\n  )\n\n  var auth = params.auth\n  assert(auth && typeof auth === 'object', 'must pass auth to publish')\n  if (!(auth.token ||\n        (auth.password && auth.username && auth.email))) {\n    var er = new Error('auth required for publishing')\n    er.code = 'ENEEDAUTH'\n    return cb(er)\n  }\n\n  var metadata = params.metadata\n  assert(\n    metadata && typeof metadata === 'object',\n    'must pass package metadata to publish'\n  )\n  try {\n    fixer.fixNameField(metadata, {strict: true, allowLegacyCase: true})\n  } catch (er) {\n    return cb(er)\n  }\n  var version = semver.clean(metadata.version)\n  if (!version) return cb(new Error('invalid semver: ' + metadata.version))\n  metadata.version = version\n\n  var body = params.body\n  assert(body, 'must pass package body to publish')\n  assert(body instanceof Stream, 'package body passed to publish must be a stream')\n  var client = this\n  var sink = concat(function (tarbuffer) {\n    putFirst.call(client, uri, metadata, tarbuffer, access, auth, cb)\n  })\n  sink.on('error', cb)\n  body.pipe(sink)\n}\n\nfunction putFirst (registry, data, tarbuffer, access, auth, cb) {\n  // optimistically try to PUT all in one single atomic thing.\n  // If 409, then GET and merge, try again.\n  // If other error, then fail.\n\n  var root = {\n    _id: data.name,\n    name: data.name,\n    description: data.description,\n    'dist-tags': {},\n    versions: {},\n    readme: data.readme || ''\n  }\n\n  if (access) root.access = access\n\n  if (!auth.token) {\n    root.maintainers = [{ name: auth.username, email: auth.email }]\n    data.maintainers = JSON.parse(JSON.stringify(root.maintainers))\n  }\n\n  root.versions[ data.version ] = data\n  var tag = data.tag || this.config.defaultTag\n  root['dist-tags'][tag] = data.version\n\n  var tbName = data.name + '-' + data.version + '.tgz'\n  var tbURI = data.name + '/-/' + tbName\n  var integrity = ssri.fromData(tarbuffer, {\n    algorithms: ['sha1', 'sha512']\n  })\n\n  data._id = data.name + '@' + data.version\n  data.dist = data.dist || {}\n  // Don't bother having sha1 in the actual integrity field\n  data.dist.integrity = integrity['sha512'][0].toString()\n  // Legacy shasum support\n  data.dist.shasum = integrity['sha1'][0].hexDigest()\n  data.dist.tarball = url.resolve(registry, tbURI)\n    .replace(/^https:\\/\\//, 'http://')\n\n  root._attachments = {}\n  root._attachments[ tbName ] = {\n    'content_type': 'application/octet-stream',\n    'data': tarbuffer.toString('base64'),\n    'length': tarbuffer.length\n  }\n\n  var fixed = url.resolve(registry, escaped(data.name))\n  var client = this\n  var options = {\n    method: 'PUT',\n    body: root,\n    auth: auth\n  }\n  this.request(fixed, options, function (er, parsed, json, res) {\n    var r409 = 'must supply latest _rev to update existing package'\n    var r409b = 'Document update conflict.'\n    var conflict = res && res.statusCode === 409\n    if (parsed && (parsed.reason === r409 || parsed.reason === r409b)) {\n      conflict = true\n    }\n\n    // a 409 is typical here.  GET the data and merge in.\n    if (er && !conflict) {\n      client.log.error('publish', 'Failed PUT ' + (res && res.statusCode))\n      return cb(er)\n    }\n\n    if (!er && !conflict) return cb(er, parsed, json, res)\n\n    // let's see what versions are already published.\n    client.request(fixed + '?write=true', { auth: auth }, function (er, current) {\n      if (er) return cb(er)\n\n      putNext.call(client, registry, data.version, root, current, auth, cb)\n    })\n  })\n}\n\nfunction putNext (registry, newVersion, root, current, auth, cb) {\n  // already have the tardata on the root object\n  // just merge in existing stuff\n  var curVers = Object.keys(current.versions || {}).map(function (v) {\n    return semver.clean(v, true)\n  }).concat(Object.keys(current.time || {}).map(function (v) {\n    if (semver.valid(v, true)) return semver.clean(v, true)\n  }).filter(function (v) {\n    return v\n  }))\n\n  if (curVers.indexOf(newVersion) !== -1) {\n    return cb(conflictError(root.name, newVersion))\n  }\n\n  current.versions[newVersion] = root.versions[newVersion]\n  current._attachments = current._attachments || {}\n  for (var i in root) {\n    switch (i) {\n      // objects that copy over the new stuffs\n      case 'dist-tags':\n      case 'versions':\n      case '_attachments':\n        for (var j in root[i]) {\n          current[i][j] = root[i][j]\n        }\n        break\n\n      // ignore these\n      case 'maintainers':\n        break\n\n      // copy\n      default:\n        current[i] = root[i]\n    }\n  }\n  var maint = JSON.parse(JSON.stringify(root.maintainers))\n  root.versions[newVersion].maintainers = maint\n\n  var uri = url.resolve(registry, escaped(root.name))\n  var options = {\n    method: 'PUT',\n    body: current,\n    auth: auth\n  }\n  this.request(uri, options, cb)\n}\n\nfunction conflictError (pkgid, version) {\n  var e = new Error('cannot modify pre-existing version')\n  e.code = 'EPUBLISHCONFLICT'\n  e.pkgid = pkgid\n  e.version = version\n  return e\n}\n"]}