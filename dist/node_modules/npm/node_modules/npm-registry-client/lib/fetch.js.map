{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/npm-registry-client/lib/fetch.js"],"names":["assert","require","url","request","once","module","exports","fetch","uri","params","cb","client","attempt","operation","makeRequest","call","er","req","retryOnError","retry","log","info","on","res","http","statusCode","removeListener","resume","emit","Error","remote","parsed","parse","href","headers","authify","auth","alwaysAuth","opts","initialize","followRedirect"],"mappings":"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","file":"fetch.js","sourcesContent":["var assert = require('assert')\nvar url = require('url')\n\nvar request = require('request')\nvar once = require('once')\n\nmodule.exports = fetch\n\nfunction fetch (uri, params, cb) {\n  assert(typeof uri === 'string', 'must pass uri to request')\n  assert(params && typeof params === 'object', 'must pass params to request')\n  assert(typeof cb === 'function', 'must pass callback to request')\n\n  cb = once(cb)\n\n  var client = this\n  this.attempt(function (operation) {\n    makeRequest.call(client, uri, params, function (er, req) {\n      if (er) return cb(er)\n\n      req.once('error', retryOnError)\n\n      function retryOnError (er) {\n        if (operation.retry(er)) {\n          client.log.info('retry', 'will retry, error on last attempt: ' + er)\n        } else {\n          cb(er)\n        }\n      }\n\n      req.on('response', function (res) {\n        client.log.http('fetch', '' + res.statusCode, uri)\n        req.removeListener('error', retryOnError)\n\n        var er\n        var statusCode = res && res.statusCode\n        if (statusCode === 200) {\n          res.resume()\n\n          req.once('error', function (er) {\n            res.emit('error', er)\n          })\n\n          return cb(null, res)\n          // Only retry on 408, 5xx or no `response`.\n        } else if (statusCode === 408) {\n          er = new Error('request timed out')\n        } else if (statusCode >= 500) {\n          er = new Error('server error ' + statusCode)\n        }\n\n        if (er && operation.retry(er)) {\n          client.log.info('retry', 'will retry, error on last attempt: ' + er)\n        } else {\n          cb(new Error('fetch failed with status code ' + statusCode))\n        }\n      })\n    })\n  })\n}\n\nfunction makeRequest (remote, params, cb) {\n  var parsed = url.parse(remote)\n  this.log.http('fetch', 'GET', parsed.href)\n\n  var headers = params.headers || {}\n  var er = this.authify(\n    params.auth && params.auth.alwaysAuth,\n    parsed,\n    headers,\n    params.auth\n  )\n  if (er) return cb(er)\n\n  var opts = this.initialize(\n    parsed,\n    'GET',\n    'application/x-tar, application/vnd.github+json; q=0.1',\n    headers\n  )\n  // always want to follow redirects for fetch\n  opts.followRedirect = true\n\n  cb(null, request(opts))\n}\n"]}