{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/npm-registry-client/node_modules/retry/example/stop.js"],"names":["retry","require","attemptAsyncOperation","someInput","cb","opts","retries","factor","minTimeout","maxTimeout","randomize","operation","attempt","currentAttempt","failingAsyncOperation","err","result","message","stop","mainError","errors","console","warn","log","input","setImmediate","bind","Error"],"mappings":";;AAAA,IAAIA,QAAQC,QAAQ,cAAR,CAAZ;;AAEA,SAASC,qBAAT,CAA+BC,SAA/B,EAA0CC,EAA1C,EAA8C;AAC5C,MAAIC,OAAO;AACTC,aAAS,CADA;AAETC,YAAQ,CAFC;AAGTC,gBAAY,IAAI,IAHP;AAITC,gBAAY,IAAI,IAJP;AAKTC,eAAW;AALF,GAAX;AAOA,MAAIC,YAAYX,MAAMW,SAAN,CAAgBN,IAAhB,CAAhB;;AAEAM,YAAUC,OAAV,CAAkB,UAASC,cAAT,EAAyB;AACzCC,0BAAsBX,SAAtB,EAAiC,UAASY,GAAT,EAAcC,MAAd,EAAsB;;AAErD,UAAID,OAAOA,IAAIE,OAAJ,KAAgB,eAA3B,EAA4C;AAC1CN,kBAAUO,IAAV;AACA,eAAOd,GAAGW,GAAH,CAAP;AACD;;AAED,UAAIJ,UAAUX,KAAV,CAAgBe,GAAhB,CAAJ,EAA0B;AACxB;AACD;;AAEDX,SAAGO,UAAUQ,SAAV,EAAH,EAA0BR,UAAUS,MAAV,EAA1B,EAA8CJ,MAA9C;AACD,KAZD;AAaD,GAdD;AAeD;;AAEDd,sBAAsB,YAAtB,EAAoC,UAASa,GAAT,EAAcK,MAAd,EAAsBJ,MAAtB,EAA8B;AAChEK,UAAQC,IAAR,CAAa,MAAb;AACAD,UAAQE,GAAR,CAAYR,GAAZ;;AAEAM,UAAQC,IAAR,CAAa,SAAb;AACAD,UAAQE,GAAR,CAAYP,MAAZ;AACD,CAND;;AAQA,SAASF,qBAAT,CAA+BU,KAA/B,EAAsCpB,EAAtC,EAA0C;AACxC,SAAOqB,aAAarB,GAAGsB,IAAH,CAAQ,IAAR,EAAc,IAAIC,KAAJ,CAAU,eAAV,CAAd,CAAb,CAAP;AACD","file":"stop.js","sourcesContent":["var retry = require('../lib/retry');\n\nfunction attemptAsyncOperation(someInput, cb) {\n  var opts = {\n    retries: 2,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: 2 * 1000,\n    randomize: true\n  };\n  var operation = retry.operation(opts);\n\n  operation.attempt(function(currentAttempt) {\n    failingAsyncOperation(someInput, function(err, result) {\n\n      if (err && err.message === 'A fatal error') {\n        operation.stop();\n        return cb(err);\n      }\n\n      if (operation.retry(err)) {\n        return;\n      }\n\n      cb(operation.mainError(), operation.errors(), result);\n    });\n  });\n}\n\nattemptAsyncOperation('test input', function(err, errors, result) {\n  console.warn('err:');\n  console.log(err);\n\n  console.warn('result:');\n  console.log(result);\n});\n\nfunction failingAsyncOperation(input, cb) {\n  return setImmediate(cb.bind(null, new Error('A fatal error')));\n}\n"]}