{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/npm-registry-client/node_modules/ssri/index.js"],"names":["Buffer","require","crypto","Transform","SPEC_ALGORITHMS","BASE64_REGEX","SRI_REGEX","STRICT_SRI_REGEX","VCHAR_REGEX","Hash","hash","opts","strict","source","trim","match","some","a","algorithm","digest","rawOpts","options","slice","split","from","toString","x","every","opt","length","join","Integrity","sep","replace","Object","keys","map","k","prototype","call","filter","integrity","other","stringify","parse","single","hexDigest","algo","pickAlgorithm","find","otherhash","getPrioritizedHash","Error","JSON","reduce","acc","module","exports","sri","_parse","fullSri","string","push","obj","fromHex","optString","fromData","data","algorithms","createHash","update","fromStream","stream","P","Promise","istream","integrityStream","resolve","reject","pipe","on","s","checkData","error","assign","code","newSri","size","err","found","expected","checkStream","checker","goodSri","digests","Array","Set","concat","hashes","streamSize","transform","chunk","enc","cb","forEach","h","i","emit","create","createIntegrity","shift","NODE_HASHES","getHashes","DEFAULT_PRIORITY","has","algo1","algo2","indexOf","toLowerCase"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst Buffer = require('safe-buffer').Buffer\n\nconst crypto = require('crypto')\nconst Transform = require('stream').Transform\n\nconst SPEC_ALGORITHMS = ['sha256', 'sha384', 'sha512']\n\nconst BASE64_REGEX = /^[a-z0-9+/]+(?:=?=?)$/i\nconst SRI_REGEX = /^([^-]+)-([^?]+)([?\\S*]*)$/\nconst STRICT_SRI_REGEX = /^([^-]+)-([A-Za-z0-9+/=]{44,88})(\\?[\\x21-\\x7E]*)*$/\nconst VCHAR_REGEX = /^[\\x21-\\x7E]+$/\n\nclass Hash {\n  get isHash () { return true }\n  constructor (hash, opts) {\n    const strict = !!(opts && opts.strict)\n    this.source = hash.trim()\n    // 3.1. Integrity metadata (called \"Hash\" by ssri)\n    // https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description\n    const match = this.source.match(\n      strict\n      ? STRICT_SRI_REGEX\n      : SRI_REGEX\n    )\n    if (!match) { return }\n    if (strict && !SPEC_ALGORITHMS.some(a => a === match[1])) { return }\n    this.algorithm = match[1]\n    this.digest = match[2]\n\n    const rawOpts = match[3]\n    this.options = rawOpts ? rawOpts.slice(1).split('?') : []\n  }\n  hexDigest () {\n    return this.digest && Buffer.from(this.digest, 'base64').toString('hex')\n  }\n  toJSON () {\n    return this.toString()\n  }\n  toString (opts) {\n    if (opts && opts.strict) {\n      // Strict mode enforces the standard as close to the foot of the\n      // letter as it can.\n      if (!(\n        // The spec has very restricted productions for algorithms.\n        // https://www.w3.org/TR/CSP2/#source-list-syntax\n        SPEC_ALGORITHMS.some(x => x === this.algorithm) &&\n        // Usually, if someone insists on using a \"different\" base64, we\n        // leave it as-is, since there's multiple standards, and the\n        // specified is not a URL-safe variant.\n        // https://www.w3.org/TR/CSP2/#base64_value\n        this.digest.match(BASE64_REGEX) &&\n        // Option syntax is strictly visual chars.\n        // https://w3c.github.io/webappsec-subresource-integrity/#grammardef-option-expression\n        // https://tools.ietf.org/html/rfc5234#appendix-B.1\n        (this.options || []).every(opt => opt.match(VCHAR_REGEX))\n      )) {\n        return ''\n      }\n    }\n    const options = this.options && this.options.length\n    ? `?${this.options.join('?')}`\n    : ''\n    return `${this.algorithm}-${this.digest}${options}`\n  }\n}\n\nclass Integrity {\n  get isIntegrity () { return true }\n  toJSON () {\n    return this.toString()\n  }\n  toString (opts) {\n    opts = opts || {}\n    let sep = opts.sep || ' '\n    if (opts.strict) {\n      // Entries must be separated by whitespace, according to spec.\n      sep = sep.replace(/\\S+/g, ' ')\n    }\n    return Object.keys(this).map(k => {\n      return this[k].map(hash => {\n        return Hash.prototype.toString.call(hash, opts)\n      }).filter(x => x.length).join(sep)\n    }).filter(x => x.length).join(sep)\n  }\n  concat (integrity, opts) {\n    const other = typeof integrity === 'string'\n    ? integrity\n    : stringify(integrity, opts)\n    return parse(`${this.toString(opts)} ${other}`, opts)\n  }\n  hexDigest () {\n    return parse(this, {single: true}).hexDigest()\n  }\n  match (integrity, opts) {\n    const other = parse(integrity, opts)\n    const algo = other.pickAlgorithm(opts)\n    return (\n      this[algo] &&\n      other[algo] &&\n      this[algo].find(hash =>\n        other[algo].find(otherhash =>\n          hash.digest === otherhash.digest\n        )\n      )\n    ) || false\n  }\n  pickAlgorithm (opts) {\n    const pickAlgorithm = (opts && opts.pickAlgorithm) || getPrioritizedHash\n    const keys = Object.keys(this)\n    if (!keys.length) {\n      throw new Error(`No algorithms available for ${\n        JSON.stringify(this.toString())\n      }`)\n    }\n    return keys.reduce((acc, algo) => {\n      return pickAlgorithm(acc, algo) || acc\n    })\n  }\n}\n\nmodule.exports.parse = parse\nfunction parse (sri, opts) {\n  opts = opts || {}\n  if (typeof sri === 'string') {\n    return _parse(sri, opts)\n  } else if (sri.algorithm && sri.digest) {\n    const fullSri = new Integrity()\n    fullSri[sri.algorithm] = [sri]\n    return _parse(stringify(fullSri, opts), opts)\n  } else {\n    return _parse(stringify(sri, opts), opts)\n  }\n}\n\nfunction _parse (integrity, opts) {\n  // 3.4.3. Parse metadata\n  // https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n  if (opts.single) {\n    return new Hash(integrity, opts)\n  }\n  return integrity.trim().split(/\\s+/).reduce((acc, string) => {\n    const hash = new Hash(string, opts)\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.stringify = stringify\nfunction stringify (obj, opts) {\n  if (obj.algorithm && obj.digest) {\n    return Hash.prototype.toString.call(obj, opts)\n  } else if (typeof obj === 'string') {\n    return stringify(parse(obj, opts), opts)\n  } else {\n    return Integrity.prototype.toString.call(obj, opts)\n  }\n}\n\nmodule.exports.fromHex = fromHex\nfunction fromHex (hexDigest, algorithm, opts) {\n  const optString = (opts && opts.options && opts.options.length)\n  ? `?${opts.options.join('?')}`\n  : ''\n  return parse(\n    `${algorithm}-${\n      Buffer.from(hexDigest, 'hex').toString('base64')\n    }${optString}`, opts\n  )\n}\n\nmodule.exports.fromData = fromData\nfunction fromData (data, opts) {\n  opts = opts || {}\n  const algorithms = opts.algorithms || ['sha512']\n  const optString = opts.options && opts.options.length\n  ? `?${opts.options.join('?')}`\n  : ''\n  return algorithms.reduce((acc, algo) => {\n    const digest = crypto.createHash(algo).update(data).digest('base64')\n    const hash = new Hash(\n      `${algo}-${digest}${optString}`,\n       opts\n    )\n    if (hash.algorithm && hash.digest) {\n      const algo = hash.algorithm\n      if (!acc[algo]) { acc[algo] = [] }\n      acc[algo].push(hash)\n    }\n    return acc\n  }, new Integrity())\n}\n\nmodule.exports.fromStream = fromStream\nfunction fromStream (stream, opts) {\n  opts = opts || {}\n  const P = opts.Promise || Promise\n  const istream = integrityStream(opts)\n  return new P((resolve, reject) => {\n    stream.pipe(istream)\n    stream.on('error', reject)\n    istream.on('error', reject)\n    let sri\n    istream.on('integrity', s => { sri = s })\n    istream.on('end', () => resolve(sri))\n    istream.on('data', () => {})\n  })\n}\n\nmodule.exports.checkData = checkData\nfunction checkData (data, sri, opts) {\n  opts = opts || {}\n  sri = parse(sri, opts)\n  if (!Object.keys(sri).length) {\n    if (opts.error) {\n      throw Object.assign(\n        new Error('No valid integrity hashes to check against'), {\n          code: 'EINTEGRITY'\n        }\n      )\n    } else {\n      return false\n    }\n  }\n  const algorithm = sri.pickAlgorithm(opts)\n  const digest = crypto.createHash(algorithm).update(data).digest('base64')\n  const newSri = parse({algorithm, digest})\n  const match = newSri.match(sri, opts)\n  if (match || !opts.error) {\n    return match\n  } else if (typeof opts.size === 'number' && (data.length !== opts.size)) {\n    const err = new Error(`data size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${data.length}`)\n    err.code = 'EBADSIZE'\n    err.found = data.length\n    err.expected = opts.size\n    err.sri = sri\n    throw err\n  } else {\n    const err = new Error(`Integrity checksum failed when using ${algorithm}: Wanted ${sri}, but got ${newSri}. (${data.length} bytes)`)\n    err.code = 'EINTEGRITY'\n    err.found = newSri\n    err.expected = sri\n    err.algorithm = algorithm\n    err.sri = sri\n    throw err\n  }\n}\n\nmodule.exports.checkStream = checkStream\nfunction checkStream (stream, sri, opts) {\n  opts = opts || {}\n  const P = opts.Promise || Promise\n  const checker = integrityStream(Object.assign({}, opts, {\n    integrity: sri\n  }))\n  return new P((resolve, reject) => {\n    stream.pipe(checker)\n    stream.on('error', reject)\n    checker.on('error', reject)\n    let sri\n    checker.on('verified', s => { sri = s })\n    checker.on('end', () => resolve(sri))\n    checker.on('data', () => {})\n  })\n}\n\nmodule.exports.integrityStream = integrityStream\nfunction integrityStream (opts) {\n  opts = opts || {}\n  // For verification\n  const sri = opts.integrity && parse(opts.integrity, opts)\n  const goodSri = sri && Object.keys(sri).length\n  const algorithm = goodSri && sri.pickAlgorithm(opts)\n  const digests = goodSri && sri[algorithm]\n  // Calculating stream\n  const algorithms = Array.from(\n    new Set(\n      (opts.algorithms || ['sha512'])\n      .concat(algorithm ? [algorithm] : [])\n    )\n  )\n  const hashes = algorithms.map(crypto.createHash)\n  let streamSize = 0\n  const stream = new Transform({\n    transform (chunk, enc, cb) {\n      streamSize += chunk.length\n      hashes.forEach(h => h.update(chunk, enc))\n      cb(null, chunk, enc)\n    }\n  }).on('end', () => {\n    const optString = (opts.options && opts.options.length)\n    ? `?${opts.options.join('?')}`\n    : ''\n    const newSri = parse(hashes.map((h, i) => {\n      return `${algorithms[i]}-${h.digest('base64')}${optString}`\n    }).join(' '), opts)\n    // Integrity verification mode\n    const match = goodSri && newSri.match(sri, opts)\n    if (typeof opts.size === 'number' && streamSize !== opts.size) {\n      const err = new Error(`stream size mismatch when checking ${sri}.\\n  Wanted: ${opts.size}\\n  Found: ${streamSize}`)\n      err.code = 'EBADSIZE'\n      err.found = streamSize\n      err.expected = opts.size\n      err.sri = sri\n      stream.emit('error', err)\n    } else if (opts.integrity && !match) {\n      const err = new Error(`${sri} integrity checksum failed when using ${algorithm}: wanted ${digests} but got ${newSri}. (${streamSize} bytes)`)\n      err.code = 'EINTEGRITY'\n      err.found = newSri\n      err.expected = digests\n      err.algorithm = algorithm\n      err.sri = sri\n      stream.emit('error', err)\n    } else {\n      stream.emit('size', streamSize)\n      stream.emit('integrity', newSri)\n      match && stream.emit('verified', match)\n    }\n  })\n  return stream\n}\n\nmodule.exports.create = createIntegrity\nfunction createIntegrity (opts) {\n  opts = opts || {}\n  const algorithms = opts.algorithms || ['sha512']\n  const optString = opts.options && opts.options.length\n  ? `?${opts.options.join('?')}`\n  : ''\n\n  const hashes = algorithms.map(crypto.createHash)\n\n  return {\n    update: function (chunk, enc) {\n      hashes.forEach(h => h.update(chunk, enc))\n      return this\n    },\n    digest: function (enc) {\n      const integrity = algorithms.reduce((acc, algo) => {\n        const digest = hashes.shift().digest('base64')\n        const hash = new Hash(\n          `${algo}-${digest}${optString}`,\n          opts\n        )\n        if (hash.algorithm && hash.digest) {\n          const algo = hash.algorithm\n          if (!acc[algo]) { acc[algo] = [] }\n          acc[algo].push(hash)\n        }\n        return acc\n      }, new Integrity())\n\n      return integrity\n    }\n  }\n}\n\nconst NODE_HASHES = new Set(crypto.getHashes())\n\n// This is a Best Effort™ at a reasonable priority for hash algos\nconst DEFAULT_PRIORITY = [\n  'md5', 'whirlpool', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n  // TODO - it's unclear _which_ of these Node will actually use as its name\n  //        for the algorithm, so we guesswork it based on the OpenSSL names.\n  'sha3',\n  'sha3-256', 'sha3-384', 'sha3-512',\n  'sha3_256', 'sha3_384', 'sha3_512'\n].filter(algo => NODE_HASHES.has(algo))\n\nfunction getPrioritizedHash (algo1, algo2) {\n  return DEFAULT_PRIORITY.indexOf(algo1.toLowerCase()) >= DEFAULT_PRIORITY.indexOf(algo2.toLowerCase())\n  ? algo1\n  : algo2\n}\n"]}