{"version":3,"sources":["../../../../../node_modules/npm/node_modules/cacache/put.js"],"names":["figgyPudding","require","index","memo","write","to","PutOpts","algorithms","default","integrity","memoize","metadata","size","tmpPrefix","uid","gid","module","exports","putData","cache","key","data","opts","then","insert","res","concat","put","entry","stream","putStream","contentStream","on","int","s","memoData","memoTotal","chunk","enc","cb","push","length","end","Buffer","emit","erred","once","err"],"mappings":"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","file":"put.js","sourcesContent":["'use strict'\n\nconst figgyPudding = require('figgy-pudding')\nconst index = require('./lib/entry-index')\nconst memo = require('./lib/memoization')\nconst write = require('./lib/content/write')\nconst to = require('mississippi').to\n\nconst PutOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  integrity: {},\n  memoize: {},\n  metadata: {},\n  size: {},\n  tmpPrefix: {},\n  uid: {},\n  gid: {}\n})\n\nmodule.exports = putData\nfunction putData (cache, key, data, opts) {\n  opts = PutOpts(opts)\n  return write(cache, data, opts).then(res => {\n    return index.insert(\n      cache, key, res.integrity, opts.concat({size: res.size})\n    ).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts)\n      }\n      return res.integrity\n    })\n  })\n}\n\nmodule.exports.stream = putStream\nfunction putStream (cache, key, opts) {\n  opts = PutOpts(opts)\n  let integrity\n  let size\n  const contentStream = write.stream(\n    cache, opts\n  ).on('integrity', int => {\n    integrity = int\n  }).on('size', s => {\n    size = s\n  })\n  let memoData\n  let memoTotal = 0\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) { memoData = [] }\n        memoData.push(chunk)\n        memoTotal += chunk.length\n      }\n      cb()\n    })\n  }, cb => {\n    contentStream.end(() => {\n      index.insert(cache, key, integrity, opts.concat({size})).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts)\n        }\n        stream.emit('integrity', integrity)\n        cb()\n      })\n    })\n  })\n  let erred = false\n  stream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    contentStream.emit('error', err)\n  })\n  contentStream.once('error', err => {\n    if (erred) { return }\n    erred = true\n    stream.emit('error', err)\n  })\n  return stream\n}\n"]}