{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/JSONStream/test/multiple_objects.js"],"names":["fs","require","net","join","file","__dirname","it","JSONStream","str","readFileSync","datas","server","createServer","client","data_calls","parser","parse","on","data","typeof","console","log","min","Infinity","d","equal","close","pipe","listen","connect","port","msgs","end"],"mappings":";;AAAA,IAAIA,KAAKC,QAAS,IAAT,CAAT;AACA,IAAIC,MAAMD,QAAQ,KAAR,CAAV;AACA,IAAIE,OAAOF,QAAQ,MAAR,EAAgBE,IAA3B;AACA,IAAIC,OAAOD,KAAKE,SAAL,EAAgB,UAAhB,EAA2B,cAA3B,CAAX;AACA,IAAIC,KAAKL,QAAQ,OAAR,CAAT;AACA,IAAIM,aAAaN,QAAQ,KAAR,CAAjB;;AAEA,IAAIO,MAAMR,GAAGS,YAAH,CAAgBL,IAAhB,CAAV;;AAEA,IAAIM,QAAQ,EAAZ;;AAEA,IAAIC,SAAST,IAAIU,YAAJ,CAAiB,UAASC,MAAT,EAAiB;AAC3C,QAAIC,aAAa,CAAjB;AACA,QAAIC,SAASR,WAAWS,KAAX,CAAiB,CAAC,MAAD,EAAS,IAAT,EAAe,KAAf,CAAjB,CAAb;AACAD,WAAOE,EAAP,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAC7B,UAAGJ,UAAH;AACAJ,cAAMQ,IAAN,IAAc,CAACR,MAAMQ,IAAN,KAAe,CAAhB,IAAqB,CAAnC;AACAZ,WAAGY,IAAH,EAASC,MAAT,CAAgB,QAAhB;AACH,KAJD;;AAMAJ,WAAOE,EAAP,CAAU,KAAV,EAAiB,YAAW;AACxBG,gBAAQC,GAAR,CAAY,KAAZ;AACA,YAAIC,MAAMC,QAAV;AACA,aAAK,IAAIC,CAAT,IAAcd,KAAd;AACEY,kBAAMA,MAAMZ,MAAMc,CAAN,CAAN,GAAiBd,MAAMc,CAAN,CAAjB,GAA4BF,GAAlC;AADF,SAEAhB,GAAGgB,GAAH,EAAQG,KAAR,CAAc,CAAd;AACAd,eAAOe,KAAP;AACH,KAPD;AAQAb,WAAOc,IAAP,CAAYZ,MAAZ;AACH,CAlBY,CAAb;AAmBAJ,OAAOiB,MAAP,CAAc,IAAd;;AAEA,IAAIf,SAASX,IAAI2B,OAAJ,CAAY,EAAEC,MAAO,IAAT,EAAZ,EAA6B,YAAW;AACjD,QAAIC,OAAOvB,MAAM,GAAN,GAAYA,GAAZ,GAAkB,MAAlB,GAA2BA,GAAtC;AACAK,WAAOmB,GAAP,CAAWD,IAAX;AACH,CAHY,CAAb","file":"multiple_objects.js","sourcesContent":["var fs = require ('fs');\nvar net = require('net');\nvar join = require('path').join;\nvar file = join(__dirname, 'fixtures','all_npm.json');\nvar it = require('it-is');\nvar JSONStream = require('../');\n\nvar str = fs.readFileSync(file);\n\nvar datas = {}\n\nvar server = net.createServer(function(client) {\n    var data_calls = 0;\n    var parser = JSONStream.parse(['rows', true, 'key']);\n    parser.on('data', function(data) {\n        ++ data_calls;\n        datas[data] = (datas[data] || 0) + 1\n        it(data).typeof('string')\n    });\n\n    parser.on('end', function() {\n        console.log('END')\n        var min = Infinity\n        for (var d in datas)\n          min = min > datas[d] ? datas[d] : min\n        it(min).equal(3);\n        server.close();\n    });\n    client.pipe(parser);\n});\nserver.listen(9999);\n\nvar client = net.connect({ port : 9999 }, function() {\n    var msgs = str + ' ' + str + '\\n\\n' + str\n    client.end(msgs);\n});\n"]}