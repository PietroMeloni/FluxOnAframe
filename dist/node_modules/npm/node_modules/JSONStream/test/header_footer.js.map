{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/JSONStream/test/header_footer.js"],"names":["fs","require","join","file","__dirname","JSONStream","it","expected","JSON","parse","readFileSync","parser","called","headerCalled","footerCalled","ended","parsed","createReadStream","pipe","on","data","deepEqual","total_rows","offset","foo","bar","has","id","typeof","value","rev","key","equal","push","process","rows","length","console","error"],"mappings":";;AAEA,IAAIA,KAAKC,QAAS,IAAT,CAAT;AAAA,IACIC,OAAOD,QAAQ,MAAR,EAAgBC,IAD3B;AAAA,IAEIC,OAAOD,KAAKE,SAAL,EAAgB,UAAhB,EAA2B,oBAA3B,CAFX;AAAA,IAGIC,aAAaJ,QAAQ,KAAR,CAHjB;AAAA,IAIIK,KAAKL,QAAQ,OAAR,CAJT;;AAMA,IAAIM,WAAWC,KAAKC,KAAL,CAAWT,GAAGU,YAAH,CAAgBP,IAAhB,CAAX,CAAf;AAAA,IACIQ,SAASN,WAAWI,KAAX,CAAiB,CAAC,MAAD,EAAS,KAAT,CAAe,aAAf,CAAjB,CADb;AAAA,IAEIG,SAAS,CAFb;AAAA,IAGIC,eAAe,CAHnB;AAAA,IAIIC,eAAe,CAJnB;AAAA,IAKIC,QAAQ,KALZ;AAAA,IAMIC,SAAS,EANb;;AAQAhB,GAAGiB,gBAAH,CAAoBd,IAApB,EAA0Be,IAA1B,CAA+BP,MAA/B;;AAEAA,OAAOQ,EAAP,CAAU,QAAV,EAAoB,UAAUC,IAAV,EAAgB;AAClCP;AACAP,KAAGc,IAAH,EAASC,SAAT,CAAmB;AACjBC,gBAAY,GADK;AAEjBC,YAAQ;AAFS,GAAnB;AAID,CAND;;AAQAZ,OAAOQ,EAAP,CAAU,QAAV,EAAoB,UAAUC,IAAV,EAAgB;AAClCN;AACAR,KAAGc,IAAH,EAASC,SAAT,CAAmB;AACjBG,SAAK,EAAEC,KAAK,KAAP;AADY,GAAnB;AAGD,CALD;;AAOAd,OAAOQ,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChCR;AACAN,KAAGoB,GAAH,CAAO;AACLC,QAAIrB,GAAGsB,MAAH,CAAU,QAAV,CADC;AAELC,WAAO,EAACC,KAAKxB,GAAGsB,MAAH,CAAU,QAAV,CAAN,EAFF;AAGLG,SAAIzB,GAAGsB,MAAH,CAAU,QAAV;AAHC,GAAP;AAKAtB,KAAGO,YAAH,EAAiBmB,KAAjB,CAAuB,CAAvB;AACAhB,SAAOiB,IAAP,CAAYb,IAAZ;AACD,CATD;;AAWAT,OAAOQ,EAAP,CAAU,KAAV,EAAiB,YAAY;AAC3BJ,UAAQ,IAAR;AACD,CAFD;;AAIAmB,QAAQf,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7Bb,KAAGM,MAAH,EAAWoB,KAAX,CAAiBzB,SAAS4B,IAAT,CAAcC,MAA/B;AACA9B,KAAGO,YAAH,EAAiBmB,KAAjB,CAAuB,CAAvB;AACA1B,KAAGQ,YAAH,EAAiBkB,KAAjB,CAAuB,CAAvB;AACA1B,KAAGU,MAAH,EAAWK,SAAX,CAAqBd,SAAS4B,IAA9B;AACAE,UAAQC,KAAR,CAAc,QAAd;AACD,CAND","file":"header_footer.js","sourcesContent":["\n\nvar fs = require ('fs')\n  , join = require('path').join\n  , file = join(__dirname, 'fixtures','header_footer.json')\n  , JSONStream = require('../')\n  , it = require('it-is')\n\nvar expected = JSON.parse(fs.readFileSync(file))\n  , parser = JSONStream.parse(['rows', /\\d+/ /*, 'value'*/])\n  , called = 0\n  , headerCalled = 0\n  , footerCalled = 0\n  , ended = false\n  , parsed = []\n\nfs.createReadStream(file).pipe(parser)\n\nparser.on('header', function (data) {\n  headerCalled ++\n  it(data).deepEqual({\n    total_rows: 129,\n    offset: 0\n  })\n})\n\nparser.on('footer', function (data) {\n  footerCalled ++\n  it(data).deepEqual({\n    foo: { bar: 'baz' }\n  })\n})\n\nparser.on('data', function (data) {\n  called ++\n  it.has({\n    id: it.typeof('string'),\n    value: {rev: it.typeof('string')},\n    key:it.typeof('string')\n  })\n  it(headerCalled).equal(1)\n  parsed.push(data)\n})\n\nparser.on('end', function () {\n  ended = true\n})\n\nprocess.on('exit', function () {\n  it(called).equal(expected.rows.length)\n  it(headerCalled).equal(1)\n  it(footerCalled).equal(1)\n  it(parsed).deepEqual(expected.rows)\n  console.error('PASSED')\n})\n"]}