{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/JSONStream/test/test.js"],"names":["fs","require","join","file","__dirname","JSONStream","it","expected","JSON","parse","readFileSync","parser","called","ended","parsed","createReadStream","pipe","on","data","has","id","typeof","value","rev","key","push","process","equal","rows","length","deepEqual","console","error"],"mappings":";;AAEA,IAAIA,KAAKC,QAAS,IAAT,CAAT;AAAA,IACIC,OAAOD,QAAQ,MAAR,EAAgBC,IAD3B;AAAA,IAEIC,OAAOD,KAAKE,SAAL,EAAgB,UAAhB,EAA2B,cAA3B,CAFX;AAAA,IAGIC,aAAaJ,QAAQ,KAAR,CAHjB;AAAA,IAIIK,KAAKL,QAAQ,OAAR,CAJT;;AAMA,IAAIM,WAAWC,KAAKC,KAAL,CAAWT,GAAGU,YAAH,CAAgBP,IAAhB,CAAX,CAAf;AAAA,IACIQ,SAASN,WAAWI,KAAX,CAAiB,CAAC,MAAD,EAAS,KAAT,CAAe,aAAf,CAAjB,CADb;AAAA,IAEIG,SAAS,CAFb;AAAA,IAGIC,QAAQ,KAHZ;AAAA,IAIIC,SAAS,EAJb;;AAMAd,GAAGe,gBAAH,CAAoBZ,IAApB,EAA0Ba,IAA1B,CAA+BL,MAA/B;;AAEAA,OAAOM,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChCN;AACAN,KAAGa,GAAH,CAAO;AACLC,QAAId,GAAGe,MAAH,CAAU,QAAV,CADC;AAELC,WAAO,EAACC,KAAKjB,GAAGe,MAAH,CAAU,QAAV,CAAN,EAFF;AAGLG,SAAIlB,GAAGe,MAAH,CAAU,QAAV;AAHC,GAAP;AAKAP,SAAOW,IAAP,CAAYP,IAAZ;AACD,CARD;;AAUAP,OAAOM,EAAP,CAAU,KAAV,EAAiB,YAAY;AAC3BJ,UAAQ,IAAR;AACD,CAFD;;AAIAa,QAAQT,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7BX,KAAGM,MAAH,EAAWe,KAAX,CAAiBpB,SAASqB,IAAT,CAAcC,MAA/B;AACAvB,KAAGQ,MAAH,EAAWgB,SAAX,CAAqBvB,SAASqB,IAA9B;AACAG,UAAQC,KAAR,CAAc,QAAd;AACD,CAJD","file":"test.js","sourcesContent":["\n\nvar fs = require ('fs')\n  , join = require('path').join\n  , file = join(__dirname, 'fixtures','all_npm.json')\n  , JSONStream = require('../')\n  , it = require('it-is')\n\nvar expected = JSON.parse(fs.readFileSync(file))\n  , parser = JSONStream.parse(['rows', /\\d+/ /*, 'value'*/])\n  , called = 0\n  , ended = false\n  , parsed = []\n\nfs.createReadStream(file).pipe(parser)\n  \nparser.on('data', function (data) {\n  called ++\n  it.has({\n    id: it.typeof('string'),\n    value: {rev: it.typeof('string')},\n    key:it.typeof('string')\n  })\n  parsed.push(data)\n})\n\nparser.on('end', function () {\n  ended = true\n})\n\nprocess.on('exit', function () {\n  it(called).equal(expected.rows.length)\n  it(parsed).deepEqual(expected.rows)\n  console.error('PASSED')\n})\n"]}