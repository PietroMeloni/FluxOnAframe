{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/JSONStream/test/doubledot2.js"],"names":["fs","require","join","file","__dirname","JSONStream","it","expected","JSON","parse","readFileSync","parser","recurse","called","ended","parsed","createReadStream","pipe","on","data","push","process","expectedValues","equal","length","i","deepEqual","console","error"],"mappings":";;AAAC,IAAIA,KAAKC,QAAS,IAAT,CAAT;AAAA,IACIC,OAAOD,QAAQ,MAAR,EAAgBC,IAD3B;AAAA,IAEIC,OAAOD,KAAKE,SAAL,EAAgB,UAAhB,EAA2B,YAA3B,CAFX;AAAA,IAGIC,aAAaJ,QAAQ,KAAR,CAHjB;AAAA,IAIIK,KAAKL,QAAQ,OAAR,CAJT;;AAMA,IAAIM,WAAWC,KAAKC,KAAL,CAAWT,GAAGU,YAAH,CAAgBP,IAAhB,CAAX,CAAf;AAAA,IACIQ,SAASN,WAAWI,KAAX,CAAiB,CAAC,MAAD,EAAS,EAACG,SAAS,IAAV,EAAT,EAA0B,OAA1B,CAAjB,CADb;AAAA,IAEIC,SAAS,CAFb;AAAA,IAGIC,QAAQ,KAHZ;AAAA,IAIIC,SAAS,EAJb;;AAMAf,GAAGgB,gBAAH,CAAoBb,IAApB,EAA0Bc,IAA1B,CAA+BN,MAA/B;;AAEAA,OAAOO,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChCN;AACAE,SAAOK,IAAP,CAAYD,IAAZ;AACD,CAHD;;AAKAR,OAAOO,EAAP,CAAU,KAAV,EAAiB,YAAY;AAC3BJ,UAAQ,IAAR;AACD,CAFD;;AAIAO,QAAQH,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7B,MAAII,iBAAiB,CAAC,CAAD,EAAI,CAAC,CAAD,CAAJ,EAAS,EAAC,KAAK,CAAN,EAAT,EAAmB,GAAnB,EAAwB,CAAxB,CAArB;AACAhB,KAAGO,MAAH,EAAWU,KAAX,CAAiBD,eAAeE,MAAhC;AACA,OAAK,IAAIC,IAAI,CAAb,EAAiBA,IAAI,CAArB,EAAyBA,GAAzB;AACEnB,OAAGS,OAAOU,CAAP,CAAH,EAAcC,SAAd,CAAwBJ,eAAeG,CAAf,CAAxB;AADF,GAEAE,QAAQC,KAAR,CAAc,QAAd;AACD,CAND","file":"doubledot2.js","sourcesContent":[" var fs = require ('fs')\n   , join = require('path').join\n   , file = join(__dirname, 'fixtures','depth.json')\n   , JSONStream = require('../')\n   , it = require('it-is')\n\n var expected = JSON.parse(fs.readFileSync(file))\n   , parser = JSONStream.parse(['docs', {recurse: true}, 'value'])\n   , called = 0\n   , ended = false\n   , parsed = []\n\n fs.createReadStream(file).pipe(parser)\n  \n parser.on('data', function (data) {\n   called ++\n   parsed.push(data)\n })\n\n parser.on('end', function () {\n   ended = true\n })\n\n process.on('exit', function () {\n   var expectedValues = [0, [1], {\"a\": 2}, \"3\", 4]\n   it(called).equal(expectedValues.length)\n   for (var i = 0 ; i < 5 ; i++)\n     it(parsed[i]).deepEqual(expectedValues[i])\n   console.error('PASSED')\n })\n"]}