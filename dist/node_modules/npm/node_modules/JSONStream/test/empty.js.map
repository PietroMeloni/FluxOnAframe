{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/JSONStream/test/empty.js"],"names":["JSONStream","require","stream","it","output","parser1","parse","on","data","push","parser2","pending","onend","deepEqual","hello","console","error","makeReadableStream","readStream","Stream","readable","write","emit","end","emptyArray","pipe","objectArray"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,KAAR,CAAjB;AAAA,IACIC,SAASD,QAAQ,QAAR,CADb;AAAA,IAEIE,KAAKF,QAAQ,OAAR,CAFT;;AAIA,IAAIG,SAAS,CAAE,EAAF,EAAM,EAAN,CAAb;;AAEA,IAAIC,UAAUL,WAAWM,KAAX,CAAiB,CAAC,MAAD,EAAS,GAAT,CAAjB,CAAd;AACAD,QAAQE,EAAR,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAe;AAChCJ,SAAO,CAAP,EAAUK,IAAV,CAAeD,IAAf;AACD,CAFD;;AAIA,IAAIE,UAAUV,WAAWM,KAAX,CAAiB,CAAC,MAAD,EAAS,GAAT,CAAjB,CAAd;AACAI,QAAQH,EAAR,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAe;AAChCJ,SAAO,CAAP,EAAUK,IAAV,CAAeD,IAAf;AACD,CAFD;;AAIA,IAAIG,UAAU,CAAd;AACA,SAASC,KAAT,GAAkB;AAChB,MAAI,EAAED,OAAF,GAAY,CAAhB,EAAmB;AACnBR,KAAGC,MAAH,EAAWS,SAAX,CAAqB,CACnB,EADmB,EACf,CAAC,EAACC,OAAO,OAAR,EAAD,CADe,CAArB;AAGAC,UAAQC,KAAR,CAAc,QAAd;AACD;AACDX,QAAQE,EAAR,CAAW,KAAX,EAAkBK,KAAlB;AACAF,QAAQH,EAAR,CAAW,KAAX,EAAkBK,KAAlB;;AAEA,SAASK,kBAAT,GAA8B;AAC5B,MAAIC,aAAa,IAAIhB,OAAOiB,MAAX,EAAjB;AACAD,aAAWE,QAAX,GAAsB,IAAtB;AACAF,aAAWG,KAAX,GAAmB,UAAUb,IAAV,EAAgB;AAAE,SAAKc,IAAL,CAAU,MAAV,EAAkBd,IAAlB;AAAyB,GAA9D;AACAU,aAAWK,GAAX,GAAiB,UAAUf,IAAV,EAAgB;AAAE,SAAKc,IAAL,CAAU,KAAV;AAAkB,GAArD;AACA,SAAOJ,UAAP;AACD;;AAED,IAAIM,aAAaP,oBAAjB;AACAO,WAAWC,IAAX,CAAgBpB,OAAhB;AACAmB,WAAWH,KAAX,CAAiB,aAAjB;AACAG,WAAWD,GAAX;;AAEA,IAAIG,cAAcT,oBAAlB;AACAS,YAAYD,IAAZ,CAAiBf,OAAjB;AACAgB,YAAYL,KAAZ,CAAkB,8BAAlB;AACAK,YAAYH,GAAZ","file":"empty.js","sourcesContent":["var JSONStream = require('../')\n  , stream = require('stream')\n  , it = require('it-is')\n\nvar output = [ [], [] ]\n\nvar parser1 = JSONStream.parse(['docs', /./])\nparser1.on('data', function(data) {\n  output[0].push(data)\n})\n\nvar parser2 = JSONStream.parse(['docs', /./])\nparser2.on('data', function(data) {\n  output[1].push(data)\n})\n\nvar pending = 2\nfunction onend () {\n  if (--pending > 0) return\n  it(output).deepEqual([\n    [], [{hello: 'world'}]\n  ])\n  console.error('PASSED')\n}\nparser1.on('end', onend)\nparser2.on('end', onend)\n\nfunction makeReadableStream() {\n  var readStream = new stream.Stream()\n  readStream.readable = true\n  readStream.write = function (data) { this.emit('data', data) }\n  readStream.end = function (data) { this.emit('end') }\n  return readStream\n}\n\nvar emptyArray = makeReadableStream()\nemptyArray.pipe(parser1)\nemptyArray.write('{\"docs\":[]}')\nemptyArray.end()\n\nvar objectArray = makeReadableStream()\nobjectArray.pipe(parser2)\nobjectArray.write('{\"docs\":[{\"hello\":\"world\"}]}')\nobjectArray.end()\n"]}