{"version":3,"sources":["../../../../../node_modules/npm/node_modules/registry-auth-token/index.js"],"names":["url","require","base64","decodeBase64","encodeBase64","tokenKey","userKey","passwordKey","module","exports","checkUrl","options","arguments","length","npmrc","registry","getRegistryAuthInfo","getLegacyAuthInfo","parsed","parse","pathname","regUrl","host","replace","authInfo","getAuthInfoForUrl","recursive","test","undefined","resolve","normalizePath","_auth","token","type","path","bearerAuth","getBearerToken","username","password","basicAuth","getTokenForUsernameAndPassword","tok","fullMatch","envVar","process","env","pass"],"mappings":"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","file":"index.js","sourcesContent":["var url = require('url')\nvar base64 = require('./base64')\n\nvar decodeBase64 = base64.decodeBase64\nvar encodeBase64 = base64.encodeBase64\n\nvar tokenKey = ':_authToken'\nvar userKey = ':username'\nvar passwordKey = ':_password'\n\nmodule.exports = function () {\n  var checkUrl\n  var options\n  if (arguments.length >= 2) {\n    checkUrl = arguments[0]\n    options = arguments[1]\n  } else if (typeof arguments[0] === 'string') {\n    checkUrl = arguments[0]\n  } else {\n    options = arguments[0]\n  }\n  options = options || {}\n  options.npmrc = options.npmrc || require('rc')('npm', {registry: 'https://registry.npmjs.org/'})\n  checkUrl = checkUrl || options.npmrc.registry\n  return getRegistryAuthInfo(checkUrl, options) || getLegacyAuthInfo(options.npmrc)\n}\n\nfunction getRegistryAuthInfo (checkUrl, options) {\n  var parsed = url.parse(checkUrl, false, true)\n  var pathname\n\n  while (pathname !== '/' && parsed.pathname !== pathname) {\n    pathname = parsed.pathname || '/'\n\n    var regUrl = '//' + parsed.host + pathname.replace(/\\/$/, '')\n    var authInfo = getAuthInfoForUrl(regUrl, options.npmrc)\n    if (authInfo) {\n      return authInfo\n    }\n\n    // break if not recursive\n    if (!options.recursive) {\n      return /\\/$/.test(checkUrl)\n        ? undefined\n        : getRegistryAuthInfo(url.resolve(checkUrl, '.'), options)\n    }\n\n    parsed.pathname = url.resolve(normalizePath(pathname), '..') || '/'\n  }\n\n  return undefined\n}\n\nfunction getLegacyAuthInfo (npmrc) {\n  if (npmrc._auth) {\n    return {token: npmrc._auth, type: 'Basic'}\n  }\n  return undefined\n}\n\nfunction normalizePath (path) {\n  return path[path.length - 1] === '/' ? path : path + '/'\n}\n\nfunction getAuthInfoForUrl (regUrl, npmrc) {\n  // try to get bearer token\n  var bearerAuth = getBearerToken(npmrc[regUrl + tokenKey] || npmrc[regUrl + '/' + tokenKey])\n  if (bearerAuth) {\n    return bearerAuth\n  }\n\n  // try to get basic token\n  var username = npmrc[regUrl + userKey] || npmrc[regUrl + '/' + userKey]\n  var password = npmrc[regUrl + passwordKey] || npmrc[regUrl + '/' + passwordKey]\n  var basicAuth = getTokenForUsernameAndPassword(username, password)\n  if (basicAuth) {\n    return basicAuth\n  }\n\n  return undefined\n}\n\nfunction getBearerToken (tok) {\n  if (!tok) {\n    return undefined\n  }\n\n  // check if bearer token\n  var token = tok.replace(/^\\$\\{?([^}]*)\\}?$/, function (fullMatch, envVar) {\n    return process.env[envVar]\n  })\n\n  return {token: token, type: 'Bearer'}\n}\n\nfunction getTokenForUsernameAndPassword (username, password) {\n  if (!username || !password) {\n    return undefined\n  }\n\n  // passwords are base64 encoded, so we need to decode it\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/set-credentials-by-uri.js#L26\n  var pass = decodeBase64(password.replace(/^\\$\\{?([^}]*)\\}?$/, function (fullMatch, envVar) {\n    return process.env[envVar]\n  }))\n\n  // a basic auth token is base64 encoded 'username:password'\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/get-credentials-by-uri.js#L70\n  var token = encodeBase64(username + ':' + pass)\n\n  // we found a basicToken token so let's exit the loop\n  return {\n    token: token,\n    type: 'Basic',\n    password: pass,\n    username: username\n  }\n}\n"]}