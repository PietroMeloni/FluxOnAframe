{"version":3,"sources":["../../../../../../../../../node_modules/npm/node_modules/promise-retry/node_modules/retry/test/integration/test-timeouts.js"],"names":["common","require","assert","retry","dir","lib","testDefaultValues","timeouts","equal","length","testDefaultValuesWithRandomize","minTimeout","randomize","ok","testPassedTimeoutsAreUsed","timeoutsArray","deepEqual","notStrictEqual","testTimeoutsAreWithinBoundaries","maxTimeout","i","testTimeoutsAreIncremental","lastTimeout","testTimeoutsAreIncrementalForFactorsLessThanOne","retries","factor","expected","testRetries","strictEqual"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,WAAR,CAAb;AACA,IAAIC,SAASF,OAAOE,MAApB;AACA,IAAIC,QAAQF,QAAQD,OAAOI,GAAP,CAAWC,GAAX,GAAiB,QAAzB,CAAZ;;AAEA,CAAC,SAASC,iBAAT,GAA6B;AAC5B,MAAIC,WAAWJ,MAAMI,QAAN,EAAf;;AAEAL,SAAOM,KAAP,CAAaD,SAASE,MAAtB,EAA8B,EAA9B;AACAP,SAAOM,KAAP,CAAaD,SAAS,CAAT,CAAb,EAA0B,IAA1B;AACAL,SAAOM,KAAP,CAAaD,SAAS,CAAT,CAAb,EAA0B,IAA1B;AACAL,SAAOM,KAAP,CAAaD,SAAS,CAAT,CAAb,EAA0B,IAA1B;AACD,CAPD;;AASA,CAAC,SAASG,8BAAT,GAA0C;AACzC,MAAIC,aAAa,IAAjB;AACA,MAAIJ,WAAWJ,MAAMI,QAAN,CAAe;AAC5BI,gBAAYA,UADgB;AAE5BC,eAAW;AAFiB,GAAf,CAAf;;AAKAV,SAAOM,KAAP,CAAaD,SAASE,MAAtB,EAA8B,EAA9B;AACAP,SAAOW,EAAP,CAAUN,SAAS,CAAT,IAAcI,UAAxB;AACAT,SAAOW,EAAP,CAAUN,SAAS,CAAT,IAAcA,SAAS,CAAT,CAAxB;AACAL,SAAOW,EAAP,CAAUN,SAAS,CAAT,IAAcA,SAAS,CAAT,CAAxB;AACD,CAXD;;AAaA,CAAC,SAASO,yBAAT,GAAqC;AACpC,MAAIC,gBAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAApB;AACA,MAAIR,WAAWJ,MAAMI,QAAN,CAAeQ,aAAf,CAAf;AACAb,SAAOc,SAAP,CAAiBT,QAAjB,EAA2BQ,aAA3B;AACAb,SAAOe,cAAP,CAAsBV,QAAtB,EAAgCQ,aAAhC;AACD,CALD;;AAOA,CAAC,SAASG,+BAAT,GAA2C;AAC1C,MAAIP,aAAa,IAAjB;AACA,MAAIQ,aAAa,KAAjB;AACA,MAAIZ,WAAWJ,MAAMI,QAAN,CAAe;AAC5BI,gBAAYA,UADgB;AAE5BQ,gBAAYA;AAFgB,GAAf,CAAf;AAIA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIb,QAApB,EAA8Ba,GAA9B,EAAmC;AACjClB,WAAOW,EAAP,CAAUN,SAASa,CAAT,KAAeT,UAAzB;AACAT,WAAOW,EAAP,CAAUN,SAASa,CAAT,KAAeD,UAAzB;AACD;AACF,CAXD;;AAaA,CAAC,SAASE,0BAAT,GAAsC;AACrC,MAAId,WAAWJ,MAAMI,QAAN,EAAf;AACA,MAAIe,cAAcf,SAAS,CAAT,CAAlB;AACA,OAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAIb,QAApB,EAA8Ba,GAA9B,EAAmC;AACjClB,WAAOW,EAAP,CAAUN,SAASa,CAAT,IAAcE,WAAxB;AACAA,kBAAcf,SAASa,CAAT,CAAd;AACD;AACF,CAPD;;AASA,CAAC,SAASG,+CAAT,GAA2D;AAC1D,MAAIhB,WAAWJ,MAAMI,QAAN,CAAe;AAC5BiB,aAAS,CADmB;AAE5BC,YAAQ;AAFoB,GAAf,CAAf;;AAKA,MAAIC,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,CAAf;AACAxB,SAAOc,SAAP,CAAiBU,QAAjB,EAA2BnB,QAA3B;AACD,CARD;;AAUA,CAAC,SAASoB,WAAT,GAAuB;AACtB,MAAIpB,WAAWJ,MAAMI,QAAN,CAAe,EAACiB,SAAS,CAAV,EAAf,CAAf;AACAtB,SAAO0B,WAAP,CAAmBrB,SAASE,MAA5B,EAAoC,CAApC;AACD,CAHD","file":"test-timeouts.js","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar retry = require(common.dir.lib + '/retry');\n\n(function testDefaultValues() {\n  var timeouts = retry.timeouts();\n\n  assert.equal(timeouts.length, 10);\n  assert.equal(timeouts[0], 1000);\n  assert.equal(timeouts[1], 2000);\n  assert.equal(timeouts[2], 4000);\n})();\n\n(function testDefaultValuesWithRandomize() {\n  var minTimeout = 5000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    randomize: true\n  });\n\n  assert.equal(timeouts.length, 10);\n  assert.ok(timeouts[0] > minTimeout);\n  assert.ok(timeouts[1] > timeouts[0]);\n  assert.ok(timeouts[2] > timeouts[1]);\n})();\n\n(function testPassedTimeoutsAreUsed() {\n  var timeoutsArray = [1000, 2000, 3000];\n  var timeouts = retry.timeouts(timeoutsArray);\n  assert.deepEqual(timeouts, timeoutsArray);\n  assert.notStrictEqual(timeouts, timeoutsArray);\n})();\n\n(function testTimeoutsAreWithinBoundaries() {\n  var minTimeout = 1000;\n  var maxTimeout = 10000;\n  var timeouts = retry.timeouts({\n    minTimeout: minTimeout,\n    maxTimeout: maxTimeout\n  });\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] >= minTimeout);\n    assert.ok(timeouts[i] <= maxTimeout);\n  }\n})();\n\n(function testTimeoutsAreIncremental() {\n  var timeouts = retry.timeouts();\n  var lastTimeout = timeouts[0];\n  for (var i = 0; i < timeouts; i++) {\n    assert.ok(timeouts[i] > lastTimeout);\n    lastTimeout = timeouts[i];\n  }\n})();\n\n(function testTimeoutsAreIncrementalForFactorsLessThanOne() {\n  var timeouts = retry.timeouts({\n    retries: 3,\n    factor: 0.5\n  });\n\n  var expected = [250, 500, 1000];\n  assert.deepEqual(expected, timeouts);\n})();\n\n(function testRetries() {\n  var timeouts = retry.timeouts({retries: 2});\n  assert.strictEqual(timeouts.length, 2);\n})();\n"]}