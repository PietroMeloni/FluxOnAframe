{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/promise-retry/test/test.js"],"names":["expect","require","promiseRetry","promiseDelay","describe","it","count","retry","then","Error","factor","value","to","be","number","equal","err","message","catch","retries","undefined"],"mappings":"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","file":"test.js","sourcesContent":["'use strict';\n\nvar expect = require('expect.js');\nvar promiseRetry = require('../');\nvar promiseDelay = require('sleep-promise');\n\ndescribe('promise-retry', function () {\n    it('should call fn again if retry was called', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                if (count <= 2) {\n                    retry(new Error('foo'));\n                }\n\n                return 'final';\n            });\n        }, { factor: 1 })\n        .then(function (value) {\n            expect(value).to.be('final');\n            expect(count).to.be(3);\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n\n    it('should call fn with the attempt number', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry, number) {\n            count += 1;\n            expect(count).to.equal(number);\n\n            return promiseDelay(10)\n            .then(function () {\n                if (count <= 2) {\n                    retry(new Error('foo'));\n                }\n\n                return 'final';\n            });\n        }, { factor: 1 })\n        .then(function (value) {\n            expect(value).to.be('final');\n            expect(count).to.be(3);\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n\n    it('should not retry on fulfillment if retry was not called', function () {\n        var count = 0;\n\n        return promiseRetry(function () {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                return 'final';\n            });\n        })\n        .then(function (value) {\n            expect(value).to.be('final');\n            expect(count).to.be(1);\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n\n    it('should not retry on rejection if retry was not called', function () {\n        var count = 0;\n\n        return promiseRetry(function () {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                throw new Error('foo');\n            });\n        })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n            expect(count).to.be(1);\n        });\n    });\n\n    it('should not retry on rejection if nr of retries is 0', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                throw new Error('foo');\n            })\n            .catch(retry);\n        }, { retries : 0 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n            expect(count).to.be(1);\n        });\n    });\n\n    it('should reject the promise if the retries were exceeded', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                throw new Error('foo');\n            })\n            .catch(retry);\n        }, { retries: 2, factor: 1 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n            expect(count).to.be(3);\n        });\n    });\n\n    it('should pass options to the underlying retry module', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            return promiseDelay(10)\n            .then(function () {\n                if (count < 2) {\n                    count += 1;\n                    retry(new Error('foo'));\n                }\n\n                return 'final';\n            });\n        }, { retries: 1, factor: 1 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n        });\n    });\n\n    it('should convert direct fulfillments into promises', function () {\n        return promiseRetry(function () {\n            return 'final';\n        }, { factor: 1 })\n        .then(function (value) {\n            expect(value).to.be('final');\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n\n    it('should convert direct rejections into promises', function () {\n        promiseRetry(function () {\n            throw new Error('foo');\n        }, { retries: 1, factor: 1 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n        });\n    });\n\n    it('should not crash on undefined rejections', function () {\n        return promiseRetry(function () {\n            throw undefined;\n        }, { retries: 1, factor: 1 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err).to.be(undefined);\n        })\n        .then(function () {\n            return promiseRetry(function (retry) {\n                retry();\n            }, { retries: 1, factor: 1 });\n        })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err).to.be(undefined);\n        });\n    });\n\n    it('should retry if retry() was called with undefined', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                if (count <= 2) {\n                    retry();\n                }\n\n                return 'final';\n            });\n        }, { factor: 1 })\n        .then(function (value) {\n            expect(value).to.be('final');\n            expect(count).to.be(3);\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n\n    it('should work with several retries in the same chain', function () {\n        var count = 0;\n\n        return promiseRetry(function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n            .then(function () {\n                retry(new Error('foo'));\n            })\n            .catch(function (err) {\n                retry(err);\n            });\n        }, { retries: 1, factor: 1 })\n        .then(function () {\n            throw new Error('should not succeed');\n        }, function (err) {\n            expect(err.message).to.be('foo');\n            expect(count).to.be(2);\n        });\n    });\n\n    it('should allow options to be passed first', function () {\n        var count = 0;\n\n        return promiseRetry({ factor: 1 }, function (retry) {\n            count += 1;\n\n            return promiseDelay(10)\n                .then(function () {\n                    if (count <= 2) {\n                        retry(new Error('foo'));\n                    }\n\n                    return 'final';\n                });\n        }).then(function (value) {\n            expect(value).to.be('final');\n            expect(count).to.be(3);\n        }, function () {\n            throw new Error('should not fail');\n        });\n    });\n});\n"]}