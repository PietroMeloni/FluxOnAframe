{"version":3,"sources":["../../../../../node_modules/npm/node_modules/promise-retry/index.js"],"names":["errcode","require","retry","hasOwn","Object","prototype","hasOwnProperty","isRetryError","err","code","call","promiseRetry","fn","options","temp","operation","Promise","resolve","reject","attempt","number","then","retried","Error","module","exports"],"mappings":"AAAA;;;;AAEA,IAAIA,UAAUC,QAAQ,UAAR,CAAd;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;;AAEA,IAAIE,SAASC,OAAOC,SAAP,CAAiBC,cAA9B;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,WAAOA,OAAOA,IAAIC,IAAJ,KAAa,eAApB,IAAuCN,OAAOO,IAAP,CAAYF,GAAZ,EAAiB,SAAjB,CAA9C;AACH;;AAED,SAASG,YAAT,CAAsBC,EAAtB,EAA0BC,OAA1B,EAAmC;AAC/B,QAAIC,IAAJ;AACA,QAAIC,SAAJ;;AAEA,QAAI,QAAOH,EAAP,yCAAOA,EAAP,OAAc,QAAd,IAA0B,OAAOC,OAAP,KAAmB,UAAjD,EAA6D;AACzD;AACAC,eAAOD,OAAP;AACAA,kBAAUD,EAAV;AACAA,aAAKE,IAAL;AACH;;AAEDC,gBAAYb,MAAMa,SAAN,CAAgBF,OAAhB,CAAZ;;AAEA,WAAO,IAAIG,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1CH,kBAAUI,OAAV,CAAkB,UAAUC,MAAV,EAAkB;AAChCJ,oBAAQC,OAAR,GACCI,IADD,CACM,YAAY;AACd,uBAAOT,GAAG,UAAUJ,GAAV,EAAe;AACrB,wBAAID,aAAaC,GAAb,CAAJ,EAAuB;AACnBA,8BAAMA,IAAIc,OAAV;AACH;;AAED,0BAAMtB,QAAQ,UAAR,EAAoB,eAApB,EAAqC,EAAEsB,SAASd,GAAX,EAArC,CAAN;AACH,iBANM,EAMJY,MANI,CAAP;AAOH,aATD,EAUCC,IAVD,CAUMJ,OAVN,EAUe,UAAUT,GAAV,EAAe;AAC1B,oBAAID,aAAaC,GAAb,CAAJ,EAAuB;AACnBA,0BAAMA,IAAIc,OAAV;;AAEA,wBAAIP,UAAUb,KAAV,CAAgBM,OAAO,IAAIe,KAAJ,EAAvB,CAAJ,EAAyC;AACrC;AACH;AACJ;;AAEDL,uBAAOV,GAAP;AACH,aApBD;AAqBH,SAtBD;AAuBH,KAxBM,CAAP;AAyBH;;AAEDgB,OAAOC,OAAP,GAAiBd,YAAjB","file":"index.js","sourcesContent":["'use strict';\n\nvar errcode = require('err-code');\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n    var temp;\n    var operation;\n\n    if (typeof fn === 'object' && typeof options === 'function') {\n        // Swap options and fn when using alternate signature (options, fn)\n        temp = options;\n        options = fn;\n        fn = temp;\n    }\n\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried;\n                    }\n\n                    throw errcode('Retrying', 'EPROMISERETRY', { retried: err });\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;\n\n                    if (operation.retry(err || new Error())) {\n                        return;\n                    }\n                }\n\n                reject(err);\n            });\n        });\n    });\n}\n\nmodule.exports = promiseRetry;\n"]}