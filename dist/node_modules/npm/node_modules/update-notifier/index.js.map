{"version":3,"sources":["../../../../../node_modules/npm/node_modules/update-notifier/index.js"],"names":["spawn","require","path","format","importLazy","configstore","chalk","semverDiff","latestVersion","isNpm","isInstalledGlobally","boxen","xdgBasedir","isCi","ONE_DAY","UpdateNotifier","options","pkg","name","packageName","version","packageVersion","Error","updateCheckInterval","hasCallback","callback","disabled","process","env","argv","indexOf","shouldNotifyInNpmScript","ConfigStore","config","optOut","lastUpdateCheck","Date","now","err","msg","yellow","cyan","on","console","error","align","checkNpm","then","update","catch","get","delete","execPath","join","__dirname","JSON","stringify","detached","stdio","unref","latest","current","type","opts","suppressForNpm","stdout","isTTY","Object","assign","isGlobal","message","dim","reset","green","boxenOpts","padding","margin","borderColor","borderStyle","defer","exit","module","exports","updateNotifier","check"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nconst spawn = require('child_process').spawn;\nconst path = require('path');\nconst format = require('util').format;\nconst importLazy = require('import-lazy')(require);\n\nconst configstore = importLazy('configstore');\nconst chalk = importLazy('chalk');\nconst semverDiff = importLazy('semver-diff');\nconst latestVersion = importLazy('latest-version');\nconst isNpm = importLazy('is-npm');\nconst isInstalledGlobally = importLazy('is-installed-globally');\nconst boxen = importLazy('boxen');\nconst xdgBasedir = importLazy('xdg-basedir');\nconst isCi = importLazy('is-ci');\nconst ONE_DAY = 1000 * 60 * 60 * 24;\n\nclass UpdateNotifier {\n\tconstructor(options) {\n\t\toptions = options || {};\n\t\tthis.options = options;\n\t\toptions.pkg = options.pkg || {};\n\n\t\t// Reduce pkg to the essential keys. with fallback to deprecated options\n\t\t// TODO: Remove deprecated options at some point far into the future\n\t\toptions.pkg = {\n\t\t\tname: options.pkg.name || options.packageName,\n\t\t\tversion: options.pkg.version || options.packageVersion\n\t\t};\n\n\t\tif (!options.pkg.name || !options.pkg.version) {\n\t\t\tthrow new Error('pkg.name and pkg.version required');\n\t\t}\n\n\t\tthis.packageName = options.pkg.name;\n\t\tthis.packageVersion = options.pkg.version;\n\t\tthis.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : ONE_DAY;\n\t\tthis.hasCallback = typeof options.callback === 'function';\n\t\tthis.callback = options.callback || (() => {});\n\t\tthis.disabled = 'NO_UPDATE_NOTIFIER' in process.env ||\n\t\t\tprocess.argv.indexOf('--no-update-notifier') !== -1 ||\n\t\t\tisCi();\n\t\tthis.shouldNotifyInNpmScript = options.shouldNotifyInNpmScript;\n\n\t\tif (!this.disabled && !this.hasCallback) {\n\t\t\ttry {\n\t\t\t\tconst ConfigStore = configstore();\n\t\t\t\tthis.config = new ConfigStore(`update-notifier-${this.packageName}`, {\n\t\t\t\t\toptOut: false,\n\t\t\t\t\t// Init with the current time so the first check is only\n\t\t\t\t\t// after the set interval, so not to bother users right away\n\t\t\t\t\tlastUpdateCheck: Date.now()\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// Expecting error code EACCES or EPERM\n\t\t\t\tconst msg =\n\t\t\t\t\tchalk().yellow(format(' %s update check failed ', options.pkg.name)) +\n\t\t\t\t\tformat('\\n Try running with %s or get access ', chalk().cyan('sudo')) +\n\t\t\t\t\t'\\n to the local update config store via \\n' +\n\t\t\t\t\tchalk().cyan(format(' sudo chown -R $USER:$(id -gn $USER) %s ', xdgBasedir().config));\n\n\t\t\t\tprocess.on('exit', () => {\n\t\t\t\t\tconsole.error('\\n' + boxen()(msg, {align: 'center'}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tcheck() {\n\t\tif (this.hasCallback) {\n\t\t\tthis.checkNpm()\n\t\t\t\t.then(update => this.callback(null, update))\n\t\t\t\t.catch(err => this.callback(err));\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this.config ||\n\t\t\tthis.config.get('optOut') ||\n\t\t\tthis.disabled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update = this.config.get('update');\n\n\t\tif (this.update) {\n\t\t\tthis.config.delete('update');\n\t\t}\n\n\t\t// Only check for updates on a set interval\n\t\tif (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Spawn a detached process, passing the options as an environment property\n\t\tspawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n\t\t\tdetached: true,\n\t\t\tstdio: 'ignore'\n\t\t}).unref();\n\t}\n\tcheckNpm() {\n\t\treturn latestVersion()(this.packageName).then(latestVersion => {\n\t\t\treturn {\n\t\t\t\tlatest: latestVersion,\n\t\t\t\tcurrent: this.packageVersion,\n\t\t\t\ttype: semverDiff()(this.packageVersion, latestVersion) || 'latest',\n\t\t\t\tname: this.packageName\n\t\t\t};\n\t\t});\n\t}\n\tnotify(opts) {\n\t\tconst suppressForNpm = !this.shouldNotifyInNpmScript && isNpm();\n\t\tif (!process.stdout.isTTY || suppressForNpm || !this.update) {\n\t\t\treturn this;\n\t\t}\n\n\t\topts = Object.assign({isGlobal: isInstalledGlobally()}, opts);\n\n\t\topts.message = opts.message || 'Update available ' + chalk().dim(this.update.current) + chalk().reset(' â†’ ') +\n\t\t\tchalk().green(this.update.latest) + ' \\nRun ' + chalk().cyan('npm i ' + (opts.isGlobal ? '-g ' : '') + this.packageName) + ' to update';\n\n\t\topts.boxenOpts = opts.boxenOpts || {\n\t\t\tpadding: 1,\n\t\t\tmargin: 1,\n\t\t\talign: 'center',\n\t\t\tborderColor: 'yellow',\n\t\t\tborderStyle: 'round'\n\t\t};\n\n\t\tconst message = '\\n' + boxen()(opts.message, opts.boxenOpts);\n\n\t\tif (opts.defer === false) {\n\t\t\tconsole.error(message);\n\t\t} else {\n\t\t\tprocess.on('exit', () => {\n\t\t\t\tconsole.error(message);\n\t\t\t});\n\n\t\t\tprocess.on('SIGINT', () => {\n\t\t\t\tconsole.error('');\n\t\t\t\tprocess.exit();\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\nmodule.exports = options => {\n\tconst updateNotifier = new UpdateNotifier(options);\n\tupdateNotifier.check();\n\treturn updateNotifier;\n};\n\nmodule.exports.UpdateNotifier = UpdateNotifier;\n"]}