{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/verror/lib/verror.js"],"names":["mod_assertplus","require","mod_util","mod_extsprintf","mod_isError","isError","sprintf","module","exports","VError","SError","WError","MultiError","parseConstructorArguments","args","argv","options","sprintf_args","shortmessage","k","object","bool","strict","array","length","slice","string","map","a","undefined","apply","obj","parsed","cause","ctor","message","Array","prototype","call","arguments","Object","create","name","jse_shortmsg","ok","jse_cause","skipCauseMessage","jse_info","info","Error","captureStackTrace","constructorOpt","constructor","inherits","toString","ve_toString","str","hasOwnProperty","ve_cause","err","rv","findCauseByName","hasCauseWithName","fullStack","stack","errorFromList","errors","arrayOfObject","forEach","e","errorForEach","func","iterError","ase_errors","me_errors","we_toString","we_cause","c"],"mappings":"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","file":"verror.js","sourcesContent":["/*\n * verror.js: richer JavaScript errors\n */\n\nvar mod_assertplus = require('assert-plus');\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\nvar mod_isError = require('core-util-is').isError;\nvar sprintf = mod_extsprintf.sprintf;\n\n/*\n * Public interface\n */\n\n/* So you can 'var VError = require('verror')' */\nmodule.exports = VError;\n/* For compatibility */\nVError.VError = VError;\n/* Other exported classes */\nVError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n\n/*\n * Common function used to parse constructor arguments for VError, WError, and\n * SError.  Named arguments to this function:\n *\n *     strict\t\tforce strict interpretation of sprintf arguments, even\n *     \t\t\tif the options in \"argv\" don't say so\n *\n *     argv\t\terror's constructor arguments, which are to be\n *     \t\t\tinterpreted as described in README.md.  For quick\n *     \t\t\treference, \"argv\" has one of the following forms:\n *\n *          [ sprintf_args... ]           (argv[0] is a string)\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\n *          [ options, sprintf_args... ]  (argv[0] is an object)\n *\n * This function normalizes these forms, producing an object with the following\n * properties:\n *\n *    options           equivalent to \"options\" in third form.  This will never\n *    \t\t\tbe a direct reference to what the caller passed in\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\n *    \t\t\tmodified.\n *\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\n *    \t\t\tinto account as described in README.md.\n */\nfunction parseConstructorArguments(args)\n{\n\tvar argv, options, sprintf_args, shortmessage, k;\n\n\tmod_assertplus.object(args, 'args');\n\tmod_assertplus.bool(args.strict, 'args.strict');\n\tmod_assertplus.array(args.argv, 'args.argv');\n\targv = args.argv;\n\n\t/*\n\t * First, figure out which form of invocation we've been given.\n\t */\n\tif (argv.length === 0) {\n\t\toptions = {};\n\t\tsprintf_args = [];\n\t} else if (mod_isError(argv[0])) {\n\t\toptions = { 'cause': argv[0] };\n\t\tsprintf_args = argv.slice(1);\n\t} else if (typeof (argv[0]) === 'object') {\n\t\toptions = {};\n\t\tfor (k in argv[0]) {\n\t\t\toptions[k] = argv[0][k];\n\t\t}\n\t\tsprintf_args = argv.slice(1);\n\t} else {\n\t\tmod_assertplus.string(argv[0],\n\t\t    'first argument to VError, SError, or WError ' +\n\t\t    'constructor must be a string, object, or Error');\n\t\toptions = {};\n\t\tsprintf_args = argv;\n\t}\n\n\t/*\n\t * Now construct the error's message.\n\t *\n\t * extsprintf (which we invoke here with our caller's arguments in order\n\t * to construct this Error's message) is strict in its interpretation of\n\t * values to be processed by the \"%s\" specifier.  The value passed to\n\t * extsprintf must actually be a string or something convertible to a\n\t * String using .toString().  Passing other values (notably \"null\" and\n\t * \"undefined\") is considered a programmer error.  The assumption is\n\t * that if you actually want to print the string \"null\" or \"undefined\",\n\t * then that's easy to do that when you're calling extsprintf; on the\n\t * other hand, if you did NOT want that (i.e., there's actually a bug\n\t * where the program assumes some variable is non-null and tries to\n\t * print it, which might happen when constructing a packet or file in\n\t * some specific format), then it's better to stop immediately than\n\t * produce bogus output.\n\t *\n\t * However, sometimes the bug is only in the code calling VError, and a\n\t * programmer might prefer to have the error message contain \"null\" or\n\t * \"undefined\" rather than have the bug in the error path crash the\n\t * program (making the first bug harder to identify).  For that reason,\n\t * by default VError converts \"null\" or \"undefined\" arguments to their\n\t * string representations and passes those to extsprintf.  Programmers\n\t * desiring the strict behavior can use the SError class or pass the\n\t * \"strict\" option to the VError constructor.\n\t */\n\tmod_assertplus.object(options);\n\tif (!options.strict && !args.strict) {\n\t\tsprintf_args = sprintf_args.map(function (a) {\n\t\t\treturn (a === null ? 'null' :\n\t\t\t    a === undefined ? 'undefined' : a);\n\t\t});\n\t}\n\n\tif (sprintf_args.length === 0) {\n\t\tshortmessage = '';\n\t} else {\n\t\tshortmessage = sprintf.apply(null, sprintf_args);\n\t}\n\n\treturn ({\n\t    'options': options,\n\t    'shortmessage': shortmessage\n\t});\n}\n\n/*\n * See README.md for reference documentation.\n */\nfunction VError()\n{\n\tvar args, obj, parsed, cause, ctor, message, k;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\n\t/*\n\t * This is a regrettable pattern, but JavaScript's built-in Error class\n\t * is defined to work this way, so we allow the constructor to be called\n\t * without \"new\".\n\t */\n\tif (!(this instanceof VError)) {\n\t\tobj = Object.create(VError.prototype);\n\t\tVError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\t/*\n\t * For convenience and backwards compatibility, we support several\n\t * different calling forms.  Normalize them here.\n\t */\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\t/*\n\t * If we've been given a name, apply it now.\n\t */\n\tif (parsed.options.name) {\n\t\tmod_assertplus.string(parsed.options.name,\n\t\t    'error\\'s \"name\" must be a string');\n\t\tthis.name = parsed.options.name;\n\t}\n\n\t/*\n\t * For debugging, we keep track of the original short message (attached\n\t * this Error particularly) separately from the complete message (which\n\t * includes the messages of our cause chain).\n\t */\n\tthis.jse_shortmsg = parsed.shortmessage;\n\tmessage = parsed.shortmessage;\n\n\t/*\n\t * If we've been given a cause, record a reference to it and update our\n\t * message appropriately.\n\t */\n\tcause = parsed.options.cause;\n\tif (cause) {\n\t\tmod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n\t\tthis.jse_cause = cause;\n\n\t\tif (!parsed.options.skipCauseMessage) {\n\t\t\tmessage += ': ' + cause.message;\n\t\t}\n\t}\n\n\t/*\n\t * If we've been given an object with properties, shallow-copy that\n\t * here.  We don't want to use a deep copy in case there are non-plain\n\t * objects here, but we don't want to use the original object in case\n\t * the caller modifies it later.\n\t */\n\tthis.jse_info = {};\n\tif (parsed.options.info) {\n\t\tfor (k in parsed.options.info) {\n\t\t\tthis.jse_info[k] = parsed.options.info[k];\n\t\t}\n\t}\n\n\tthis.message = message;\n\tError.call(this, message);\n\n\tif (Error.captureStackTrace) {\n\t\tctor = parsed.options.constructorOpt || this.constructor;\n\t\tError.captureStackTrace(this, ctor);\n\t}\n\n\treturn (this);\n}\n\nmod_util.inherits(VError, Error);\nVError.prototype.name = 'VError';\n\nVError.prototype.toString = function ve_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\n\treturn (str);\n};\n\n/*\n * This method is provided for compatibility.  New callers should use\n * VError.cause() instead.  That method also uses the saner `null` return value\n * when there is no cause.\n */\nVError.prototype.cause = function ve_cause()\n{\n\tvar cause = VError.cause(this);\n\treturn (cause === null ? undefined : cause);\n};\n\n/*\n * Static methods\n *\n * These class-level methods are provided so that callers can use them on\n * instances of Errors that are not VErrors.  New interfaces should be provided\n * only using static methods to eliminate the class of programming mistake where\n * people fail to check whether the Error object has the corresponding methods.\n */\n\nVError.cause = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\treturn (mod_isError(err.jse_cause) ? err.jse_cause : null);\n};\n\nVError.info = function (err)\n{\n\tvar rv, cause, k;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tcause = VError.cause(err);\n\tif (cause !== null) {\n\t\trv = VError.info(cause);\n\t} else {\n\t\trv = {};\n\t}\n\n\tif (typeof (err.jse_info) == 'object' && err.jse_info !== null) {\n\t\tfor (k in err.jse_info) {\n\t\t\trv[k] = err.jse_info[k];\n\t\t}\n\t}\n\n\treturn (rv);\n};\n\nVError.findCauseByName = function (err, name)\n{\n\tvar cause;\n\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.string(name, 'name');\n\tmod_assertplus.ok(name.length > 0, 'name cannot be empty');\n\n\tfor (cause = err; cause !== null; cause = VError.cause(cause)) {\n\t\tmod_assertplus.ok(mod_isError(cause));\n\t\tif (cause.name == name) {\n\t\t\treturn (cause);\n\t\t}\n\t}\n\n\treturn (null);\n};\n\nVError.hasCauseWithName = function (err, name)\n{\n\treturn (VError.findCauseByName(err, name) !== null);\n};\n\nVError.fullStack = function (err)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\n\tvar cause = VError.cause(err);\n\n\tif (cause) {\n\t\treturn (err.stack + '\\ncaused by: ' + VError.fullStack(cause));\n\t}\n\n\treturn (err.stack);\n};\n\nVError.errorFromList = function (errors)\n{\n\tmod_assertplus.arrayOfObject(errors, 'errors');\n\n\tif (errors.length === 0) {\n\t\treturn (null);\n\t}\n\n\terrors.forEach(function (e) {\n\t\tmod_assertplus.ok(mod_isError(e));\n\t});\n\n\tif (errors.length == 1) {\n\t\treturn (errors[0]);\n\t}\n\n\treturn (new MultiError(errors));\n};\n\nVError.errorForEach = function (err, func)\n{\n\tmod_assertplus.ok(mod_isError(err), 'err must be an Error');\n\tmod_assertplus.func(func, 'func');\n\n\tif (err instanceof MultiError) {\n\t\terr.errors().forEach(function iterError(e) { func(e); });\n\t} else {\n\t\tfunc(err);\n\t}\n};\n\n\n/*\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\n * \"undefined\" as string arguments to the formatter.\n */\nfunction SError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof SError)) {\n\t\tobj = Object.create(SError.prototype);\n\t\tSError.apply(obj, arguments);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': true\n\t});\n\n\toptions = parsed.options;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\n/*\n * We don't bother setting SError.prototype.name because once constructed,\n * SErrors are just like VErrors.\n */\nmod_util.inherits(SError, VError);\n\n\n/*\n * Represents a collection of errors for the purpose of consumers that generally\n * only deal with one error.  Callers can extract the individual errors\n * contained in this object, but may also just treat it as a normal single\n * error, in which case a summary message will be printed.\n */\nfunction MultiError(errors)\n{\n\tmod_assertplus.array(errors, 'list of errors');\n\tmod_assertplus.ok(errors.length > 0, 'must be at least one error');\n\tthis.ase_errors = errors;\n\n\tVError.call(this, {\n\t    'cause': errors[0]\n\t}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n}\n\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = 'MultiError';\n\nMultiError.prototype.errors = function me_errors()\n{\n\treturn (this.ase_errors.slice(0));\n};\n\n\n/*\n * See README.md for reference details.\n */\nfunction WError()\n{\n\tvar args, obj, parsed, options;\n\n\targs = Array.prototype.slice.call(arguments, 0);\n\tif (!(this instanceof WError)) {\n\t\tobj = Object.create(WError.prototype);\n\t\tWError.apply(obj, args);\n\t\treturn (obj);\n\t}\n\n\tparsed = parseConstructorArguments({\n\t    'argv': args,\n\t    'strict': false\n\t});\n\n\toptions = parsed.options;\n\toptions['skipCauseMessage'] = true;\n\tVError.call(this, options, '%s', parsed.shortmessage);\n\n\treturn (this);\n}\n\nmod_util.inherits(WError, VError);\nWError.prototype.name = 'WError';\n\nWError.prototype.toString = function we_toString()\n{\n\tvar str = (this.hasOwnProperty('name') && this.name ||\n\t\tthis.constructor.name || this.constructor.prototype.name);\n\tif (this.message)\n\t\tstr += ': ' + this.message;\n\tif (this.jse_cause && this.jse_cause.message)\n\t\tstr += '; caused by ' + this.jse_cause.toString();\n\n\treturn (str);\n};\n\n/*\n * For purely historical reasons, WError's cause() function allows you to set\n * the cause.\n */\nWError.prototype.cause = function we_cause(c)\n{\n\tif (mod_isError(c))\n\t\tthis.jse_cause = c;\n\n\treturn (this.jse_cause);\n};\n"]}