{"version":3,"sources":["../../../../../node_modules/npm/node_modules/term-size/index.js"],"names":["path","require","execa","create","columns","rows","parseInt","module","exports","env","process","stdout","stderr","COLUMNS","LINES","platform","size","sync","join","__dirname","split","length","err","shellSync","match"],"mappings":"AAAA;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;;AAEA,IAAME,SAAS,SAATA,MAAS,CAACC,OAAD,EAAUC,IAAV;AAAA,QAAoB;AAClCD,WAASE,SAASF,OAAT,EAAkB,EAAlB,CADyB;AAElCC,QAAMC,SAASD,IAAT,EAAe,EAAf;AAF4B,EAApB;AAAA,CAAf;;AAKAE,OAAOC,OAAP,GAAiB,YAAM;AACtB,KAAMC,MAAMC,QAAQD,GAApB;AACA,KAAME,SAASD,QAAQC,MAAvB;AACA,KAAMC,SAASF,QAAQE,MAAvB;;AAEA,KAAID,UAAUA,OAAOP,OAAjB,IAA4BO,OAAON,IAAvC,EAA6C;AAC5C,SAAOF,OAAOQ,OAAOP,OAAd,EAAuBO,OAAON,IAA9B,CAAP;AACA;;AAED,KAAIO,UAAUA,OAAOR,OAAjB,IAA4BQ,OAAOP,IAAvC,EAA6C;AAC5C,SAAOF,OAAOS,OAAOR,OAAd,EAAuBQ,OAAOP,IAA9B,CAAP;AACA;;AAED;AACA,KAAII,IAAII,OAAJ,IAAeJ,IAAIK,KAAvB,EAA8B;AAC7B,SAAOX,OAAOM,IAAII,OAAX,EAAoBJ,IAAIK,KAAxB,CAAP;AACA;;AAED,KAAIJ,QAAQK,QAAR,KAAqB,OAAzB,EAAkC;AACjC,MAAI;AACH;AACA,OAAMC,OAAOd,MAAMe,IAAN,CAAWjB,KAAKkB,IAAL,CAAUC,SAAV,EAAqB,8BAArB,CAAX,EAAiER,MAAjE,CAAwES,KAAxE,CAA8E,OAA9E,CAAb;;AAEA,OAAIJ,KAAKK,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAOlB,OAAOa,KAAK,CAAL,CAAP,EAAgBA,KAAK,CAAL,CAAhB,CAAP;AACA;AACD,GAPD,CAOE,OAAOM,GAAP,EAAY,CAAE;AAChB,EATD,MASO;AACN,MAAIZ,QAAQK,QAAR,KAAqB,QAAzB,EAAmC;AAClC,OAAI;AACH;AACA,QAAMC,QAAOd,MAAMqB,SAAN,CAAgBvB,KAAKkB,IAAL,CAAUC,SAAV,EAAqB,wBAArB,CAAhB,EAAgER,MAAhE,CAAuES,KAAvE,CAA6E,OAA7E,CAAb;;AAEA,QAAIJ,MAAKK,MAAL,KAAgB,CAApB,EAAuB;AACtB,YAAOlB,OAAOa,MAAK,CAAL,CAAP,EAAgBA,MAAK,CAAL,CAAhB,CAAP;AACA;AACD,IAPD,CAOE,OAAOM,GAAP,EAAY,CAAE;AAChB;;AAED;AACA;AACA,MAAI;AACH,OAAMN,SAAOd,MAAMe,IAAN,CAAW,QAAX,EAAqB,CAAC,IAAD,CAArB,EAA6BN,MAA7B,CAAoCa,KAApC,CAA0C,MAA1C,CAAb;;AAEA,OAAIR,OAAKK,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAOlB,OAAOa,OAAK,CAAL,CAAP,EAAgBA,OAAK,CAAL,CAAhB,CAAP;AACA;AACD,GAND,CAME,OAAOM,GAAP,EAAY,CAAE;;AAEhB,MAAI;AACH,OAAMlB,UAAUF,MAAMe,IAAN,CAAW,MAAX,EAAmB,CAAC,MAAD,CAAnB,EAA6BN,MAA7C;AACA,OAAMN,OAAOH,MAAMe,IAAN,CAAW,MAAX,EAAmB,CAAC,OAAD,CAAnB,EAA8BN,MAA3C;;AAEA,OAAIP,WAAWC,IAAf,EAAqB;AACpB,WAAOF,OAAOC,OAAP,EAAgBC,IAAhB,CAAP;AACA;AACD,GAPD,CAOE,OAAOiB,GAAP,EAAY,CAAE;AAChB;;AAED,QAAOnB,OAAO,EAAP,EAAW,EAAX,CAAP;AACA,CA5DD","file":"index.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst execa = require('execa');\n\nconst create = (columns, rows) => ({\n\tcolumns: parseInt(columns, 10),\n\trows: parseInt(rows, 10)\n});\n\nmodule.exports = () => {\n\tconst env = process.env;\n\tconst stdout = process.stdout;\n\tconst stderr = process.stderr;\n\n\tif (stdout && stdout.columns && stdout.rows) {\n\t\treturn create(stdout.columns, stdout.rows);\n\t}\n\n\tif (stderr && stderr.columns && stderr.rows) {\n\t\treturn create(stderr.columns, stderr.rows);\n\t}\n\n\t// These values are static, so not the first choice\n\tif (env.COLUMNS && env.LINES) {\n\t\treturn create(env.COLUMNS, env.LINES);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\ttry {\n\t\t\t// Binary: https://github.com/sindresorhus/win-term-size\n\t\t\tconst size = execa.sync(path.join(__dirname, 'vendor/windows/term-size.exe')).stdout.split(/\\r?\\n/);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (err) {}\n\t} else {\n\t\tif (process.platform === 'darwin') {\n\t\t\ttry {\n\t\t\t\t// Binary: https://github.com/sindresorhus/macos-term-size\n\t\t\t\tconst size = execa.shellSync(path.join(__dirname, 'vendor/macos/term-size')).stdout.split(/\\r?\\n/);\n\n\t\t\t\tif (size.length === 2) {\n\t\t\t\t\treturn create(size[0], size[1]);\n\t\t\t\t}\n\t\t\t} catch (err) {}\n\t\t}\n\n\t\t// `resize` is preferred as it works even when all file descriptors are redirected\n\t\t// https://linux.die.net/man/1/resize\n\t\ttry {\n\t\t\tconst size = execa.sync('resize', ['-u']).stdout.match(/\\d+/g);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (err) {}\n\n\t\ttry {\n\t\t\tconst columns = execa.sync('tput', ['cols']).stdout;\n\t\t\tconst rows = execa.sync('tput', ['lines']).stdout;\n\n\t\t\tif (columns && rows) {\n\t\t\t\treturn create(columns, rows);\n\t\t\t}\n\t\t} catch (err) {}\n\t}\n\n\treturn create(80, 24);\n};\n"]}