{"version":3,"sources":["../../../../../node_modules/npm/node_modules/resolve-from/index.js"],"names":["path","require","Module","fs","resolveFrom","fromDir","moduleId","silent","TypeError","realpathSync","err","code","resolve","fromFile","join","resolveFileName","_resolveFilename","id","filename","paths","_nodeModulePaths","module","exports"],"mappings":"AAAA;;;;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,KAAKF,QAAQ,IAAR,CAAX;;AAEA,IAAMG,cAAc,SAAdA,WAAc,CAACC,OAAD,EAAUC,QAAV,EAAoBC,MAApB,EAA+B;AAClD,KAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAChC,QAAM,IAAIG,SAAJ,8DAA6EH,OAA7E,yCAA6EA,OAA7E,SAAN;AACA;;AAED,KAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AACjC,QAAM,IAAIE,SAAJ,+DAA8EF,QAA9E,yCAA8EA,QAA9E,SAAN;AACA;;AAED,KAAI;AACHD,YAAUF,GAAGM,YAAH,CAAgBJ,OAAhB,CAAV;AACA,EAFD,CAEE,OAAOK,GAAP,EAAY;AACb,MAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AAC1BN,aAAUL,KAAKY,OAAL,CAAaP,OAAb,CAAV;AACA,GAFD,MAEO,IAAIE,MAAJ,EAAY;AAClB,UAAO,IAAP;AACA,GAFM,MAEA;AACN,SAAMG,GAAN;AACA;AACD;;AAED,KAAMG,WAAWb,KAAKc,IAAL,CAAUT,OAAV,EAAmB,SAAnB,CAAjB;;AAEA,KAAMU,kBAAkB,SAAlBA,eAAkB;AAAA,SAAMb,OAAOc,gBAAP,CAAwBV,QAAxB,EAAkC;AAC/DW,OAAIJ,QAD2D;AAE/DK,aAAUL,QAFqD;AAG/DM,UAAOjB,OAAOkB,gBAAP,CAAwBf,OAAxB;AAHwD,GAAlC,CAAN;AAAA,EAAxB;;AAMA,KAAIE,MAAJ,EAAY;AACX,MAAI;AACH,UAAOQ,iBAAP;AACA,GAFD,CAEE,OAAOL,GAAP,EAAY;AACb,UAAO,IAAP;AACA;AACD;;AAED,QAAOK,iBAAP;AACA,CAtCD;;AAwCAM,OAAOC,OAAP,GAAiB,UAACjB,OAAD,EAAUC,QAAV;AAAA,QAAuBF,YAAYC,OAAZ,EAAqBC,QAArB,CAAvB;AAAA,CAAjB;AACAe,OAAOC,OAAP,CAAef,MAAf,GAAwB,UAACF,OAAD,EAAUC,QAAV;AAAA,QAAuBF,YAAYC,OAAZ,EAAqBC,QAArB,EAA+B,IAA/B,CAAvB;AAAA,CAAxB","file":"index.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDir, moduleId, silent) => {\n\tif (typeof fromDir !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDir = fs.realpathSync(fromDir);\n\t} catch (err) {\n\t\tif (err.code === 'ENOENT') {\n\t\t\tfromDir = path.resolve(fromDir);\n\t\t} else if (silent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDir, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDir)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);\n"]}