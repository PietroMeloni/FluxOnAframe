'use strict';

var url = require('url');
var got = require('got');
var registryUrl = require('registry-url');
var registryAuthToken = require('registry-auth-token');
var semver = require('semver');

module.exports = function (name, opts) {
	var scope = name.split('/')[0];
	var regUrl = registryUrl(scope);
	var pkgUrl = url.resolve(regUrl, encodeURIComponent(name).replace(/^%40/, '@'));
	var authInfo = registryAuthToken(regUrl, { recursive: true });

	opts = Object.assign({
		version: 'latest'
	}, opts);

	var headers = {
		accept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'
	};

	if (opts.fullMetadata) {
		delete headers.accept;
	}

	if (authInfo) {
		headers.authorization = authInfo.type + ' ' + authInfo.token;
	}

	return got(pkgUrl, { json: true, headers: headers }).then(function (res) {
		var data = res.body;
		var version = opts.version;

		if (opts.allVersions) {
			return data;
		}

		if (data['dist-tags'][version]) {
			data = data.versions[data['dist-tags'][version]];
		} else if (version) {
			if (!data.versions[version]) {
				var versions = Object.keys(data.versions);
				version = semver.maxSatisfying(versions, version);

				if (!version) {
					throw new Error('Version doesn\'t exist');
				}
			}

			data = data.versions[version];

			if (!data) {
				throw new Error('Version doesn\'t exist');
			}
		}

		return data;
	}).catch(function (err) {
		if (err.statusCode === 404) {
			throw new Error('Package `' + name + '` doesn\'t exist');
		}

		throw err;
	});
};
//# sourceMappingURL=index.js.map