{"version":3,"sources":["../../../../../node_modules/npm/node_modules/stream-each/index.js"],"names":["eos","require","shift","module","exports","each","stream","fn","cb","want","error","ended","running","calling","on","onreadable","readable","writable","done","err","read","afterRead","destroy","data"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,eAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,cAAR,CAAZ;;AAEAE,OAAOC,OAAP,GAAiBC,IAAjB;;AAEA,SAASA,IAAT,CAAeC,MAAf,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AAC7B,MAAIC,OAAO,IAAX;AACA,MAAIC,QAAQ,IAAZ;AACA,MAAIC,QAAQ,KAAZ;AACA,MAAIC,UAAU,KAAd;AACA,MAAIC,UAAU,KAAd;;AAEAP,SAAOQ,EAAP,CAAU,UAAV,EAAsBC,UAAtB;AACAA;;AAEA,MAAIP,EAAJ,EAAQR,IAAIM,MAAJ,EAAY,EAACU,UAAU,IAAX,EAAiBC,UAAU,KAA3B,EAAZ,EAA+CC,IAA/C;AACR,SAAOZ,MAAP;;AAEA,WAASY,IAAT,CAAeC,GAAf,EAAoB;AAClB,QAAI,CAACT,KAAL,EAAYA,QAAQS,GAAR;AACZR,YAAQ,IAAR;AACA,QAAI,CAACC,OAAL,EAAcJ,GAAGE,KAAH;AACf;;AAED,WAASK,UAAT,GAAuB;AACrB,QAAIN,IAAJ,EAAUW;AACX;;AAED,WAASC,SAAT,CAAoBF,GAApB,EAAyB;AACvBP,cAAU,KAAV;;AAEA,QAAIO,GAAJ,EAAS;AACPT,cAAQS,GAAR;AACA,UAAIR,KAAJ,EAAW,OAAOH,GAAGE,KAAH,CAAP;AACXJ,aAAOgB,OAAP,CAAeH,GAAf;AACA;AACD;AACD,QAAIR,KAAJ,EAAW,OAAOH,GAAGE,KAAH,CAAP;AACX,QAAI,CAACG,OAAL,EAAcO;AACf;;AAED,WAASA,IAAT,GAAiB;AACf,WAAO,CAACR,OAAD,IAAY,CAACD,KAApB,EAA2B;AACzBF,aAAO,KAAP;;AAEA,UAAIc,OAAOrB,MAAMI,MAAN,CAAX;AACA,UAAIiB,SAAS,IAAb,EAAmB;AACjBd,eAAO,IAAP;AACA;AACD;;AAEDG,gBAAU,IAAV;AACAC,gBAAU,IAAV;AACAN,SAAGgB,IAAH,EAASF,SAAT;AACAR,gBAAU,KAAV;AACD;AACF;AACF","file":"index.js","sourcesContent":["var eos = require('end-of-stream')\nvar shift = require('stream-shift')\n\nmodule.exports = each\n\nfunction each (stream, fn, cb) {\n  var want = true\n  var error = null\n  var ended = false\n  var running = false\n  var calling = false\n\n  stream.on('readable', onreadable)\n  onreadable()\n\n  if (cb) eos(stream, {readable: true, writable: false}, done)\n  return stream\n\n  function done (err) {\n    if (!error) error = err\n    ended = true\n    if (!running) cb(error)\n  }\n\n  function onreadable () {\n    if (want) read()\n  }\n\n  function afterRead (err) {\n    running = false\n\n    if (err) {\n      error = err\n      if (ended) return cb(error)\n      stream.destroy(err)\n      return\n    }\n    if (ended) return cb(error)\n    if (!calling) read()\n  }\n\n  function read () {\n    while (!running && !ended) {\n      want = false\n\n      var data = shift(stream)\n      if (data === null) {\n        want = true\n        return\n      }\n\n      running = true\n      calling = true\n      fn(data, afterRead)\n      calling = false\n    }\n  }\n}\n"]}