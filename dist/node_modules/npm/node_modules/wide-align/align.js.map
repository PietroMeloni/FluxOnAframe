{"version":3,"sources":["../../../../../node_modules/npm/node_modules/wide-align/align.js"],"names":["stringWidth","require","exports","center","alignCenter","left","alignLeft","right","alignRight","createPadding","width","result","string","n","Math","floor","str","trimmed","trimRight","length","padding","strWidth","trimLeft","trim","padLeft","padRight","padLeftBy","parseInt"],"mappings":"AAAA;;AACA,IAAIA,cAAcC,QAAQ,cAAR,CAAlB;;AAEAC,QAAQC,MAAR,GAAiBC,WAAjB;AACAF,QAAQG,IAAR,GAAeC,SAAf;AACAJ,QAAQK,KAAR,GAAgBC,UAAhB;;AAEA;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,SAAS,EAAb;AACA,MAAIC,SAAS,GAAb;AACA,MAAIC,IAAIH,KAAR;AACA,KAAG;AACD,QAAIG,IAAI,CAAR,EAAW;AACTF,gBAAUC,MAAV;AACD;AACDC,QAAIC,KAAKC,KAAL,CAAWF,IAAI,CAAf,CAAJ;AACAD,cAAUA,MAAV;AACD,GAND,QAMSC,CANT;;AAQA,SAAOF,MAAP;AACD;;AAED,SAASL,SAAT,CAAoBU,GAApB,EAAyBN,KAAzB,EAAgC;AAC9B,MAAIO,UAAUD,IAAIE,SAAJ,EAAd;AACA,MAAID,QAAQE,MAAR,KAAmB,CAAnB,IAAwBH,IAAIG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAII,UAAU,EAAd;AACA,MAAIC,WAAWrB,YAAYiB,OAAZ,CAAf;;AAEA,MAAII,WAAWX,KAAf,EAAsB;AACpBU,cAAUX,cAAcC,QAAQW,QAAtB,CAAV;AACD;;AAED,SAAOJ,UAAUG,OAAjB;AACD;;AAED,SAASZ,UAAT,CAAqBQ,GAArB,EAA0BN,KAA1B,EAAiC;AAC/B,MAAIO,UAAUD,IAAIM,QAAJ,EAAd;AACA,MAAIL,QAAQE,MAAR,KAAmB,CAAnB,IAAwBH,IAAIG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAII,UAAU,EAAd;AACA,MAAIC,WAAWrB,YAAYiB,OAAZ,CAAf;;AAEA,MAAII,WAAWX,KAAf,EAAsB;AACpBU,cAAUX,cAAcC,QAAQW,QAAtB,CAAV;AACD;;AAED,SAAOD,UAAUH,OAAjB;AACD;;AAED,SAASb,WAAT,CAAsBY,GAAtB,EAA2BN,KAA3B,EAAkC;AAChC,MAAIO,UAAUD,IAAIO,IAAJ,EAAd;AACA,MAAIN,QAAQE,MAAR,KAAmB,CAAnB,IAAwBH,IAAIG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAIQ,UAAU,EAAd;AACA,MAAIC,WAAW,EAAf;AACA,MAAIJ,WAAWrB,YAAYiB,OAAZ,CAAf;;AAEA,MAAII,WAAWX,KAAf,EAAsB;AACpB,QAAIgB,YAAYC,SAAS,CAACjB,QAAQW,QAAT,IAAqB,CAA9B,EAAiC,EAAjC,CAAhB;AACAG,cAAUf,cAAciB,SAAd,CAAV;AACAD,eAAWhB,cAAcC,SAASW,WAAWK,SAApB,CAAd,CAAX;AACD;;AAED,SAAOF,UAAUP,OAAV,GAAoBQ,QAA3B;AACD","file":"align.js","sourcesContent":["'use strict'\nvar stringWidth = require('string-width')\n\nexports.center = alignCenter\nexports.left = alignLeft\nexports.right = alignRight\n\n// lodash's way of generating pad characters.\n\nfunction createPadding (width) {\n  var result = ''\n  var string = ' '\n  var n = width\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = Math.floor(n / 2);\n    string += string;\n  } while (n);\n\n  return result;\n}\n\nfunction alignLeft (str, width) {\n  var trimmed = str.trimRight()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padding = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth)\n  }\n\n  return trimmed + padding\n}\n\nfunction alignRight (str, width) {\n  var trimmed = str.trimLeft()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padding = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth)\n  }\n\n  return padding + trimmed\n}\n\nfunction alignCenter (str, width) {\n  var trimmed = str.trim()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padLeft = ''\n  var padRight = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    var padLeftBy = parseInt((width - strWidth) / 2, 10) \n    padLeft = createPadding(padLeftBy)\n    padRight = createPadding(width - (strWidth + padLeftBy))\n  }\n\n  return padLeft + trimmed + padRight\n}\n"]}