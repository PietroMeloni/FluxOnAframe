{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/http-signature/lib/verify.js"],"names":["assert","require","crypto","sshpk","utils","HASH_ALGOS","PK_ALGOS","InvalidAlgorithmError","HttpSignatureError","validateAlgorithm","module","exports","verifySignature","parsedSignature","pubkey","object","Buffer","isBuffer","parseKey","ok","Key","isKey","alg","algorithm","type","v","createVerify","update","signingString","verify","params","signature","verifyHMAC","secret","string","hashAlg","toUpperCase","hmac","createHmac","h1","digest","h2","equals","toString"],"mappings":";;AAAA;;AAEA,IAAIA,SAASC,QAAQ,aAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,QAAQF,QAAQ,OAAR,CAAZ;AACA,IAAIG,QAAQH,QAAQ,SAAR,CAAZ;;AAEA,IAAII,aAAaD,MAAMC,UAAvB;AACA,IAAIC,WAAWF,MAAME,QAArB;AACA,IAAIC,wBAAwBH,MAAMG,qBAAlC;AACA,IAAIC,qBAAqBJ,MAAMI,kBAA/B;AACA,IAAIC,oBAAoBL,MAAMK,iBAA9B;;AAEA;;AAEAC,OAAOC,OAAP,GAAiB;AACf;;;;;;;;;;AAUAC,mBAAiB,SAASA,eAAT,CAAyBC,eAAzB,EAA0CC,MAA1C,EAAkD;AACjEd,WAAOe,MAAP,CAAcF,eAAd,EAA+B,iBAA/B;AACA,QAAI,OAAQC,MAAR,KAAoB,QAApB,IAAgCE,OAAOC,QAAP,CAAgBH,MAAhB,CAApC,EACEA,SAASX,MAAMe,QAAN,CAAeJ,MAAf,CAAT;AACFd,WAAOmB,EAAP,CAAUhB,MAAMiB,GAAN,CAAUC,KAAV,CAAgBP,MAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,CAAV,EAA2C,4BAA3C;;AAEA,QAAIQ,MAAMb,kBAAkBI,gBAAgBU,SAAlC,CAAV;AACA,QAAID,IAAI,CAAJ,MAAW,MAAX,IAAqBA,IAAI,CAAJ,MAAWR,OAAOU,IAA3C,EACE,OAAQ,KAAR;;AAEF,QAAIC,IAAIX,OAAOY,YAAP,CAAoBJ,IAAI,CAAJ,CAApB,CAAR;AACAG,MAAEE,MAAF,CAASd,gBAAgBe,aAAzB;AACA,WAAQH,EAAEI,MAAF,CAAShB,gBAAgBiB,MAAhB,CAAuBC,SAAhC,EAA2C,QAA3C,CAAR;AACD,GAxBc;;AA0Bf;;;;;;;;;;AAUAC,cAAY,SAASA,UAAT,CAAoBnB,eAApB,EAAqCoB,MAArC,EAA6C;AACvDjC,WAAOe,MAAP,CAAcF,eAAd,EAA+B,YAA/B;AACAb,WAAOkC,MAAP,CAAcD,MAAd,EAAsB,QAAtB;;AAEA,QAAIX,MAAMb,kBAAkBI,gBAAgBU,SAAlC,CAAV;AACA,QAAID,IAAI,CAAJ,MAAW,MAAf,EACE,OAAQ,KAAR;;AAEF,QAAIa,UAAUb,IAAI,CAAJ,EAAOc,WAAP,EAAd;;AAEA,QAAIC,OAAOnC,OAAOoC,UAAP,CAAkBH,OAAlB,EAA2BF,MAA3B,CAAX;AACAI,SAAKV,MAAL,CAAYd,gBAAgBe,aAA5B;;AAEA;;;;;;;AAOA,QAAIW,KAAKrC,OAAOoC,UAAP,CAAkBH,OAAlB,EAA2BF,MAA3B,CAAT;AACAM,OAAGZ,MAAH,CAAUU,KAAKG,MAAL,EAAV;AACAD,SAAKA,GAAGC,MAAH,EAAL;AACA,QAAIC,KAAKvC,OAAOoC,UAAP,CAAkBH,OAAlB,EAA2BF,MAA3B,CAAT;AACAQ,OAAGd,MAAH,CAAU,IAAIX,MAAJ,CAAWH,gBAAgBiB,MAAhB,CAAuBC,SAAlC,EAA6C,QAA7C,CAAV;AACAU,SAAKA,GAAGD,MAAH,EAAL;;AAEA;AACA,QAAI,OAAQD,EAAR,KAAgB,QAApB,EACE,OAAQA,OAAOE,EAAf;AACF;AACA,QAAIzB,OAAOC,QAAP,CAAgBsB,EAAhB,KAAuB,CAACA,GAAGG,MAA/B,EACE,OAAQH,GAAGI,QAAH,CAAY,QAAZ,MAA0BF,GAAGE,QAAH,CAAY,QAAZ,CAAlC;;AAEF,WAAQJ,GAAGG,MAAH,CAAUD,EAAV,CAAR;AACD;AAvEc,CAAjB","file":"verify.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n"]}