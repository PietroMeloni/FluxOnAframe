{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/http-signature/lib/utils.js"],"names":["assert","require","sshpk","util","HASH_ALGOS","PK_ALGOS","HttpSignatureError","message","caller","Error","captureStackTrace","name","inherits","InvalidAlgorithmError","call","validateAlgorithm","algorithm","alg","toLowerCase","split","length","toUpperCase","module","exports","sshKeyToPEM","key","string","k","parseKey","toString","fingerprint","pemToRsaSSHKey","pem","comment","equal"],"mappings":"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","file":"utils.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n"]}