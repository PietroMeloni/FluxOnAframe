{"version":3,"sources":["../../../../../node_modules/npm/node_modules/ignore-walk/index.js"],"names":["fs","require","path","EE","EventEmitter","Minimatch","Walker","opts","process","cwd","basename","ignoreFiles","ignoreRules","parent","includeEmpty","root","follow","result","entries","sawError","a","b","localeCompare","ev","data","ret","sort","emit","readdir","er","onReaddir","e","indexOf","length","push","substr","hasIg","some","isIgnoreFile","addIgnoreFiles","filterEntries","newIg","filter","igCount","then","forEach","addIgnoreFile","file","ig","resolve","readFile","onReadIgnoreFile","mmopt","matchBase","dot","flipNegate","nocase","rules","split","test","line","trim","map","r","filtered","passFile","filterEntry","entry","passDir","entryCount","filt","dir","stat","st","abs","isDirectory","walker","onstat","walkerOpt","on","start","partial","included","pt","f","rule","negate","match","WalkerSync","opt","readdirSync","readFileSync","walk","options","callback","p","Promise","reject","res","walkSync","module","exports","sync"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst EE = require('events').EventEmitter\nconst Minimatch = require('minimatch').Minimatch\n\nclass Walker extends EE {\n  constructor (opts) {\n    opts = opts || {}\n    super(opts)\n    this.path = opts.path || process.cwd()\n    this.basename = path.basename(this.path)\n    this.ignoreFiles = opts.ignoreFiles || [ '.ignore' ]\n    this.ignoreRules = {}\n    this.parent = opts.parent || null\n    this.includeEmpty = !!opts.includeEmpty\n    this.root = this.parent ? this.parent.root : this.path\n    this.follow = !!opts.follow\n    this.result = this.parent ? this.parent.result : []\n    this.entries = null\n    this.sawError = false\n  }\n\n  sort (a, b) {\n    return a.localeCompare(b)\n  }\n\n  emit (ev, data) {\n    let ret = false\n    if (!(this.sawError && ev === 'error')) {\n      if (ev === 'error')\n        this.sawError = true\n      else if (ev === 'done' && !this.parent)\n        data = data.sort(this.sort)\n      if (ev === 'error' && this.parent)\n        ret = this.parent.emit('error', data)\n      else\n        ret = super.emit(ev, data)\n    }\n    return ret\n  }\n\n  start () {\n    fs.readdir(this.path, (er, entries) =>\n      er ? this.emit('error', er) : this.onReaddir(entries))\n    return this\n  }\n\n  isIgnoreFile (e) {\n    return e !== \".\" &&\n      e !== \"..\" &&\n      -1 !== this.ignoreFiles.indexOf(e)\n  }\n\n  onReaddir (entries) {\n    this.entries = entries\n    if (entries.length === 0) {\n      if (this.includeEmpty)\n        this.result.push(this.path.substr(this.root.length + 1))\n      this.emit('done', this.result)\n    } else {\n      const hasIg = this.entries.some(e =>\n        this.isIgnoreFile(e))\n\n      if (hasIg)\n        this.addIgnoreFiles()\n      else\n        this.filterEntries()\n    }\n  }\n\n  addIgnoreFiles () {\n    const newIg = this.entries\n      .filter(e => this.isIgnoreFile(e))\n\n    let igCount = newIg.length\n    const then = _ => {\n      if (--igCount === 0)\n        this.filterEntries()\n    }\n\n    newIg.forEach(e => this.addIgnoreFile(e, then))\n  }\n\n  addIgnoreFile (file, then) {\n    const ig = path.resolve(this.path, file)\n    fs.readFile(ig, 'utf8', (er, data) =>\n      er ? this.emit('error', er) : this.onReadIgnoreFile(file, data, then))\n  }\n\n  onReadIgnoreFile (file, data, then) {\n    const mmopt = {\n      matchBase: true,\n      dot: true,\n      flipNegate: true,\n      nocase: true\n    }\n    const rules = data.split(/\\r?\\n/)\n      .filter(line => !/^#|^$/.test(line.trim()))\n      .map(r => new Minimatch(r, mmopt))\n\n    this.ignoreRules[file] = rules\n\n    then()\n  }\n\n  filterEntries () {\n    // at this point we either have ignore rules, or just inheriting\n    // this exclusion is at the point where we know the list of\n    // entries in the dir, but don't know what they are.  since\n    // some of them *might* be directories, we have to run the\n    // match in dir-mode as well, so that we'll pick up partials\n    // of files that will be included later.  Anything included\n    // at this point will be checked again later once we know\n    // what it is.\n    const filtered = this.entries.map(entry => {\n      // at this point, we don't know if it's a dir or not.\n      const passFile = this.filterEntry(entry)\n      const passDir = this.filterEntry(entry, true)\n      return (passFile || passDir) ? [entry, passFile, passDir] : false\n    }).filter(e => e)\n\n    // now we stat them all\n    // if it's a dir, and passes as a dir, then recurse\n    // if it's not a dir, but passes as a file, add to set\n    let entryCount = filtered.length\n    if (entryCount === 0) {\n      this.emit('done', this.result)\n    } else {\n      const then = _ => {\n        if (-- entryCount === 0)\n          this.emit('done', this.result)\n      }\n      filtered.forEach(filt => {\n        const entry = filt[0]\n        const file = filt[1]\n        const dir = filt[2]\n        this.stat(entry, file, dir, then)\n      })\n    }\n  }\n\n  onstat (st, entry, file, dir, then) {\n    const abs = this.path + '/' + entry\n    if (!st.isDirectory()) {\n      if (file)\n        this.result.push(abs.substr(this.root.length + 1))\n      then()\n    } else {\n      // is a directory\n      if (dir)\n        this.walker(entry, then)\n      else\n        then()\n    }\n  }\n\n  stat (entry, file, dir, then) {\n    const abs = this.path + '/' + entry\n    fs[this.follow ? 'stat' : 'lstat'](abs, (er, st) => {\n      if (er)\n        this.emit('error', er)\n      else\n        this.onstat(st, entry, file, dir, then)\n    })\n  }\n\n  walkerOpt (entry) {\n    return {\n      path: this.path + '/' + entry,\n      parent: this,\n      ignoreFiles: this.ignoreFiles,\n      follow: this.follow,\n      includeEmpty: this.includeEmpty\n    }\n  }\n\n  walker (entry, then) {\n    new Walker(this.walkerOpt(entry)).on('done', then).start()\n  }\n\n  filterEntry (entry, partial) {\n    let included = true\n\n    // this = /a/b/c\n    // entry = d\n    // parent /a/b sees c/d\n    if (this.parent && this.parent.filterEntry) {\n      var pt = this.basename + \"/\" + entry\n      included = this.parent.filterEntry(pt, partial)\n    }\n\n    this.ignoreFiles.forEach(f => {\n      if (this.ignoreRules[f]) {\n        this.ignoreRules[f].forEach(rule => {\n          // negation means inclusion\n          // so if it's negated, and already included, no need to check\n          // likewise if it's neither negated nor included\n          if (rule.negate !== included) {\n            // first, match against /foo/bar\n            // then, against foo/bar\n            // then, in the case of partials, match with a /\n            const match = rule.match('/' + entry) ||\n              rule.match(entry) ||\n              (!!partial && (\n                rule.match('/' + entry + '/') ||\n                rule.match(entry + '/'))) ||\n              (!!partial && rule.negate && (\n                rule.match('/' + entry, true) ||\n                rule.match(entry, true)))\n\n            if (match)\n              included = rule.negate\n          }\n        })\n      }\n    })\n\n    return included\n  }\n}\n\nclass WalkerSync extends Walker {\n  constructor (opt) {\n    super(opt)\n  }\n\n  start () {\n    this.onReaddir(fs.readdirSync(this.path))\n    return this\n  }\n\n  addIgnoreFile (file, then) {\n    const ig = path.resolve(this.path, file)\n    this.onReadIgnoreFile(file, fs.readFileSync(ig, 'utf8'), then)\n  }\n\n  stat (entry, file, dir, then) {\n    const abs = this.path + '/' + entry\n    const st = fs[this.follow ? 'statSync' : 'lstatSync'](abs)\n    this.onstat(st, entry, file, dir, then)\n  }\n\n  walker (entry, then) {\n    new WalkerSync(this.walkerOpt(entry)).start()\n    then()\n  }\n}\n\nconst walk = (options, callback) => {\n  const p = new Promise((resolve, reject) => {\n    new Walker(options).on('done', resolve).on('error', reject).start()\n  })\n  return callback ? p.then(res => callback(null, res), callback) : p\n}\n\nconst walkSync = options => {\n  return new WalkerSync(options).start().result\n}\n\nmodule.exports = walk\nwalk.sync = walkSync\nwalk.Walker = Walker\nwalk.WalkerSync = WalkerSync\n"]}