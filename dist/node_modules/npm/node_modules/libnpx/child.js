'use strict';

var _templateObject = _taggedTemplateLiteral(['command not found: ', ''], ['command not found: ', '']),
    _templateObject2 = _taggedTemplateLiteral(['Command failed: ', ' ', ''], ['Command failed: ', ' ', '']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var cp = require('child_process');
var path = require('path');

module.exports.runCommand = runCommand;
function runCommand(command, opts) {
  var cmd = opts.call || command || opts.command;
  var copts = (opts.call ? [] : opts.cmdOpts) || [];
  return spawn(cmd, copts, {
    shell: opts.shell || !!opts.call,
    stdio: opts.stdio || 'inherit'
  }).catch(function (err) {
    if (err.code === 'ENOENT') {
      err = new Error('npx: ' + require('./y.js')(_templateObject, path.basename(cmd)));
      err.exitCode = 127;
    } else {
      err.message = require('./y.js')(_templateObject2, cmd, err.message);
    }
    throw err;
  });
}

module.exports.spawn = spawn;
function spawn(cmd, args, opts) {
  opts = opts || {};
  opts.shell = opts.shell || process.platform === 'win32';
  return new Promise(function (resolve, reject) {
    var child = cp.spawn(cmd, args, opts);
    var stdout = '';
    var stderr = '';
    child.stdout && child.stdout.on('data', function (d) {
      stdout += d;
    });
    child.stderr && child.stderr.on('data', function (d) {
      stderr += d;
    });
    child.on('error', reject);
    child.on('close', function (code) {
      if (code) {
        var err = new Error(require('./y.js')(_templateObject2, cmd, args.join(' ')));
        err.isOperational = true;
        err.stderr = stderr;
        err.exitCode = code;
        reject(err);
      } else {
        resolve({ code: code, stdout: stdout, stderr: stderr });
      }
    });
  });
}

module.exports.exec = exec;
function exec(cmd, args, opts) {
  opts = opts || {};
  return new Promise(function (resolve, reject) {
    cp.exec(escapeArg(cmd, true) + ' ' + args.join(' '), opts, function (err, stdout) {
      if (err) {
        if (typeof err.code === 'number') {
          err.exitCode = err.code;
        }
        reject(err);
      } else {
        resolve(stdout);
      }
    });
  });
}

module.exports.escapeArg = escapeArg;
function escapeArg(str, asPath) {
  return process.platform === 'win32' && asPath ? path.normalize(str).split(/\\/).map(function (s) {
    return s.match(/\s+/) ? '"' + s + '"' : s;
  }).join('\\') : process.platform === 'win32' ? '"' + str + '"' : str.match(/[^-_.~/\w]/) ? '\'' + str.replace(/'/g, "'\"'\"'") + '\'' : str;
}
//# sourceMappingURL=child.js.map