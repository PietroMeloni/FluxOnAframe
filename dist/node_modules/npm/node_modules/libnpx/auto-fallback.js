'use strict';

var _templateObject = _taggedTemplateLiteral(['command not found: ', ''], ['command not found: ', '']),
    _templateObject2 = _taggedTemplateLiteral(['', ' not found. Trying with npx...'], ['', ' not found. Trying with npx...']),
    _templateObject3 = _taggedTemplateLiteral(['Only Bash, Zsh, and Fish shells are supported :('], ['Only Bash, Zsh, and Fish shells are supported :(']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Y = require('./y.js');

function mkPosix(opts) {
  return '\ncommand_not_found_' + (opts.isBash ? 'handle' : 'handler') + '() {\n  # Do not run within a pipe\n  if test ! -t 1; then\n    >&2 echo "' + Y(_templateObject, '$1') + '"\n    return 127\n  fi\n  if which npx > /dev/null; then\n    echo "' + Y(_templateObject2, '$1') + '" >&2\n  else\n    return 127\n  fi\n  if ! [[ $1 =~ @ ]]; then\n    npx --no-install "$@"\n  else\n    npx "$@"\n  fi\n  return $?\n}';
}

function mkFish(opts) {
  return '\nfunction __fish_command_not_found_on_interactive --on-event fish_prompt\n  functions --erase __fish_command_not_found_handler\n  functions --erase __fish_command_not_found_setup\n\n  function __fish_command_not_found_handler --on-event fish_command_not_found\n    if which npx > /dev/null\n        echo "' + Y(_templateObject2, '$argv[1]') + '" >&2\n    else\n        return 127\n    end\n    if string match -q -r @ $argv[1]\n        npx $argv\n    else\n        npx --no-install $argv\n    end\n  end\n\n  functions --erase __fish_command_not_found_on_interactive\nend';
}

module.exports = autoFallback;
function autoFallback(shell, fromEnv, opts) {
  if (shell.includes('bash')) {
    return mkPosix({ isBash: true, install: opts.install });
  }

  if (shell.includes('zsh')) {
    return mkPosix({ isBash: false, install: opts.install });
  }

  if (shell.includes('fish')) {
    return mkFish(opts);
  }

  if (fromEnv) {
    return autoFallback(fromEnv, null, opts);
  }

  console.error(Y(_templateObject3));
}
//# sourceMappingURL=auto-fallback.js.map