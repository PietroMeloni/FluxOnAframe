{"version":3,"sources":["../../../../../node_modules/npm/node_modules/libnpx/auto-fallback.js"],"names":["Y","require","mkPosix","opts","isBash","mkFish","module","exports","autoFallback","shell","fromEnv","includes","install","console","error"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;;AAEA,SAASC,OAAT,CAAkBC,IAAlB,EAAwB;AACtB,mCACkBA,KAAKC,MAAL,GAAc,QAAd,GAAyB,SAD3C,mFAIcJ,CAJd,kBAIqC,IAJrC,8EAQUA,CARV,mBAQc,IARd;AAmBD;;AAED,SAASK,MAAT,CAAiBF,IAAjB,EAAuB;AACrB,gUAOcH,CAPd,mBAOkB,UAPlB;AAoBD;;AAEDM,OAAOC,OAAP,GAAiBC,YAAjB;AACA,SAASA,YAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCP,IAAvC,EAA6C;AAC3C,MAAIM,MAAME,QAAN,CAAe,MAAf,CAAJ,EAA4B;AAC1B,WAAOT,QAAQ,EAACE,QAAQ,IAAT,EAAeQ,SAAST,KAAKS,OAA7B,EAAR,CAAP;AACD;;AAED,MAAIH,MAAME,QAAN,CAAe,KAAf,CAAJ,EAA2B;AACzB,WAAOT,QAAQ,EAACE,QAAQ,KAAT,EAAgBQ,SAAST,KAAKS,OAA9B,EAAR,CAAP;AACD;;AAED,MAAIH,MAAME,QAAN,CAAe,MAAf,CAAJ,EAA4B;AAC1B,WAAON,OAAOF,IAAP,CAAP;AACD;;AAED,MAAIO,OAAJ,EAAa;AACX,WAAOF,aAAaE,OAAb,EAAsB,IAAtB,EAA4BP,IAA5B,CAAP;AACD;;AAEDU,UAAQC,KAAR,CAAcd,CAAd;AACD","file":"auto-fallback.js","sourcesContent":["'use strict'\n\nconst Y = require('./y.js')\n\nfunction mkPosix (opts) {\n  return `\ncommand_not_found_${opts.isBash ? 'handle' : 'handler'}() {\n  # Do not run within a pipe\n  if test ! -t 1; then\n    >&2 echo \"${Y`command not found: ${'$1'}`}\"\n    return 127\n  fi\n  if which npx > /dev/null; then\n    echo \"${Y`${'$1'} not found. Trying with npx...`}\" >&2\n  else\n    return 127\n  fi\n  if ! [[ $1 =~ @ ]]; then\n    npx --no-install \"$@\"\n  else\n    npx \"$@\"\n  fi\n  return $?\n}`\n}\n\nfunction mkFish (opts) {\n  return `\nfunction __fish_command_not_found_on_interactive --on-event fish_prompt\n  functions --erase __fish_command_not_found_handler\n  functions --erase __fish_command_not_found_setup\n\n  function __fish_command_not_found_handler --on-event fish_command_not_found\n    if which npx > /dev/null\n        echo \"${Y`${'$argv[1]'} not found. Trying with npx...`}\" >&2\n    else\n        return 127\n    end\n    if string match -q -r @ $argv[1]\n        npx $argv\n    else\n        npx --no-install $argv\n    end\n  end\n\n  functions --erase __fish_command_not_found_on_interactive\nend`\n}\n\nmodule.exports = autoFallback\nfunction autoFallback (shell, fromEnv, opts) {\n  if (shell.includes('bash')) {\n    return mkPosix({isBash: true, install: opts.install})\n  }\n\n  if (shell.includes('zsh')) {\n    return mkPosix({isBash: false, install: opts.install})\n  }\n\n  if (shell.includes('fish')) {\n    return mkFish(opts)\n  }\n\n  if (fromEnv) {\n    return autoFallback(fromEnv, null, opts)\n  }\n\n  console.error(Y`Only Bash, Zsh, and Fish shells are supported :(`)\n}\n"]}