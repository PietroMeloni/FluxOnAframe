{"version":3,"sources":["../../../../../node_modules/npm/node_modules/libnpx/get-prefix.js"],"names":["promisify","require","path","statAsync","stat","module","exports","getPrefix","root","original","resolve","basename","dirname","Promise","getPrefixFromTree","current","isRootPath","process","platform","all","fileExists","join","then","hasPkg","args","hasModules","_fileExists","f","catch","err","code","_isRootPath","p","match"],"mappings":"AAAA;;AAEA,IAAMA,YAAYC,QAAQ,WAAR,EAAqBD,SAAvC;;AAEA,IAAME,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYH,UAAUC,QAAQ,IAAR,EAAcG,IAAxB,CAAlB;;AAEAC,OAAOC,OAAP,GAAiBC,SAAjB;AACA,SAASA,SAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAMC,WAAWD,OAAON,KAAKQ,OAAL,CAAaF,IAAb,CAAxB;AACA,SAAON,KAAKS,QAAL,CAAcH,IAAd,MAAwB,cAA/B,EAA+C;AAC7CA,WAAON,KAAKU,OAAL,CAAaJ,IAAb,CAAP;AACD;AACD,MAAIC,aAAaD,IAAjB,EAAuB;AACrB,WAAOK,QAAQH,OAAR,CAAgBF,IAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAOK,QAAQH,OAAR,CAAgBI,kBAAkBN,IAAlB,CAAhB,CAAP;AACD;AACF;;AAED,SAASM,iBAAT,CAA4BC,OAA5B,EAAqC;AACnC,MAAIC,WAAWD,OAAX,EAAoBE,QAAQC,QAA5B,CAAJ,EAA2C;AACzC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WAAOL,QAAQM,GAAR,CAAY,CACjBC,WAAWlB,KAAKmB,IAAL,CAAUN,OAAV,EAAmB,cAAnB,CAAX,CADiB,EAEjBK,WAAWlB,KAAKmB,IAAL,CAAUN,OAAV,EAAmB,cAAnB,CAAX,CAFiB,CAAZ,EAGJO,IAHI,CAGC,gBAAQ;AACd,UAAMC,SAASC,KAAK,CAAL,CAAf;AACA,UAAMC,aAAaD,KAAK,CAAL,CAAnB;AACA,UAAID,UAAUE,UAAd,EAA0B;AACxB,eAAOV,OAAP;AACD,OAFD,MAEO;AACL,eAAOD,kBAAkBZ,KAAKU,OAAL,CAAaG,OAAb,CAAlB,CAAP;AACD;AACF,KAXM,CAAP;AAYD;AACF;;AAEDV,OAAOC,OAAP,CAAeoB,WAAf,GAA6BN,UAA7B;AACA,SAASA,UAAT,CAAqBO,CAArB,EAAwB;AACtB,SAAOxB,UAAUwB,CAAV,EAAaC,KAAb,CAAmB,eAAO;AAC/B,QAAIC,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,YAAMD,GAAN;AACD;AACF,GAJM,CAAP;AAKD;;AAEDxB,OAAOC,OAAP,CAAeyB,WAAf,GAA6Bf,UAA7B;AACA,SAASA,UAAT,CAAqBgB,CAArB,EAAwBd,QAAxB,EAAkC;AAChC,SAAOA,aAAa,OAAb,GACHc,EAAEC,KAAF,CAAQ,kBAAR,CADG,GAEHD,MAAM,GAFV;AAGD","file":"get-prefix.js","sourcesContent":["'use strict'\n\nconst promisify = require('./util.js').promisify\n\nconst path = require('path')\nconst statAsync = promisify(require('fs').stat)\n\nmodule.exports = getPrefix\nfunction getPrefix (root) {\n  const original = root = path.resolve(root)\n  while (path.basename(root) === 'node_modules') {\n    root = path.dirname(root)\n  }\n  if (original !== root) {\n    return Promise.resolve(root)\n  } else {\n    return Promise.resolve(getPrefixFromTree(root))\n  }\n}\n\nfunction getPrefixFromTree (current) {\n  if (isRootPath(current, process.platform)) {\n    return false\n  } else {\n    return Promise.all([\n      fileExists(path.join(current, 'package.json')),\n      fileExists(path.join(current, 'node_modules'))\n    ]).then(args => {\n      const hasPkg = args[0]\n      const hasModules = args[1]\n      if (hasPkg || hasModules) {\n        return current\n      } else {\n        return getPrefixFromTree(path.dirname(current))\n      }\n    })\n  }\n}\n\nmodule.exports._fileExists = fileExists\nfunction fileExists (f) {\n  return statAsync(f).catch(err => {\n    if (err.code !== 'ENOENT') {\n      throw err\n    }\n  })\n}\n\nmodule.exports._isRootPath = isRootPath\nfunction isRootPath (p, platform) {\n  return platform === 'win32'\n    ? p.match(/^[a-z]+:[/\\\\]?$/i)\n    : p === '/'\n}\n"]}