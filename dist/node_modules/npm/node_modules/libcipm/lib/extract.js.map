{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/libcipm/lib/extract.js"],"names":["BB","require","npa","workerFarm","extractionWorker","WORKER_PATH","resolve","module","exports","startWorkers","_workers","maxConcurrentCallsPerWorker","maxRetries","stopWorkers","end","child","name","childPath","config","opts","spec","version","childOpts","toPacote","Object","assign","integrity","resolved","dirPacker","args","fromNode","cb","launcher","msg","loglevel","log","level","registry","type","JSON","stringify","e"],"mappings":"AAAA;;AAEA,IAAMA,KAAKC,QAAQ,UAAR,CAAX;;AAEA,IAAMC,MAAMD,QAAQ,iBAAR,CAAZ;AACA,IAAME,aAAaF,QAAQ,aAAR,CAAnB;;AAEA,IAAMG,mBAAmBH,QAAQ,aAAR,CAAzB;AACA,IAAMI,cAAcJ,QAAQK,OAAR,CAAgB,aAAhB,CAApB;;AAEAC,OAAOC,OAAP,GAAiB;AACfC,cADe,0BACC;AACd,SAAKC,QAAL,GAAgBP,WAAW;AACzBQ,mCAA6B,EADJ;AAEzBC,kBAAY;AAFa,KAAX,EAGbP,WAHa,CAAhB;AAID,GANc;AAQfQ,aARe,yBAQA;AACbV,eAAWW,GAAX,CAAe,KAAKJ,QAApB;AACD,GAVc;AAYfK,OAZe,iBAYRC,IAZQ,EAYFD,MAZE,EAYKE,SAZL,EAYgBC,MAZhB,EAYwBC,IAZxB,EAY8B;AAAA;;AAC3C,QAAMC,OAAOlB,IAAII,OAAJ,CAAYU,IAAZ,EAAkBD,OAAMM,OAAxB,CAAb;AACA,QAAMC,YAAYJ,OAAOK,QAAP,CAAgBC,OAAOC,MAAP,CAAc;AAC9CC,iBAAWX,OAAMW,SAD6B;AAE9CC,gBAAUZ,OAAMY;AAF8B,KAAd,EAG/B;AACDC,iBAAWT,KAAKS;AADf,KAH+B,CAAhB,CAAlB;AAMA,QAAMC,OAAO,CAACT,IAAD,EAAOH,SAAP,EAAkBK,SAAlB,CAAb;AACA,WAAOtB,GAAG8B,QAAH,CAAY,UAACC,EAAD,EAAQ;AACzB,UAAIC,WAAW5B,gBAAf;AACA,UAAI6B,MAAMJ,IAAV;AACA,UAAMT,OAAO,OAAOS,KAAK,CAAL,CAAP,KAAmB,QAAnB,GAA8B3B,IAAI2B,KAAK,CAAL,CAAJ,CAA9B,GAA6CA,KAAK,CAAL,CAA1D;AACAP,gBAAUY,QAAV,GAAqBf,KAAKgB,GAAL,CAASC,KAA9B;AACA,UAAIhB,KAAKiB,QAAL,IAAiBjB,KAAKkB,IAAL,KAAc,QAAnC,EAA6C;AAC3C;AACAhB,kBAAUJ,MAAV,GAAmB,IAAnB;AACAI,kBAAUa,GAAV,GAAgB,IAAhB;AACAb,kBAAUM,SAAV,GAAsB,IAAtB;AACA;AACAI,mBAAW,MAAKtB,QAAhB;AACA,YAAI;AACFuB,gBAAMM,KAAKC,SAAL,CAAeP,GAAf,CAAN;AACD,SAFD,CAEE,OAAOQ,CAAP,EAAU;AACV,iBAAOV,GAAGU,CAAH,CAAP;AACD;AACF;AACDT,eAASC,GAAT,EAAcF,EAAd;AACD,KAnBM,CAAP;AAoBD;AAzCc,CAAjB","file":"extract.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst npa = require('npm-package-arg')\nconst workerFarm = require('worker-farm')\n\nconst extractionWorker = require('./worker.js')\nconst WORKER_PATH = require.resolve('./worker.js')\n\nmodule.exports = {\n  startWorkers () {\n    this._workers = workerFarm({\n      maxConcurrentCallsPerWorker: 20,\n      maxRetries: 1\n    }, WORKER_PATH)\n  },\n\n  stopWorkers () {\n    workerFarm.end(this._workers)\n  },\n\n  child (name, child, childPath, config, opts) {\n    const spec = npa.resolve(name, child.version)\n    const childOpts = config.toPacote(Object.assign({\n      integrity: child.integrity,\n      resolved: child.resolved\n    }, {\n      dirPacker: opts.dirPacker\n    }))\n    const args = [spec, childPath, childOpts]\n    return BB.fromNode((cb) => {\n      let launcher = extractionWorker\n      let msg = args\n      const spec = typeof args[0] === 'string' ? npa(args[0]) : args[0]\n      childOpts.loglevel = opts.log.level\n      if (spec.registry || spec.type === 'remote') {\n        // We can't serialize these options\n        childOpts.config = null\n        childOpts.log = null\n        childOpts.dirPacker = null\n        // workers will run things in parallel!\n        launcher = this._workers\n        try {\n          msg = JSON.stringify(msg)\n        } catch (e) {\n          return cb(e)\n        }\n      }\n      launcher(msg, cb)\n    })\n  }\n}\n"]}