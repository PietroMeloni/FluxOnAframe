'use strict';

var BB = require('bluebird');

var npa = require('npm-package-arg');
var workerFarm = require('worker-farm');

var extractionWorker = require('./worker.js');
var WORKER_PATH = require.resolve('./worker.js');

module.exports = {
  startWorkers: function startWorkers() {
    this._workers = workerFarm({
      maxConcurrentCallsPerWorker: 20,
      maxRetries: 1
    }, WORKER_PATH);
  },
  stopWorkers: function stopWorkers() {
    workerFarm.end(this._workers);
  },
  child: function child(name, _child, childPath, config, opts) {
    var _this = this;

    var spec = npa.resolve(name, _child.version);
    var childOpts = config.toPacote(Object.assign({
      integrity: _child.integrity,
      resolved: _child.resolved
    }, {
      dirPacker: opts.dirPacker
    }));
    var args = [spec, childPath, childOpts];
    return BB.fromNode(function (cb) {
      var launcher = extractionWorker;
      var msg = args;
      var spec = typeof args[0] === 'string' ? npa(args[0]) : args[0];
      childOpts.loglevel = opts.log.level;
      if (spec.registry || spec.type === 'remote') {
        // We can't serialize these options
        childOpts.config = null;
        childOpts.log = null;
        childOpts.dirPacker = null;
        // workers will run things in parallel!
        launcher = _this._workers;
        try {
          msg = JSON.stringify(msg);
        } catch (e) {
          return cb(e);
        }
      }
      launcher(msg, cb);
    });
  }
};
//# sourceMappingURL=extract.js.map