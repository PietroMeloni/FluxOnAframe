{"version":3,"sources":["../../../../../node_modules/npm/node_modules/require-directory/index.js"],"names":["fs","require","join","resolve","dirname","defaultOptions","extensions","recurse","rename","name","visit","obj","checkFileInclusion","path","filename","options","RegExp","test","include","exclude","requireDirectory","m","retval","prop","readdirSync","forEach","joined","files","key","statSync","isDirectory","Object","keys","length","substring","lastIndexOf","module","exports","defaults"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nvar fs = require('fs'),\n  join = require('path').join,\n  resolve = require('path').resolve,\n  dirname = require('path').dirname,\n  defaultOptions = {\n    extensions: ['js', 'json', 'coffee'],\n    recurse: true,\n    rename: function (name) {\n      return name;\n    },\n    visit: function (obj) {\n      return obj;\n    }\n  };\n\nfunction checkFileInclusion(path, filename, options) {\n  return (\n    // verify file has valid extension\n    (new RegExp('\\\\.(' + options.extensions.join('|') + ')$', 'i').test(filename)) &&\n\n    // if options.include is a RegExp, evaluate it and make sure the path passes\n    !(options.include && options.include instanceof RegExp && !options.include.test(path)) &&\n\n    // if options.include is a function, evaluate it and make sure the path passes\n    !(options.include && typeof options.include === 'function' && !options.include(path, filename)) &&\n\n    // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass\n    !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) &&\n\n    // if options.exclude is a function, evaluate it and make sure the path doesn't pass\n    !(options.exclude && typeof options.exclude === 'function' && options.exclude(path, filename))\n  );\n}\n\nfunction requireDirectory(m, path, options) {\n  var retval = {};\n\n  // path is optional\n  if (path && !options && typeof path !== 'string') {\n    options = path;\n    path = null;\n  }\n\n  // default options\n  options = options || {};\n  for (var prop in defaultOptions) {\n    if (typeof options[prop] === 'undefined') {\n      options[prop] = defaultOptions[prop];\n    }\n  }\n\n  // if no path was passed in, assume the equivelant of __dirname from caller\n  // otherwise, resolve path relative to the equivalent of __dirname\n  path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);\n\n  // get the path of each file in specified directory, append to current tree node, recurse\n  fs.readdirSync(path).forEach(function (filename) {\n    var joined = join(path, filename),\n      files,\n      key,\n      obj;\n\n    if (fs.statSync(joined).isDirectory() && options.recurse) {\n      // this node is a directory; recurse\n      files = requireDirectory(m, joined, options);\n      // exclude empty directories\n      if (Object.keys(files).length) {\n        retval[options.rename(filename, joined, filename)] = files;\n      }\n    } else {\n      if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {\n        // hash node key shouldn't include file extension\n        key = filename.substring(0, filename.lastIndexOf('.'));\n        obj = m.require(joined);\n        retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;\n      }\n    }\n  });\n\n  return retval;\n}\n\nmodule.exports = requireDirectory;\nmodule.exports.defaults = defaultOptions;\n"]}