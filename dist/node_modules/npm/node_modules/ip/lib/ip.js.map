{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/ip/lib/ip.js"],"names":["ip","exports","Buffer","require","os","toBuffer","buff","offset","result","isV4Format","split","map","byte","parseInt","isV6Format","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","apply","word","Error","join","readUInt16BE","replace","ipv4Regex","ipv6Regex","test","_normalizeFamily","family","toLowerCase","fromPrefixLen","prefixlen","len","n","bits","mask","addr","Math","max","cidr","cidrString","cidrParts","subnet","networkAddress","toLong","maskBuffer","maskLength","octet","numberOfAddresses","pow","fromLong","firstAddress","lastAddress","broadcastAddress","subnetMask","subnetMaskLength","numHosts","contains","other","cidrSubnet","not","or","a","b","isEqual","t","isPrivate","isPublic","isLoopback","loopback","address","name","interfaces","networkInterfaces","all","res","filter","details","itemFamily","undefined","Object","keys","nic","addresses","Boolean","ipl","forEach"],"mappings":"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","file":"ip.js","sourcesContent":["'use strict';\n\nvar ip = exports;\nvar Buffer = require('buffer').Buffer;\nvar os = require('os');\n\nip.toBuffer = function(ip, buff, offset) {\n  offset = ~~offset;\n\n  var result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map(function(byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [ i, 1 ];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Buffer(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = (word >> 8) & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n};\n\nip.toString = function(buff, offset, length) {\n  offset = ~~offset;\n  length = length || (buff.length - offset);\n\n  var result = [];\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex =\n    /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function(ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function(ip) {\n  return ipv6Regex.test(ip);\n};\nfunction _normalizeFamily(family) {\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function(prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  var len = 4;\n  if (family === 'ipv6') {\n    len = 16;\n  }\n  var buff = new Buffer(len);\n\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n    prefixlen -= bits;\n\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function(addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n\n  var result = new Buffer(Math.max(addr.length, mask.length));\n\n  var i = 0;\n  // Same protocol - do bitwise and\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4  + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (var i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    }\n\n    // ::ffff:ipv4\n    result[10] = 0xff;\n    result[11] = 0xff;\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n    i = i + 12;\n  }\n  for (; i < result.length; i++)\n    result[i] = 0;\n\n  return ip.toString(result);\n};\n\nip.cidr = function(cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2)\n    throw new Error('invalid CIDR subnet: ' + addr);\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function(addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\n\n  // Calculate the mask's length.\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n      while (octet) {\n        octet = (octet << 1) & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ?\n                    ip.fromLong(networkAddress) :\n                    ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ?\n                    ip.fromLong(networkAddress + numberOfAddresses - 1) :\n                    ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ?\n                numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains: function(other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n  };\n};\n\nip.cidrSubnet = function(cidrString) {\n  var cidrParts = cidrString.split('/');\n\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2)\n    throw new Error('invalid CIDR subnet: ' + addr);\n\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n\n  return ip.subnet(addr, mask);\n};\n\nip.not = function(addr) {\n  var buff = ip.toBuffer(addr);\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n  return ip.toString(buff);\n};\n\nip.or = function(a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // same protocol\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n    return ip.toString(a);\n\n  // mixed protocols\n  } else {\n    var buff = a;\n    var other = b;\n    if (b.length > a.length) {\n      buff = b;\n      other = a;\n    }\n\n    var offset = buff.length - other.length;\n    for (var i = offset; i < buff.length; ++i) {\n      buff[i] |= other[i - offset];\n    }\n\n    return ip.toString(buff);\n  }\n};\n\nip.isEqual = function(a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b);\n\n  // Same protocol\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  // Swap\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  }\n\n  // a - IPv4, b - IPv6\n  for (var i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (var i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function(addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr) ||\n    /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\n      .test(addr) ||\n    /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\n    /^f[cd][0-9a-f]{2}:/i.test(addr) ||\n    /^fe80:/i.test(addr) ||\n    /^::1$/.test(addr) ||\n    /^::$/.test(addr);\n};\n\nip.isPublic = function(addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function(addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\n      .test(addr) ||\n    /^fe80::1$/.test(addr) ||\n    /^::1$/.test(addr) ||\n    /^::$/.test(addr);\n};\n\nip.loopback = function(family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n};\n\n//\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\nip.address = function(name, family) {\n  var interfaces = os.networkInterfaces();\n  var all;\n\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter(function(details) {\n      var itemFamily = details.family.toLowerCase();\n      return itemFamily === family;\n    });\n    if (res.length === 0)\n      return undefined;\n    return res[0].address;\n  }\n\n  var all = Object.keys(interfaces).map(function (nic) {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter(function (details) {\n      details.family = details.family.toLowerCase();\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      } else if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address) :\n          ip.isPublic(details.address);\n    });\n\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function(ip) {\n  var ipl = 0;\n  ip.split('.').forEach(function(octet) {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return(ipl >>> 0);\n};\n\nip.fromLong = function(ipl) {\n  return ((ipl >>> 24) + '.' +\n      (ipl >> 16 & 255) + '.' +\n      (ipl >> 8 & 255) + '.' +\n      (ipl & 255) );\n};\n"]}