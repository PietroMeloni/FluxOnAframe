{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/ip/test/api-test.js"],"names":["ip","require","assert","net","os","describe","it","buf","toBuffer","equal","toString","Buffer","offset","test","fromPrefixLen","not","or","mask","i","ipv4Subnet","subnet","networkAddress","firstAddress","lastAddress","broadcastAddress","length","numHosts","subnetMask","subnetMaskLength","contains","cidrSubnet","cidr","isEqual","isPrivate","loopback","ok","isLoopback","address","undefined","forEach","family","interfaces","networkInterfaces","Object","keys","nic","addr","isIPv4","isIPv6","toLong","fromLong"],"mappings":"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","file":"api-test.js","sourcesContent":["'use strict';\n\nvar ip = require('..');\nvar assert = require('assert');\nvar net = require('net');\nvar os = require('os');\n\ndescribe('IP library for node.js', function() {\n  describe('toBuffer()/toString() methods', function() {\n    it('should convert to buffer IPv4 address', function() {\n      var buf = ip.toBuffer('127.0.0.1');\n      assert.equal(buf.toString('hex'), '7f000001');\n      assert.equal(ip.toString(buf), '127.0.0.1');\n    });\n\n    it('should convert to buffer IPv4 address in-place', function() {\n      var buf = new Buffer(128);\n      var offset = 64;\n      ip.toBuffer('127.0.0.1', buf, offset);\n      assert.equal(buf.toString('hex', offset, offset + 4), '7f000001');\n      assert.equal(ip.toString(buf, offset, 4), '127.0.0.1');\n    });\n\n    it('should convert to buffer IPv6 address', function() {\n      var buf = ip.toBuffer('::1');\n      assert(/(00){15,15}01/.test(buf.toString('hex')));\n      assert.equal(ip.toString(buf), '::1');\n      assert.equal(ip.toString(ip.toBuffer('1::')), '1::');\n      assert.equal(ip.toString(ip.toBuffer('abcd::dcba')), 'abcd::dcba');\n    });\n\n    it('should convert to buffer IPv6 address in-place', function() {\n      var buf = new Buffer(128);\n      var offset = 64;\n      ip.toBuffer('::1', buf, offset);\n      assert(/(00){15,15}01/.test(buf.toString('hex', offset, offset + 16)));\n      assert.equal(ip.toString(buf, offset, 16), '::1');\n      assert.equal(ip.toString(ip.toBuffer('1::', buf, offset),\n                               offset, 16), '1::');\n      assert.equal(ip.toString(ip.toBuffer('abcd::dcba', buf, offset),\n                               offset, 16), 'abcd::dcba');\n    });\n\n    it('should convert to buffer IPv6 mapped IPv4 address', function() {\n      var buf = ip.toBuffer('::ffff:127.0.0.1');\n      assert.equal(buf.toString('hex'), '00000000000000000000ffff7f000001');\n      assert.equal(ip.toString(buf), '::ffff:7f00:1');\n\n      buf = ip.toBuffer('ffff::127.0.0.1');\n      assert.equal(buf.toString('hex'), 'ffff000000000000000000007f000001');\n      assert.equal(ip.toString(buf), 'ffff::7f00:1');\n\n      buf = ip.toBuffer('0:0:0:0:0:ffff:127.0.0.1');\n      assert.equal(buf.toString('hex'), '00000000000000000000ffff7f000001');\n      assert.equal(ip.toString(buf), '::ffff:7f00:1');\n    });\n  });\n\n  describe('fromPrefixLen() method', function() {\n    it('should create IPv4 mask', function() {\n      assert.equal(ip.fromPrefixLen(24), '255.255.255.0');\n    });\n    it('should create IPv6 mask', function() {\n      assert.equal(ip.fromPrefixLen(64), 'ffff:ffff:ffff:ffff::');\n    });\n    it('should create IPv6 mask explicitly', function() {\n      assert.equal(ip.fromPrefixLen(24, 'IPV6'), 'ffff:ff00::');\n    });\n  });\n\n  describe('not() method', function() {\n    it('should reverse bits in address', function() {\n      assert.equal(ip.not('255.255.255.0'), '0.0.0.255');\n    });\n  });\n\n  describe('or() method', function() {\n    it('should or bits in ipv4 addresses', function() {\n      assert.equal(ip.or('0.0.0.255', '192.168.1.10'), '192.168.1.255');\n    });\n    it('should or bits in ipv6 addresses', function() {\n      assert.equal(ip.or('::ff', '::abcd:dcba:abcd:dcba'),\n                   '::abcd:dcba:abcd:dcff');\n    });\n    it('should or bits in mixed addresses', function() {\n      assert.equal(ip.or('0.0.0.255', '::abcd:dcba:abcd:dcba'),\n                   '::abcd:dcba:abcd:dcff');\n    });\n  });\n\n  describe('mask() method', function() {\n    it('should mask bits in address', function() {\n      assert.equal(ip.mask('192.168.1.134', '255.255.255.0'), '192.168.1.0');\n      assert.equal(ip.mask('192.168.1.134', '::ffff:ff00'), '::ffff:c0a8:100');\n    });\n\n    it('should not leak data', function() {\n      for (var i = 0; i < 10; i++)\n        assert.equal(ip.mask('::1', '0.0.0.0'), '::');\n    });\n  });\n\n  describe('subnet() method', function() {\n    // Test cases calculated with http://www.subnet-calculator.com/\n    var ipv4Subnet = ip.subnet('192.168.1.134', '255.255.255.192');\n\n    it('should compute ipv4 network address', function() {\n      assert.equal(ipv4Subnet.networkAddress, '192.168.1.128');\n    });\n\n    it('should compute ipv4 network\\'s first address', function() {\n      assert.equal(ipv4Subnet.firstAddress, '192.168.1.129');\n    });\n\n    it('should compute ipv4 network\\'s last address', function() {\n      assert.equal(ipv4Subnet.lastAddress, '192.168.1.190');\n    });\n\n    it('should compute ipv4 broadcast address', function() {\n      assert.equal(ipv4Subnet.broadcastAddress, '192.168.1.191');\n    });\n\n    it('should compute ipv4 subnet number of addresses', function() {\n      assert.equal(ipv4Subnet.length, 64);\n    });\n\n    it('should compute ipv4 subnet number of addressable hosts', function() {\n      assert.equal(ipv4Subnet.numHosts, 62);\n    });\n\n    it('should compute ipv4 subnet mask', function() {\n      assert.equal(ipv4Subnet.subnetMask, '255.255.255.192');\n    });\n\n    it('should compute ipv4 subnet mask\\'s length', function() {\n      assert.equal(ipv4Subnet.subnetMaskLength, 26);\n    });\n\n    it('should know whether a subnet contains an address', function() {\n      assert.equal(ipv4Subnet.contains('192.168.1.180'), true);\n    });\n\n    it('should know whether a subnet does not contain an address', function() {\n      assert.equal(ipv4Subnet.contains('192.168.1.195'), false);\n    });\n  });\n\n  describe('subnet() method with mask length 32', function() {\n    // Test cases calculated with http://www.subnet-calculator.com/\n    var ipv4Subnet = ip.subnet('192.168.1.134', '255.255.255.255');\n    it('should compute ipv4 network\\'s first address', function() {\n      assert.equal(ipv4Subnet.firstAddress, '192.168.1.134');\n    });\n\n    it('should compute ipv4 network\\'s last address', function() {\n      assert.equal(ipv4Subnet.lastAddress, '192.168.1.134');\n    });\n\n    it('should compute ipv4 subnet number of addressable hosts', function() {\n      assert.equal(ipv4Subnet.numHosts, 1);\n    });\n  });\n\n  describe('subnet() method with mask length 31', function() {\n    // Test cases calculated with http://www.subnet-calculator.com/\n    var ipv4Subnet = ip.subnet('192.168.1.134', '255.255.255.254');\n    it('should compute ipv4 network\\'s first address', function() {\n      assert.equal(ipv4Subnet.firstAddress, '192.168.1.134');\n    });\n\n    it('should compute ipv4 network\\'s last address', function() {\n      assert.equal(ipv4Subnet.lastAddress, '192.168.1.135');\n    });\n\n    it('should compute ipv4 subnet number of addressable hosts', function() {\n      assert.equal(ipv4Subnet.numHosts, 2);\n    });\n  });\n\n  describe('cidrSubnet() method', function() {\n    // Test cases calculated with http://www.subnet-calculator.com/\n    var ipv4Subnet = ip.cidrSubnet('192.168.1.134/26');\n\n    it('should compute an ipv4 network address', function() {\n      assert.equal(ipv4Subnet.networkAddress, '192.168.1.128');\n    });\n\n    it('should compute an ipv4 network\\'s first address', function() {\n      assert.equal(ipv4Subnet.firstAddress, '192.168.1.129');\n    });\n\n    it('should compute an ipv4 network\\'s last address', function() {\n      assert.equal(ipv4Subnet.lastAddress, '192.168.1.190');\n    });\n\n    it('should compute an ipv4 broadcast address', function() {\n      assert.equal(ipv4Subnet.broadcastAddress, '192.168.1.191');\n    });\n\n    it('should compute an ipv4 subnet number of addresses', function() {\n      assert.equal(ipv4Subnet.length, 64);\n    });\n\n    it('should compute an ipv4 subnet number of addressable hosts', function() {\n      assert.equal(ipv4Subnet.numHosts, 62);\n    });\n\n    it('should compute an ipv4 subnet mask', function() {\n      assert.equal(ipv4Subnet.subnetMask, '255.255.255.192');\n    });\n\n    it('should compute an ipv4 subnet mask\\'s length', function() {\n      assert.equal(ipv4Subnet.subnetMaskLength, 26);\n    });\n\n    it('should know whether a subnet contains an address', function() {\n      assert.equal(ipv4Subnet.contains('192.168.1.180'), true);\n    });\n\n    it('should know whether a subnet contains an address', function() {\n      assert.equal(ipv4Subnet.contains('192.168.1.195'), false);\n    });\n\n  });\n\n  describe('cidr() method', function() {\n    it('should mask address in CIDR notation', function() {\n      assert.equal(ip.cidr('192.168.1.134/26'), '192.168.1.128');\n      assert.equal(ip.cidr('2607:f0d0:1002:51::4/56'), '2607:f0d0:1002::');\n    });\n  });\n\n  describe('isEqual() method', function() {\n    it('should check if addresses are equal', function() {\n      assert(ip.isEqual('127.0.0.1', '::7f00:1'));\n      assert(!ip.isEqual('127.0.0.1', '::7f00:2'));\n      assert(ip.isEqual('127.0.0.1', '::ffff:7f00:1'));\n      assert(!ip.isEqual('127.0.0.1', '::ffaf:7f00:1'));\n      assert(ip.isEqual('::ffff:127.0.0.1', '::ffff:127.0.0.1'));\n      assert(ip.isEqual('::ffff:127.0.0.1', '127.0.0.1'));\n    });\n  });\n\n\n  describe('isPrivate() method', function() {\n    it('should check if an address is localhost', function() {\n      assert.equal(ip.isPrivate('127.0.0.1'), true);\n    });\n\n    it('should check if an address is from a 192.168.x.x network', function() {\n      assert.equal(ip.isPrivate('192.168.0.123'), true);\n      assert.equal(ip.isPrivate('192.168.122.123'), true);\n      assert.equal(ip.isPrivate('192.162.1.2'), false);\n    });\n\n    it('should check if an address is from a 172.16.x.x network', function() {\n      assert.equal(ip.isPrivate('172.16.0.5'), true);\n      assert.equal(ip.isPrivate('172.16.123.254'), true);\n      assert.equal(ip.isPrivate('171.16.0.5'), false);\n      assert.equal(ip.isPrivate('172.25.232.15'), true);\n      assert.equal(ip.isPrivate('172.15.0.5'), false);\n      assert.equal(ip.isPrivate('172.32.0.5'), false);\n    });\n\n    it('should check if an address is from a 169.254.x.x network', function() {\n      assert.equal(ip.isPrivate('169.254.2.3'), true);\n      assert.equal(ip.isPrivate('169.254.221.9'), true);\n      assert.equal(ip.isPrivate('168.254.2.3'), false);\n    });\n\n    it('should check if an address is from a 10.x.x.x network', function() {\n      assert.equal(ip.isPrivate('10.0.2.3'), true);\n      assert.equal(ip.isPrivate('10.1.23.45'), true);\n      assert.equal(ip.isPrivate('12.1.2.3'), false);\n    });\n\n    it('should check if an address is from a private IPv6 network', function() {\n      assert.equal(ip.isPrivate('fd12:3456:789a:1::1'), true);\n      assert.equal(ip.isPrivate('fe80::f2de:f1ff:fe3f:307e'), true);\n      assert.equal(ip.isPrivate('::ffff:10.100.1.42'), true);\n      assert.equal(ip.isPrivate('::FFFF:172.16.200.1'), true);\n      assert.equal(ip.isPrivate('::ffff:192.168.0.1'), true);\n    });\n\n    it('should check if an address is from the internet', function() {\n      assert.equal(ip.isPrivate('165.225.132.33'), false); // joyent.com\n    });\n\n    it('should check if an address is a loopback IPv6 address', function() {\n      assert.equal(ip.isPrivate('::'), true);\n      assert.equal(ip.isPrivate('::1'), true);\n      assert.equal(ip.isPrivate('fe80::1'), true);\n    });\n  });\n\n  describe('loopback() method', function() {\n    describe('undefined', function() {\n      it('should respond with 127.0.0.1', function() {\n        assert.equal(ip.loopback(), '127.0.0.1')\n      });\n    });\n\n    describe('ipv4', function() {\n      it('should respond with 127.0.0.1', function() {\n        assert.equal(ip.loopback('ipv4'), '127.0.0.1')\n      });\n    });\n\n    describe('ipv6', function() {\n      it('should respond with fe80::1', function() {\n        assert.equal(ip.loopback('ipv6'), 'fe80::1')\n      });\n    });\n  });\n\n  describe('isLoopback() method', function() {\n    describe('127.0.0.1', function() {\n      it('should respond with true', function() {\n        assert.ok(ip.isLoopback('127.0.0.1'))\n      });\n    });\n\n    describe('127.8.8.8', function () {\n      it('should respond with true', function () {\n        assert.ok(ip.isLoopback('127.8.8.8'))\n      });\n    });\n\n    describe('8.8.8.8', function () {\n      it('should respond with false', function () {\n        assert.equal(ip.isLoopback('8.8.8.8'), false);\n      });\n    });\n\n    describe('fe80::1', function() {\n      it('should respond with true', function() {\n        assert.ok(ip.isLoopback('fe80::1'))\n      });\n    });\n\n    describe('::1', function() {\n      it('should respond with true', function() {\n        assert.ok(ip.isLoopback('::1'))\n      });\n    });\n\n    describe('::', function() {\n      it('should respond with true', function() {\n        assert.ok(ip.isLoopback('::'))\n      });\n    });\n  });\n\n  describe('address() method', function() {\n    describe('undefined', function() {\n      it('should respond with a private ip', function() {\n        assert.ok(ip.isPrivate(ip.address()));\n      });\n    });\n\n    describe('private', function() {\n      [ undefined, 'ipv4', 'ipv6' ].forEach(function(family) {\n        describe(family, function() {\n          it('should respond with a private ip', function() {\n            assert.ok(ip.isPrivate(ip.address('private', family)));\n          });\n        });\n      });\n    });\n\n    var interfaces = os.networkInterfaces();\n\n    Object.keys(interfaces).forEach(function(nic) {\n      describe(nic, function() {\n        [ undefined, 'ipv4' ].forEach(function(family) {\n          describe(family, function() {\n            it('should respond with an ipv4 address', function() {\n              var addr = ip.address(nic, family);\n              assert.ok(!addr || net.isIPv4(addr));\n            });\n          });\n        });\n\n        describe('ipv6', function() {\n          it('should respond with an ipv6 address', function() {\n            var addr = ip.address(nic, 'ipv6');\n            assert.ok(!addr || net.isIPv6(addr));\n          });\n        })\n      });\n    });\n  });\n\n  describe('toLong() method', function() {\n    it('should respond with a int', function() {\n      assert.equal(ip.toLong('127.0.0.1'), 2130706433);\n      assert.equal(ip.toLong('255.255.255.255'), 4294967295);\n    });\n  });\n\n  describe('fromLong() method', function() {\n    it('should repond with ipv4 address', function() {\n      assert.equal(ip.fromLong(2130706433), '127.0.0.1');\n      assert.equal(ip.fromLong(4294967295), '255.255.255.255');\n    });\n  })\n});\n"]}