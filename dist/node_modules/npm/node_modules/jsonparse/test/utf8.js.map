{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/jsonparse/test/utf8.js"],"names":["test","require","Parser","t","plan","p","onValue","value","equal","write","expected","push","slice","deepEqual","shift"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,SAASD,QAAQ,KAAR,CAAb;;AAEAD,KAAK,iBAAL,EAAwB,UAAUG,CAAV,EAAa;AACnCA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,IAAI,IAAIH,MAAJ,EAAR;AACAG,IAAEC,OAAF,GAAY,UAAUC,KAAV,EAAiB;AAC3BJ,MAAEK,KAAF,CAAQD,KAAR,EAAe,KAAf;AACD,GAFD;;AAIAF,IAAEI,KAAF,CAAQ,OAAR;AACD,CATD;;AAWAT,KAAK,cAAL,EAAqB,UAAUG,CAAV,EAAa;AAChCA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,IAAI,IAAIH,MAAJ,EAAR;AACAG,IAAEC,OAAF,GAAY,UAAUC,KAAV,EAAiB;AAC3BJ,MAAEK,KAAF,CAAQD,KAAR,EAAe,GAAf;AACD,GAFD;;AAIAF,IAAEI,KAAF,CAAQ,KAAR;AACD,CATD;;AAWAT,KAAK,yBAAL,EAAgC,UAAUG,CAAV,EAAa;AAC3CA,IAAEC,IAAF,CAAO,CAAP;;AAEA,MAAIC,IAAI,IAAIH,MAAJ,EAAR;AACA,MAAIQ,WAAW,CAAE,UAAF,EAAc,KAAd,EAAqB,OAArB,CAAf;AACAA,WAASC,IAAT,CAAcD,SAASE,KAAT,EAAd;;AAEAP,IAAEC,OAAF,GAAY,UAAUC,KAAV,EAAiB;AAC3BJ,MAAEU,SAAF,CAAYN,KAAZ,EAAmBG,SAASI,KAAT,EAAnB;AACD,GAFD;;AAIAT,IAAEI,KAAF,CAAQ,4BAAR;AACD,CAZD","file":"utf8.js","sourcesContent":["var test = require('tape');\nvar Parser = require('../');\n\ntest('3 bytes of utf8', function (t) {\n  t.plan(1);\n\n  var p = new Parser();\n  p.onValue = function (value) {\n    t.equal(value, '├──');\n  };\n\n  p.write('\"├──\"');\n});\n\ntest('utf8 snowman', function (t) {\n  t.plan(1);\n\n  var p = new Parser();\n  p.onValue = function (value) {\n    t.equal(value, '☃');\n  };\n\n  p.write('\"☃\"');\n});\n\ntest('utf8 with regular ascii', function (t) {\n  t.plan(4);\n\n  var p = new Parser();\n  var expected = [ \"snow: ☃!\", \"xyz\", \"¡que!\" ];\n  expected.push(expected.slice());\n\n  p.onValue = function (value) {\n    t.deepEqual(value, expected.shift());\n  };\n\n  p.write('[\"snow: ☃!\",\"xyz\",\"¡que!\"]');\n});\n"]}