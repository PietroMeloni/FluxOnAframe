{"version":3,"sources":["../../../../../node_modules/npm/node_modules/fs-vacuum/vacuum.js"],"names":["assert","require","dirname","resolve","isInside","rimraf","lstat","readdir","rmdir","unlink","module","exports","vacuum","leaf","options","cb","log","base","Error","error","stat","code","stack","isDirectory","isSymbolicLink","isFile","purge","next","branch","files","message","length","process","env","HOME","remove"],"mappings":"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","file":"vacuum.js","sourcesContent":["var assert = require('assert')\nvar dirname = require('path').dirname\nvar resolve = require('path').resolve\nvar isInside = require('path-is-inside')\n\nvar rimraf = require('rimraf')\nvar lstat = require('graceful-fs').lstat\nvar readdir = require('graceful-fs').readdir\nvar rmdir = require('graceful-fs').rmdir\nvar unlink = require('graceful-fs').unlink\n\nmodule.exports = vacuum\n\nfunction vacuum (leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove')\n  assert(typeof cb === 'function', 'must pass in callback')\n\n  if (!options) options = {}\n  assert(typeof options === 'object', 'options must be an object')\n\n  var log = options.log ? options.log : function () {}\n\n  leaf = leaf && resolve(leaf)\n  var base = options.base && resolve(options.base)\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base))\n  }\n\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null)\n\n      log(error.stack)\n      return cb(error)\n    }\n\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link')\n      return cb(new Error(leaf + ' is not a directory, file, or link'))\n    }\n\n    if (options.purge) {\n      log('purging', leaf)\n      rimraf(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf)\n      unlink(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else {\n      next(leaf)\n    }\n  })\n\n  function next (branch) {\n    branch = branch && resolve(branch)\n    // either we've reached the base or we've reached the root\n    if ((base && branch === base) || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch)\n      return cb(null)\n    }\n\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null)\n\n        log('unable to check directory', branch, 'due to', error.message)\n        return cb(error)\n      }\n\n      if (files.length > 0) {\n        log('quitting because other entries in', branch)\n        return cb(null)\n      }\n\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch)\n        return cb(null)\n      }\n\n      log('removing', branch)\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null)\n\n          log('unable to lstat', branch, 'due to', error.message)\n          return cb(error)\n        }\n\n        var remove = stat.isDirectory() ? rmdir : unlink\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch)\n              return cb(null)\n            }\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch)\n              return cb(null)\n            }\n\n            log('unable to remove', branch, 'due to', error.message)\n            return cb(error)\n          }\n\n          next(dirname(branch))\n        })\n      })\n    })\n  }\n}\n"]}