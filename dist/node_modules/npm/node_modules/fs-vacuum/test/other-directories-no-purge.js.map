{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fs-vacuum/test/other-directories-no-purge.js"],"names":["path","require","test","statSync","mkdtemp","dir","mkdirp","vacuum","TEMP_OPTIONS","unsafeCleanup","mode","SHORT_PATH","join","REMOVE_PATH","OTHER_PATH","messages","log","push","Array","prototype","slice","call","arguments","testBase","testPath","otherPath","t","er","tmpdir","ifError","resolve","end","purge","base","equal","length","stat","verifyPath","verify","i","throws","notOk","isDirectory","dirname","doesNotThrow","ok","intersection"],"mappings":"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","file":"other-directories-no-purge.js","sourcesContent":["var path = require('path')\n\nvar test = require('tap').test\nvar statSync = require('graceful-fs').statSync\nvar mkdtemp = require('tmp').dir\nvar mkdirp = require('mkdirp')\n\nvar vacuum = require('../vacuum.js')\n\n// CONSTANTS\nvar TEMP_OPTIONS = {\n  unsafeCleanup: true,\n  mode: '0700'\n}\nvar SHORT_PATH = path.join('i', 'am', 'a', 'path')\nvar REMOVE_PATH = path.join(SHORT_PATH, 'of', 'a', 'certain', 'length')\nvar OTHER_PATH = path.join(SHORT_PATH, 'of', 'no', 'qualities')\n\nvar messages = []\nfunction log () { messages.push(Array.prototype.slice.call(arguments).join(' ')) }\n\nvar testBase, testPath, otherPath\ntest('xXx setup xXx', function (t) {\n  mkdtemp(TEMP_OPTIONS, function (er, tmpdir) {\n    t.ifError(er, 'temp directory exists')\n\n    testBase = path.resolve(tmpdir, SHORT_PATH)\n    testPath = path.resolve(tmpdir, REMOVE_PATH)\n    otherPath = path.resolve(tmpdir, OTHER_PATH)\n\n    mkdirp(testPath, function (er) {\n      t.ifError(er, 'made test path')\n\n      mkdirp(otherPath, function (er) {\n        t.ifError(er, 'made other path')\n\n        t.end()\n      })\n    })\n  })\n})\n\ntest('remove up to a point', function (t) {\n  vacuum(testPath, {purge: false, base: testBase, log: log}, function (er) {\n    t.ifError(er, 'cleaned up to base')\n\n    t.equal(messages.length, 4, 'got 3 removal & 1 finish message')\n    t.equal(\n      messages[3], 'quitting because other entries in ' + testBase + '/of',\n      'got expected final message'\n    )\n\n    var stat\n    var verifyPath = testPath\n    function verify () { stat = statSync(verifyPath) }\n\n    for (var i = 0; i < 3; i++) {\n      t.throws(verify, verifyPath + ' cannot be statted')\n      t.notOk(stat && stat.isDirectory(), verifyPath + ' is totally gone')\n      verifyPath = path.dirname(verifyPath)\n    }\n\n    t.doesNotThrow(function () {\n      stat = statSync(otherPath)\n    }, otherPath + ' can be statted')\n    t.ok(stat && stat.isDirectory(), otherPath + ' is still a directory')\n\n    var intersection = path.join(testBase, 'of')\n    t.doesNotThrow(function () {\n      stat = statSync(intersection)\n    }, intersection + ' can be statted')\n    t.ok(stat && stat.isDirectory(), intersection + ' is still a directory')\n\n    t.end()\n  })\n})\n"]}