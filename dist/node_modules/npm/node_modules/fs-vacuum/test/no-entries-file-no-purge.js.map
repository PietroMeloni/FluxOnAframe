{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fs-vacuum/test/no-entries-file-no-purge.js"],"names":["path","require","test","statSync","writeFile","readdirSync","mkdtemp","dir","mkdirp","vacuum","TEMP_OPTIONS","unsafeCleanup","mode","SHORT_PATH","join","PARTIAL_PATH","FULL_PATH","messages","log","push","Array","prototype","slice","call","arguments","testBase","partialPath","fullPath","t","er","tmpdir","ifError","resolve","Buffer","end","purge","base","equal","length","stat","verifyPath","verify","throws","notOk","isFile","dirname","i","isDirectory","doesNotThrow","ok","files"],"mappings":"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","file":"no-entries-file-no-purge.js","sourcesContent":["var path = require('path')\n\nvar test = require('tap').test\nvar statSync = require('graceful-fs').statSync\nvar writeFile = require('graceful-fs').writeFile\nvar readdirSync = require('graceful-fs').readdirSync\nvar mkdtemp = require('tmp').dir\nvar mkdirp = require('mkdirp')\n\nvar vacuum = require('../vacuum.js')\n\n// CONSTANTS\nvar TEMP_OPTIONS = {\n  unsafeCleanup: true,\n  mode: '0700'\n}\nvar SHORT_PATH = path.join('i', 'am', 'a', 'path')\nvar PARTIAL_PATH = path.join(SHORT_PATH, 'that', 'ends', 'at', 'a')\nvar FULL_PATH = path.join(PARTIAL_PATH, 'file')\n\nvar messages = []\nfunction log () { messages.push(Array.prototype.slice.call(arguments).join(' ')) }\n\nvar testBase, partialPath, fullPath\ntest('xXx setup xXx', function (t) {\n  mkdtemp(TEMP_OPTIONS, function (er, tmpdir) {\n    t.ifError(er, 'temp directory exists')\n\n    testBase = path.resolve(tmpdir, SHORT_PATH)\n    partialPath = path.resolve(tmpdir, PARTIAL_PATH)\n    fullPath = path.resolve(tmpdir, FULL_PATH)\n\n    mkdirp(partialPath, function (er) {\n      t.ifError(er, 'made test path')\n\n      writeFile(fullPath, new Buffer('hi'), function (er) {\n        t.ifError(er, 'made file')\n\n        t.end()\n      })\n    })\n  })\n})\n\ntest('remove up to a point', function (t) {\n  vacuum(fullPath, {purge: false, base: testBase, log: log}, function (er) {\n    t.ifError(er, 'cleaned up to base')\n\n    t.equal(messages.length, 6, 'got 5 removal & 1 finish message')\n    t.equal(messages[5], 'finished vacuuming up to ' + testBase)\n\n    var stat\n    var verifyPath = fullPath\n\n    function verify () { stat = statSync(verifyPath) }\n\n    // handle the file separately\n    t.throws(verify, verifyPath + ' cannot be statted')\n    t.notOk(stat && stat.isFile(), verifyPath + ' is totally gone')\n    verifyPath = path.dirname(verifyPath)\n\n    for (var i = 0; i < 4; i++) {\n      t.throws(verify, verifyPath + ' cannot be statted')\n      t.notOk(stat && stat.isDirectory(), verifyPath + ' is totally gone')\n      verifyPath = path.dirname(verifyPath)\n    }\n\n    t.doesNotThrow(function () {\n      stat = statSync(testBase)\n    }, testBase + ' can be statted')\n    t.ok(stat && stat.isDirectory(), testBase + ' is still a directory')\n\n    var files = readdirSync(testBase)\n    t.equal(files.length, 0, 'nothing left in base directory')\n\n    t.end()\n  })\n})\n"]}