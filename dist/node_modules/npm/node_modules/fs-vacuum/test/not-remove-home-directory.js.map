{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fs-vacuum/test/not-remove-home-directory.js"],"names":["path","require","test","mkdtemp","dir","mkdirp","vacuum","TEMP_OPTIONS","unsafeCleanup","mode","BASE_PATH","join","HOME_PATH","messages","log","push","Array","prototype","slice","call","arguments","homePath","basePath","realHome","t","er","tmpdir","ifError","resolve","process","env","HOME","end","purge","base","equal"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,OAAOD,QAAQ,KAAR,EAAeC,IAA1B;AACA,IAAIC,UAAUF,QAAQ,KAAR,EAAeG,GAA7B;AACA,IAAIC,SAASJ,QAAQ,QAAR,CAAb;;AAEA,IAAIK,SAASL,QAAQ,cAAR,CAAb;;AAEA;AACA,IAAIM,eAAe;AACjBC,iBAAe,IADE;AAEjBC,QAAM;AAFW,CAAnB;;AAKA,IAAIC,YAAYV,KAAKW,IAAL,CAAU,KAAV,CAAhB;AACA,IAAIC,YAAYZ,KAAKW,IAAL,CAAUD,SAAV,EAAqB,KAArB,EAA4B,KAA5B,CAAhB;;AAEA,IAAIG,WAAW,EAAf;AACA,SAASC,GAAT,GAAgB;AAAED,WAASE,IAAT,CAAcC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsCT,IAAtC,CAA2C,GAA3C,CAAd;AAAgE;;AAElF,IAAIU,QAAJ,EAAcC,QAAd,EAAwBC,QAAxB;AACArB,KAAK,eAAL,EAAsB,UAAUsB,CAAV,EAAa;AACjCrB,UAAQI,YAAR,EAAsB,UAAUkB,EAAV,EAAcC,MAAd,EAAsB;AAC1CF,MAAEG,OAAF,CAAUF,EAAV,EAAc,uBAAd;;AAEAJ,eAAWrB,KAAK4B,OAAL,CAAaF,MAAb,EAAqBd,SAArB,CAAX;AACAU,eAAWtB,KAAK4B,OAAL,CAAaF,MAAb,EAAqBhB,SAArB,CAAX;;AAEAa,eAAWM,QAAQC,GAAR,CAAYC,IAAvB;AACAF,YAAQC,GAAR,CAAYC,IAAZ,GAAmBV,QAAnB;;AAEAhB,WAAOgB,QAAP,EAAiB,UAAUI,EAAV,EAAc;AAC7BD,QAAEG,OAAF,CAAUF,EAAV,EAAc,gBAAd;AACAD,QAAEQ,GAAF;AACD,KAHD;AAID,GAbD;AAcD,CAfD;;AAiBA9B,KAAK,8BAAL,EAAqC,UAAUsB,CAAV,EAAa;AAChDlB,SAAOe,QAAP,EAAiB,EAACY,OAAO,KAAR,EAAeC,MAAMZ,QAArB,EAA+BR,KAAKA,GAApC,EAAjB,EAA2D,UAAUW,EAAV,EAAc;AACvED,MAAEG,OAAF,CAAUF,EAAV,EAAc,oBAAd;AACAD,MAAEW,KAAF,CAAQtB,SAAS,CAAT,CAAR,EAAqB,mDAAmDQ,QAAxE;AACAQ,YAAQC,GAAR,CAAYC,IAAZ,GAAmBR,QAAnB;AACAC,MAAEQ,GAAF;AACD,GALD;AAMD,CAPD","file":"not-remove-home-directory.js","sourcesContent":["var path = require('path')\n\nvar test = require('tap').test\nvar mkdtemp = require('tmp').dir\nvar mkdirp = require('mkdirp')\n\nvar vacuum = require('../vacuum.js')\n\n// CONSTANTS\nvar TEMP_OPTIONS = {\n  unsafeCleanup: true,\n  mode: '0700'\n}\n\nvar BASE_PATH = path.join('foo')\nvar HOME_PATH = path.join(BASE_PATH, 'foo', 'bar')\n\nvar messages = []\nfunction log () { messages.push(Array.prototype.slice.call(arguments).join(' ')) }\n\nvar homePath, basePath, realHome\ntest('xXx setup xXx', function (t) {\n  mkdtemp(TEMP_OPTIONS, function (er, tmpdir) {\n    t.ifError(er, 'temp directory exists')\n\n    homePath = path.resolve(tmpdir, HOME_PATH)\n    basePath = path.resolve(tmpdir, BASE_PATH)\n\n    realHome = process.env.HOME\n    process.env.HOME = homePath\n\n    mkdirp(homePath, function (er) {\n      t.ifError(er, 'made test path')\n      t.end()\n    })\n  })\n})\n\ntest('do not remove home directory', function (t) {\n  vacuum(homePath, {purge: false, base: basePath, log: log}, function (er) {\n    t.ifError(er, 'cleaned up to base')\n    t.equal(messages[0], 'quitting because cannot remove home directory ' + homePath)\n    process.env.HOME = realHome\n    t.end()\n  })\n})\n"]}