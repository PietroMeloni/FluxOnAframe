{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/rc/lib/utils.js"],"names":["fs","require","ini","path","stripJsonComments","parse","exports","content","test","JSON","file","args","slice","call","arguments","filter","arg","i","join","apply","readFileSync","err","json","env","prefix","process","obj","l","length","k","toLowerCase","indexOf","keypath","substring","split","_emptyStringIndex","splice","cursor","forEach","_buildSubObj","_subkey","undefined","find","rel","start","statSync","dirname","cwd"],"mappings":"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","file":"utils.js","sourcesContent":["'use strict';\nvar fs   = require('fs')\nvar ini  = require('ini')\nvar path = require('path')\nvar stripJsonComments = require('strip-json-comments')\n\nvar parse = exports.parse = function (content) {\n\n  //if it ends in .json or starts with { then it must be json.\n  //must be done this way, because ini accepts everything.\n  //can't just try and parse it and let it throw if it's not ini.\n  //everything is ini. even json with a syntax error.\n\n  if(/^\\s*{/.test(content))\n    return JSON.parse(stripJsonComments(content))\n  return ini.parse(content)\n\n}\n\nvar file = exports.file = function () {\n  var args = [].slice.call(arguments).filter(function (arg) { return arg != null })\n\n  //path.join breaks if it's a not a string, so just skip this.\n  for(var i in args)\n    if('string' !== typeof args[i])\n      return\n\n  var file = path.join.apply(null, args)\n  var content\n  try {\n    return fs.readFileSync(file,'utf-8')\n  } catch (err) {\n    return\n  }\n}\n\nvar json = exports.json = function () {\n  var content = file.apply(null, arguments)\n  return content ? parse(content) : null\n}\n\nvar env = exports.env = function (prefix, env) {\n  env = env || process.env\n  var obj = {}\n  var l = prefix.length\n  for(var k in env) {\n    if(k.toLowerCase().indexOf(prefix.toLowerCase()) === 0) {\n\n      var keypath = k.substring(l).split('__')\n\n      // Trim empty strings from keypath array\n      var _emptyStringIndex\n      while ((_emptyStringIndex=keypath.indexOf('')) > -1) {\n        keypath.splice(_emptyStringIndex, 1)\n      }\n\n      var cursor = obj\n      keypath.forEach(function _buildSubObj(_subkey,i){\n\n        // (check for _subkey first so we ignore empty strings)\n        // (check for cursor to avoid assignment to primitive objects)\n        if (!_subkey || typeof cursor !== 'object')\n          return\n\n        // If this is the last key, just stuff the value in there\n        // Assigns actual value from env variable to final key\n        // (unless it's just an empty string- in that case use the last valid key)\n        if (i === keypath.length-1)\n          cursor[_subkey] = env[k]\n\n\n        // Build sub-object if nothing already exists at the keypath\n        if (cursor[_subkey] === undefined)\n          cursor[_subkey] = {}\n\n        // Increment cursor used to track the object at the current depth\n        cursor = cursor[_subkey]\n\n      })\n\n    }\n\n  }\n\n  return obj\n}\n\nvar find = exports.find = function () {\n  var rel = path.join.apply(null, [].slice.call(arguments))\n\n  function find(start, rel) {\n    var file = path.join(start, rel)\n    try {\n      fs.statSync(file)\n      return file\n    } catch (err) {\n      if(path.dirname(start) !== start) // root\n        return find(path.dirname(start), rel)\n    }\n  }\n  return find(process.cwd(), rel)\n}\n\n\n"]}