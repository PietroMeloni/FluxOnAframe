{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/rc/test/test.js"],"names":["n","Math","random","assert","require","process","env","config","option","console","log","equal","envOption","customArgv","argv","remain","cooked","original","fs","path","jsonrc","resolve","writeFileSync","join","commentedJSON","unlinkSync","configs","length"],"mappings":";;AACA,IAAIA,IAAI,OAAKC,KAAKC,MAAL,EAAb;AACA,IAAIC,SAASC,QAAQ,QAAR,CAAb;;AAEAC,QAAQC,GAAR,CAAYN,IAAE,YAAd,IAA8B,EAA9B;;AAEA,IAAIO,SAASH,QAAQ,KAAR,EAAeJ,CAAf,EAAkB;AAC7BQ,UAAQ;AADqB,CAAlB,CAAb;;AAIAC,QAAQC,GAAR,CAAYH,MAAZ;;AAEAJ,OAAOQ,KAAP,CAAaJ,OAAOC,MAApB,EAA4B,IAA5B;AACAL,OAAOQ,KAAP,CAAaJ,OAAOK,SAApB,EAA+B,EAA/B;;AAEA,IAAIC,aAAaT,QAAQ,KAAR,EAAeJ,CAAf,EAAkB;AACjCQ,UAAQ;AADyB,CAAlB,EAEd,EAAE;AACHA,UAAQ,KADP;AAEDI,aAAW,EAFV;AAGDE,QAAM;AACJC,YAAQ,EADJ;AAEJC,YAAQ,CAAC,aAAD,EAAgB,aAAhB,EAA+B,IAA/B,CAFJ;AAGJC,cAAU,CAAC,aAAD,EAAgB,gBAAhB;AAHN;AAHL,CAFc,CAAjB;;AAYAR,QAAQC,GAAR,CAAYG,UAAZ;;AAEAV,OAAOQ,KAAP,CAAaE,WAAWL,MAAxB,EAAgC,KAAhC;AACAL,OAAOQ,KAAP,CAAaE,WAAWD,SAAxB,EAAmC,EAAnC;;AAEA,IAAIM,KAAKd,QAAQ,IAAR,CAAT;AACA,IAAIe,OAAOf,QAAQ,MAAR,CAAX;AACA,IAAIgB,SAASD,KAAKE,OAAL,CAAa,MAAMrB,CAAN,GAAU,IAAvB,CAAb;;AAEAkB,GAAGI,aAAH,CAAiBF,MAAjB,EAAyB,CACvB,GADuB,EAErB,2BAFqB,EAGrB,kBAHqB,EAIrB,0BAJqB,EAKrB,iBALqB,EAMvB,GANuB,EAOvBG,IAPuB,CAOlB,IAPkB,CAAzB;;AASA,IAAIC,gBAAgBpB,QAAQ,KAAR,EAAeJ,CAAf,EAAkB;AACpCQ,UAAQ;AAD4B,CAAlB,CAApB;;AAIAU,GAAGO,UAAH,CAAcL,MAAd;;AAEAX,QAAQC,GAAR,CAAYc,aAAZ;;AAEArB,OAAOQ,KAAP,CAAaa,cAAchB,MAA3B,EAAmC,KAAnC;AACAL,OAAOQ,KAAP,CAAaa,cAAcZ,SAA3B,EAAsC,EAAtC;;AAEAT,OAAOQ,KAAP,CAAaa,cAAcjB,MAA3B,EAAmCa,MAAnC;AACAjB,OAAOQ,KAAP,CAAaa,cAAcE,OAAd,CAAsBC,MAAnC,EAA2C,CAA3C;AACAxB,OAAOQ,KAAP,CAAaa,cAAcE,OAAd,CAAsB,CAAtB,CAAb,EAAuCN,MAAvC","file":"test.js","sourcesContent":["\nvar n = 'rc'+Math.random()\nvar assert = require('assert')\n\nprocess.env[n+'_envOption'] = 42\n\nvar config = require('../')(n, {\n  option: true\n})\n\nconsole.log(config)\n\nassert.equal(config.option, true)\nassert.equal(config.envOption, 42)\n\nvar customArgv = require('../')(n, {\n  option: true\n}, { // nopt-like argv\n  option: false,\n  envOption: 24,\n  argv: {\n    remain: [],\n    cooked: ['--no-option', '--envOption', '24'],\n    original: ['--no-option', '--envOption=24']\n  }\n})\n\nconsole.log(customArgv)\n\nassert.equal(customArgv.option, false)\nassert.equal(customArgv.envOption, 24)\n\nvar fs = require('fs')\nvar path = require('path')\nvar jsonrc = path.resolve('.' + n + 'rc');\n\nfs.writeFileSync(jsonrc, [\n  '{',\n    '// json overrides default',\n    '\"option\": false,',\n    '/* env overrides json */',\n    '\"envOption\": 24',\n  '}'\n].join('\\n'));\n\nvar commentedJSON = require('../')(n, {\n  option: true\n})\n\nfs.unlinkSync(jsonrc);\n\nconsole.log(commentedJSON)\n\nassert.equal(commentedJSON.option, false)\nassert.equal(commentedJSON.envOption, 42)\n\nassert.equal(commentedJSON.config, jsonrc)\nassert.equal(commentedJSON.configs.length, 1)\nassert.equal(commentedJSON.configs[0], jsonrc)\n"]}