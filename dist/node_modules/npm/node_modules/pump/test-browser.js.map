{"version":3,"sources":["../../../../../node_modules/npm/node_modules/pump/test-browser.js"],"names":["stream","require","pump","rs","Readable","ws","Writable","_read","size","push","Buffer","fill","_write","chunk","encoding","cb","setTimeout","toHex","reverse","Transform","_transform","enc","callback","toString","wsClosed","rsClosed","callbackCalled","check","console","log","clearTimeout","timeout","on","res","Error","emit"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,OAAOD,QAAQ,SAAR,CAAX;;AAEA,IAAIE,KAAK,IAAIH,OAAOI,QAAX,EAAT;AACA,IAAIC,KAAK,IAAIL,OAAOM,QAAX,EAAT;;AAEAH,GAAGI,KAAH,GAAW,UAAUC,IAAV,EAAgB;AACzB,OAAKC,IAAL,CAAUC,OAAOF,IAAP,EAAaG,IAAb,CAAkB,KAAlB,CAAV;AACD,CAFD;;AAIAN,GAAGO,MAAH,GAAY,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,EAA3B,EAA+B;AACzCC,aAAW,YAAY;AACrBD;AACD,GAFD,EAEG,GAFH;AAGD,CAJD;;AAMA,IAAIE,QAAQ,SAARA,KAAQ,GAAY;AACtB,MAAIC,UAAU,KAAKjB,QAAQ,QAAR,EAAkBkB,SAAvB,GAAd;;AAEAD,UAAQE,UAAR,GAAqB,UAAUP,KAAV,EAAiBQ,GAAjB,EAAsBC,QAAtB,EAAgC;AACnDJ,YAAQT,IAAR,CAAaI,MAAMU,QAAN,CAAe,KAAf,CAAb;AACAD;AACD,GAHD;;AAKA,SAAOJ,OAAP;AACD,CATD;;AAWA,IAAIM,WAAW,KAAf;AACA,IAAIC,WAAW,KAAf;AACA,IAAIC,iBAAiB,KAArB;;AAEA,IAAIC,QAAQ,SAARA,KAAQ,GAAY;AACtB,MAAIH,YAAYC,QAAZ,IAAwBC,cAA5B,EAA4C;AAC1CE,YAAQC,GAAR,CAAY,wBAAZ;AACAC,iBAAaC,OAAb;AACD;AACF,CALD;;AAOA1B,GAAG2B,EAAH,CAAM,QAAN,EAAgB,YAAY;AAC1BR,aAAW,IAAX;AACAG;AACD,CAHD;;AAKAxB,GAAG6B,EAAH,CAAM,KAAN,EAAa,YAAY;AACvBP,aAAW,IAAX;AACAE;AACD,CAHD;;AAKA,IAAIM,MAAM/B,KAAKC,EAAL,EAASc,OAAT,EAAkBA,OAAlB,EAA2BA,OAA3B,EAAoCZ,EAApC,EAAwC,YAAY;AAC5DqB,mBAAiB,IAAjB;AACAC;AACD,CAHS,CAAV;;AAKA,IAAIM,QAAQ5B,EAAZ,EAAgB;AACd,QAAM,IAAI6B,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAEDlB,WAAW,YAAY;AACrBb,KAAGM,IAAH,CAAQ,IAAR;AACAN,KAAGgC,IAAH,CAAQ,OAAR;AACD,CAHD,EAGG,IAHH;;AAKA,IAAIJ,UAAUf,WAAW,YAAY;AACnCW;AACA,QAAM,IAAIO,KAAJ,CAAU,SAAV,CAAN;AACD,CAHa,EAGX,IAHW,CAAd","file":"test-browser.js","sourcesContent":["var stream = require('stream')\nvar pump = require('./index')\n\nvar rs = new stream.Readable()\nvar ws = new stream.Writable()\n\nrs._read = function (size) {\n  this.push(Buffer(size).fill('abc'))\n}\n\nws._write = function (chunk, encoding, cb) {\n  setTimeout(function () {\n    cb()\n  }, 100)\n}\n\nvar toHex = function () {\n  var reverse = new (require('stream').Transform)()\n\n  reverse._transform = function (chunk, enc, callback) {\n    reverse.push(chunk.toString('hex'))\n    callback()\n  }\n\n  return reverse\n}\n\nvar wsClosed = false\nvar rsClosed = false\nvar callbackCalled = false\n\nvar check = function () {\n  if (wsClosed && rsClosed && callbackCalled) {\n    console.log('test-browser.js passes')\n    clearTimeout(timeout)\n  }\n}\n\nws.on('finish', function () {\n  wsClosed = true\n  check()\n})\n\nrs.on('end', function () {\n  rsClosed = true\n  check()\n})\n\nvar res = pump(rs, toHex(), toHex(), toHex(), ws, function () {\n  callbackCalled = true\n  check()\n})\n\nif (res !== ws) {\n  throw new Error('should return last stream')\n}\n\nsetTimeout(function () {\n  rs.push(null)\n  rs.emit('close')\n}, 1000)\n\nvar timeout = setTimeout(function () {\n  check()\n  throw new Error('timeout')\n}, 5000)\n"]}