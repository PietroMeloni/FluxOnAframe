{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/byline/lib/byline.js"],"names":["stream","require","util","timers","module","exports","readStream","options","createStream","createLineStream","LineStream","console","log","Error","readable","ls","pipe","Transform","call","_readableState","objectMode","_lineBuffer","_keepEmptyLines","keepEmptyLines","_lastChunkEndedWithCR","self","on","src","encoding","Readable","inherits","prototype","_transform","chunk","done","Buffer","isBuffer","toString","_chunkEncoding","lines","split","shift","length","concat","_pushBuffer","keep","line","push","_reencode","setImmediate","_flush","chunkEncoding"],"mappings":"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","file":"byline.js","sourcesContent":["// Copyright (C) 2011-2015 John Hewson\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\nvar stream = require('stream'),\n    util = require('util'),\n    timers = require('timers');\n\n// convinience API\nmodule.exports = function(readStream, options) {\n  return module.exports.createStream(readStream, options);\n};\n\n// basic API\nmodule.exports.createStream = function(readStream, options) {\n  if (readStream) {\n    return createLineStream(readStream, options);\n  } else {\n    return new LineStream(options);\n  }\n};\n\n// deprecated API\nmodule.exports.createLineStream = function(readStream) {\n  console.log('WARNING: byline#createLineStream is deprecated and will be removed soon');\n  return createLineStream(readStream);\n};\n\nfunction createLineStream(readStream, options) {\n  if (!readStream) {\n    throw new Error('expected readStream');\n  }\n  if (!readStream.readable) {\n    throw new Error('readStream must be readable');\n  }\n  var ls = new LineStream(options);\n  readStream.pipe(ls);\n  return ls;\n}\n\n//\n// using the new node v0.10 \"streams2\" API\n//\n\nmodule.exports.LineStream = LineStream;\n\nfunction LineStream(options) {\n  stream.Transform.call(this, options);\n  options = options || {};\n\n  // use objectMode to stop the output from being buffered\n  // which re-concatanates the lines, just without newlines.\n  this._readableState.objectMode = true;\n  this._lineBuffer = [];\n  this._keepEmptyLines = options.keepEmptyLines || false;\n  this._lastChunkEndedWithCR = false;\n\n  // take the source's encoding if we don't have one\n  var self = this;\n  this.on('pipe', function(src) {\n    if (!self.encoding) {\n      // but we can't do this for old-style streams\n      if (src instanceof stream.Readable) {\n        self.encoding = src._readableState.encoding;\n      }\n    }\n  });\n}\nutil.inherits(LineStream, stream.Transform);\n\nLineStream.prototype._transform = function(chunk, encoding, done) {\n  // decode binary chunks as UTF-8\n  encoding = encoding || 'utf8';\n  \n  if (Buffer.isBuffer(chunk)) {\n    if (encoding == 'buffer') {\n      chunk = chunk.toString(); // utf8\n      encoding = 'utf8';\n    }\n    else {\n     chunk = chunk.toString(encoding);\n    }\n  }\n  this._chunkEncoding = encoding;\n  \n  // see: http://www.unicode.org/reports/tr18/#Line_Boundaries\n  var lines = chunk.split(/\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g);\n  \n  // don't split CRLF which spans chunks\n  if (this._lastChunkEndedWithCR && chunk[0] == '\\n') {\n    lines.shift();\n  }\n  \n  if (this._lineBuffer.length > 0) {\n    this._lineBuffer[this._lineBuffer.length - 1] += lines[0];\n    lines.shift();\n  }\n\n  this._lastChunkEndedWithCR = chunk[chunk.length - 1] == '\\r';\n  this._lineBuffer = this._lineBuffer.concat(lines);\n  this._pushBuffer(encoding, 1, done);\n};\n\nLineStream.prototype._pushBuffer = function(encoding, keep, done) {\n  // always buffer the last (possibly partial) line\n  while (this._lineBuffer.length > keep) {\n    var line = this._lineBuffer.shift();\n    // skip empty lines\n    if (this._keepEmptyLines || line.length > 0 ) {\n      if (!this.push(this._reencode(line, encoding))) {\n        // when the high-water mark is reached, defer pushes until the next tick\n        var self = this;\n        timers.setImmediate(function() {\n          self._pushBuffer(encoding, keep, done);\n        });\n        return;\n      }\n    }\n  }\n  done();\n};\n\nLineStream.prototype._flush = function(done) {\n  this._pushBuffer(this._chunkEncoding, 0, done);\n};\n\n// see Readable::push\nLineStream.prototype._reencode = function(line, chunkEncoding) {\n  if (this.encoding && this.encoding != chunkEncoding) {\n    return new Buffer(line, chunkEncoding).toString(this.encoding);\n  }\n  else if (this.encoding) {\n    // this should be the most common case, i.e. we're using an encoded source stream\n    return line;\n  }\n  else {\n    return new Buffer(line, chunkEncoding);\n  }\n};\n"]}