{"version":3,"sources":["../../../../../node_modules/npm/node_modules/through/index.js"],"names":["Stream","require","exports","module","through","write","end","opts","data","queue","ended","destroyed","buffer","_ended","stream","readable","writable","paused","autoDestroy","call","drain","length","shift","emit","push","on","process","nextTick","destroy","_end","arguments","pause","resume"],"mappings":"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","file":"index.js","sourcesContent":["var Stream = require('stream')\n\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\n\nexports = module.exports = through\nthrough.through = through\n\n//create a readable writable stream.\n\nfunction through (write, end, opts) {\n  write = write || function (data) { this.queue(data) }\n  end = end || function () { this.queue(null) }\n\n  var ended = false, destroyed = false, buffer = [], _ended = false\n  var stream = new Stream()\n  stream.readable = stream.writable = true\n  stream.paused = false\n\n//  stream.autoPause   = !(opts && opts.autoPause   === false)\n  stream.autoDestroy = !(opts && opts.autoDestroy === false)\n\n  stream.write = function (data) {\n    write.call(this, data)\n    return !stream.paused\n  }\n\n  function drain() {\n    while(buffer.length && !stream.paused) {\n      var data = buffer.shift()\n      if(null === data)\n        return stream.emit('end')\n      else\n        stream.emit('data', data)\n    }\n  }\n\n  stream.queue = stream.push = function (data) {\n//    console.error(ended)\n    if(_ended) return stream\n    if(data === null) _ended = true\n    buffer.push(data)\n    drain()\n    return stream\n  }\n\n  //this will be registered as the first 'end' listener\n  //must call destroy next tick, to make sure we're after any\n  //stream piped from here.\n  //this is only a problem if end is not emitted synchronously.\n  //a nicer way to do this is to make sure this is the last listener for 'end'\n\n  stream.on('end', function () {\n    stream.readable = false\n    if(!stream.writable && stream.autoDestroy)\n      process.nextTick(function () {\n        stream.destroy()\n      })\n  })\n\n  function _end () {\n    stream.writable = false\n    end.call(stream)\n    if(!stream.readable && stream.autoDestroy)\n      stream.destroy()\n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    ended = true\n    if(arguments.length) stream.write(data)\n    _end() // will emit or queue\n    return stream\n  }\n\n  stream.destroy = function () {\n    if(destroyed) return\n    destroyed = true\n    ended = true\n    buffer.length = 0\n    stream.writable = stream.readable = false\n    stream.emit('close')\n    return stream\n  }\n\n  stream.pause = function () {\n    if(stream.paused) return\n    stream.paused = true\n    return stream\n  }\n\n  stream.resume = function () {\n    if(stream.paused) {\n      stream.paused = false\n      stream.emit('resume')\n    }\n    drain()\n    //may have become paused again,\n    //as drain emits 'data'.\n    if(!stream.paused)\n      stream.emit('drain')\n    return stream\n  }\n  return stream\n}\n\n"]}