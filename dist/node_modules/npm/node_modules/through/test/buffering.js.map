{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/through/test/buffering.js"],"names":["test","require","through","assert","ts","data","queue","ended","actual","on","push","bind","write","deepEqual","pause","resume","end","ok"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,UAAUD,QAAQ,KAAR,CAAd;;AAEA;;AAEAD,KAAK,WAAL,EAAkB,UAASG,MAAT,EAAiB;AACjC,MAAIC,KAAKF,QAAQ,UAAUG,IAAV,EAAgB;AAC/B,SAAKC,KAAL,CAAWD,IAAX;AACD,GAFQ,EAEN,YAAY;AACb,SAAKC,KAAL,CAAW,IAAX;AACD,GAJQ,CAAT;;AAMA,MAAIC,QAAQ,KAAZ;AAAA,MAAoBC,SAAS,EAA7B;;AAEAJ,KAAGK,EAAH,CAAM,MAAN,EAAcD,OAAOE,IAAP,CAAYC,IAAZ,CAAiBH,MAAjB,CAAd;AACAJ,KAAGK,EAAH,CAAM,KAAN,EAAa,YAAY;AACvBF,YAAQ,IAAR;AACD,GAFD;;AAIAH,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAT,SAAOU,SAAP,CAAiBL,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACAJ,KAAGU,KAAH;AACAV,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAT,SAAOU,SAAP,CAAiBL,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB;AACAJ,KAAGW,MAAH;AACAZ,SAAOU,SAAP,CAAiBL,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAzB;AACAJ,KAAGU,KAAH;AACAV,KAAGY,GAAH;AACAb,SAAOc,EAAP,CAAU,CAACV,KAAX;AACAH,KAAGW,MAAH;AACAZ,SAAOc,EAAP,CAAUV,KAAV;AACAJ,SAAOa,GAAP;AACD,CA/BD;;AAiCAhB,KAAK,wCAAL,EAA+C,UAAUG,MAAV,EAAkB;;AAE/D;;;;;;AAMA,MAAIC,KAAKF,QAAQ,UAAUG,IAAV,EAAgB;AAC/B,SAAKC,KAAL,CAAWD,IAAX;AACD,GAFQ,EAEN,YAAY;AACb,SAAKC,KAAL,CAAW,IAAX;AACD,GAJQ,CAAT;;AAMA,MAAIC,QAAQ,KAAZ;AAAA,MAAoBC,SAAS,EAA7B;;AAEAJ,KAAGK,EAAH,CAAM,MAAN,EAAcD,OAAOE,IAAP,CAAYC,IAAZ,CAAiBH,MAAjB,CAAd;AACAJ,KAAGK,EAAH,CAAM,KAAN,EAAa,YAAY;AACvBF,YAAQ,IAAR;AACD,GAFD;;AAIAH,KAAGU,KAAH;AACAV,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGQ,KAAH,CAAS,CAAT;AACAR,KAAGY,GAAH;AACAb,SAAOU,SAAP,CAAiBL,MAAjB,EAAyB,EAAzB,EAA6B,mCAA7B;AACAL,SAAOc,EAAP,CAAU,CAACV,KAAX,EAAkB,mCAAlB;AACAH,KAAGW,MAAH;AACAZ,SAAOU,SAAP,CAAiBL,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzB,EAAoC,uCAApC;AACAL,SAAOc,EAAP,CAAUV,KAAV,EAAiB,mDAAjB;AACAJ,SAAOa,GAAP;AACD,CAhCD","file":"buffering.js","sourcesContent":["var test = require('tape')\nvar through = require('../')\n\n// must emit end before close.\n\ntest('buffering', function(assert) {\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.pause()\n  ts.write(4)\n  ts.write(5)\n  ts.write(6)\n  assert.deepEqual(actual, [1, 2, 3])\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3, 4, 5, 6])\n  ts.pause()\n  ts.end()\n  assert.ok(!ended)\n  ts.resume()\n  assert.ok(ended)\n  assert.end()\n})\n\ntest('buffering has data in queue, when ends', function (assert) {\n\n  /*\n   * If stream ends while paused with data in the queue,\n   * stream should still emit end after all data is written\n   * on resume.\n   */\n\n  var ts = through(function (data) {\n    this.queue(data)\n  }, function () {\n    this.queue(null)\n  })\n\n  var ended = false,  actual = []\n\n  ts.on('data', actual.push.bind(actual))\n  ts.on('end', function () {\n    ended = true\n  })\n\n  ts.pause()\n  ts.write(1)\n  ts.write(2)\n  ts.write(3)\n  ts.end()\n  assert.deepEqual(actual, [], 'no data written yet, still paused')\n  assert.ok(!ended, 'end not emitted yet, still paused')\n  ts.resume()\n  assert.deepEqual(actual, [1, 2, 3], 'resumed, all data should be delivered')\n  assert.ok(ended, 'end should be emitted once all data was delivered')\n  assert.end();\n})\n"]}