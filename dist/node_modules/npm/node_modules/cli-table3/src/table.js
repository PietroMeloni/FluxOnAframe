'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var utils = require('./utils');
var tableLayout = require('./layout-manager');

var Table = function (_Array) {
  _inherits(Table, _Array);

  function Table(options) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this));

    _this.options = utils.mergeOptions(options);
    return _this;
  }

  _createClass(Table, [{
    key: 'toString',
    value: function toString() {
      var array = this;
      var headersPresent = this.options.head && this.options.head.length;
      if (headersPresent) {
        array = [this.options.head];
        if (this.length) {
          array.push.apply(array, this);
        }
      } else {
        this.options.style.head = [];
      }

      var cells = tableLayout.makeTableLayout(array);

      cells.forEach(function (row) {
        row.forEach(function (cell) {
          cell.mergeTableOptions(this.options, cells);
        }, this);
      }, this);

      tableLayout.computeWidths(this.options.colWidths, cells);
      tableLayout.computeHeights(this.options.rowHeights, cells);

      cells.forEach(function (row) {
        row.forEach(function (cell) {
          cell.init(this.options);
        }, this);
      }, this);

      var result = [];

      for (var rowIndex = 0; rowIndex < cells.length; rowIndex++) {
        var row = cells[rowIndex];
        var heightOfRow = this.options.rowHeights[rowIndex];

        if (rowIndex === 0 || !this.options.style.compact || rowIndex == 1 && headersPresent) {
          doDraw(row, 'top', result);
        }

        for (var lineNum = 0; lineNum < heightOfRow; lineNum++) {
          doDraw(row, lineNum, result);
        }

        if (rowIndex + 1 == cells.length) {
          doDraw(row, 'bottom', result);
        }
      }

      return result.join('\n');
    }
  }, {
    key: 'width',
    get: function get() {
      var str = this.toString().split('\n');
      return str[0].length;
    }
  }]);

  return Table;
}(Array);

function doDraw(row, lineNum, result) {
  var line = [];
  row.forEach(function (cell) {
    line.push(cell.draw(lineNum));
  });
  var str = line.join('');
  if (str.length) result.push(str);
}

module.exports = Table;
//# sourceMappingURL=table.js.map