{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/cli-table3/src/cell.js"],"names":["utils","require","Cell","options","setOptions","x","y","indexOf","content","String","Error","colSpan","rowSpan","tableOptions","cells","optionsChars","chars","tableChars","CHAR_NAMES","forEach","name","setOption","truncate","style","tableStyle","head","border","fixedWidth","colWidths","wordWrap","paddingLeft","paddingRight","i","lines","colorizeLines","split","desiredWidth","strlen","desiredHeight","length","widths","slice","heights","rowHeights","width","reduce","sumPlusOne","height","hAlign","colAligns","vAlign","rowAligns","drawRight","lineNum","spanningCell","drawTop","drawBottom","padLen","Math","max","padTop","ceil","drawEmpty","forceTruncation","drawLine","index","push","_topLeftChar","repeat","wrapWithStyleColors","join","offset","leftChar","spanAbove","ColSpanCell","RowSpanCell","styleProperty","colors","e","forceTruncationSymbol","left","cellLeft","leftPadding","right","rightPadding","line","len","pad","stylizeLine","bottom","originalCell","originalY","cellOffset","findDimension","draw","objA","objB","nameB","targetObj","nameA","charAt","toUpperCase","substr","dimensionTable","startingIndex","span","ret","a","b","module","exports"],"mappings":"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","file":"cell.js","sourcesContent":["const utils = require('./utils');\n\nclass Cell {\n  /**\n   * A representation of a cell within the table.\n   * Implementations must have `init` and `draw` methods,\n   * as well as `colSpan`, `rowSpan`, `desiredHeight` and `desiredWidth` properties.\n   * @param options\n   * @constructor\n   */\n  constructor(options) {\n    this.setOptions(options);\n\n    /**\n     * Each cell will have it's `x` and `y` values set by the `layout-manager` prior to\n     * `init` being called;\n     * @type {Number}\n     */\n    this.x = null;\n    this.y = null;\n  }\n\n  setOptions(options) {\n    if (['boolean', 'number', 'string'].indexOf(typeof options) !== -1) {\n      options = { content: '' + options };\n    }\n    options = options || {};\n    this.options = options;\n    let content = options.content;\n    if (['boolean', 'number', 'string'].indexOf(typeof content) !== -1) {\n      this.content = String(content);\n    } else if (!content) {\n      this.content = '';\n    } else {\n      throw new Error('Content needs to be a primitive, got: ' + typeof content);\n    }\n    this.colSpan = options.colSpan || 1;\n    this.rowSpan = options.rowSpan || 1;\n  }\n\n  mergeTableOptions(tableOptions, cells) {\n    this.cells = cells;\n\n    let optionsChars = this.options.chars || {};\n    let tableChars = tableOptions.chars;\n    let chars = (this.chars = {});\n    CHAR_NAMES.forEach(function(name) {\n      setOption(optionsChars, tableChars, name, chars);\n    });\n\n    this.truncate = this.options.truncate || tableOptions.truncate;\n\n    let style = (this.options.style = this.options.style || {});\n    let tableStyle = tableOptions.style;\n    setOption(style, tableStyle, 'padding-left', this);\n    setOption(style, tableStyle, 'padding-right', this);\n    this.head = style.head || tableStyle.head;\n    this.border = style.border || tableStyle.border;\n\n    let fixedWidth = tableOptions.colWidths[this.x];\n    if (tableOptions.wordWrap && fixedWidth) {\n      fixedWidth -= this.paddingLeft + this.paddingRight;\n      if (this.colSpan) {\n        let i = 1;\n        while (i < this.colSpan) {\n          fixedWidth += tableOptions.colWidths[this.x + i];\n          i++;\n        }\n      }\n      this.lines = utils.colorizeLines(utils.wordWrap(fixedWidth, this.content));\n    } else {\n      this.lines = utils.colorizeLines(this.content.split('\\n'));\n    }\n\n    this.desiredWidth = utils.strlen(this.content) + this.paddingLeft + this.paddingRight;\n    this.desiredHeight = this.lines.length;\n  }\n\n  /**\n   * Initializes the Cells data structure.\n   *\n   * @param tableOptions - A fully populated set of tableOptions.\n   * In addition to the standard default values, tableOptions must have fully populated the\n   * `colWidths` and `rowWidths` arrays. Those arrays must have lengths equal to the number\n   * of columns or rows (respectively) in this table, and each array item must be a Number.\n   *\n   */\n  init(tableOptions) {\n    let x = this.x;\n    let y = this.y;\n    this.widths = tableOptions.colWidths.slice(x, x + this.colSpan);\n    this.heights = tableOptions.rowHeights.slice(y, y + this.rowSpan);\n    this.width = this.widths.reduce(sumPlusOne, -1);\n    this.height = this.heights.reduce(sumPlusOne, -1);\n\n    this.hAlign = this.options.hAlign || tableOptions.colAligns[x];\n    this.vAlign = this.options.vAlign || tableOptions.rowAligns[y];\n\n    this.drawRight = x + this.colSpan == tableOptions.colWidths.length;\n  }\n\n  /**\n   * Draws the given line of the cell.\n   * This default implementation defers to methods `drawTop`, `drawBottom`, `drawLine` and `drawEmpty`.\n   * @param lineNum - can be `top`, `bottom` or a numerical line number.\n   * @param spanningCell - will be a number if being called from a RowSpanCell, and will represent how\n   * many rows below it's being called from. Otherwise it's undefined.\n   * @returns {String} The representation of this line.\n   */\n  draw(lineNum, spanningCell) {\n    if (lineNum == 'top') return this.drawTop(this.drawRight);\n    if (lineNum == 'bottom') return this.drawBottom(this.drawRight);\n    let padLen = Math.max(this.height - this.lines.length, 0);\n    let padTop;\n    switch (this.vAlign) {\n      case 'center':\n        padTop = Math.ceil(padLen / 2);\n        break;\n      case 'bottom':\n        padTop = padLen;\n        break;\n      default:\n        padTop = 0;\n    }\n    if (lineNum < padTop || lineNum >= padTop + this.lines.length) {\n      return this.drawEmpty(this.drawRight, spanningCell);\n    }\n    let forceTruncation = this.lines.length > this.height && lineNum + 1 >= this.height;\n    return this.drawLine(lineNum - padTop, this.drawRight, forceTruncation, spanningCell);\n  }\n\n  /**\n   * Renders the top line of the cell.\n   * @param drawRight - true if this method should render the right edge of the cell.\n   * @returns {String}\n   */\n  drawTop(drawRight) {\n    let content = [];\n    if (this.cells) {\n      //TODO: cells should always exist - some tests don't fill it in though\n      this.widths.forEach(function(width, index) {\n        content.push(this._topLeftChar(index));\n        content.push(utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'], width));\n      }, this);\n    } else {\n      content.push(this._topLeftChar(0));\n      content.push(utils.repeat(this.chars[this.y == 0 ? 'top' : 'mid'], this.width));\n    }\n    if (drawRight) {\n      content.push(this.chars[this.y == 0 ? 'topRight' : 'rightMid']);\n    }\n    return this.wrapWithStyleColors('border', content.join(''));\n  }\n\n  _topLeftChar(offset) {\n    let x = this.x + offset;\n    let leftChar;\n    if (this.y == 0) {\n      leftChar = x == 0 ? 'topLeft' : offset == 0 ? 'topMid' : 'top';\n    } else {\n      if (x == 0) {\n        leftChar = 'leftMid';\n      } else {\n        leftChar = offset == 0 ? 'midMid' : 'bottomMid';\n        if (this.cells) {\n          //TODO: cells should always exist - some tests don't fill it in though\n          let spanAbove = this.cells[this.y - 1][x] instanceof Cell.ColSpanCell;\n          if (spanAbove) {\n            leftChar = offset == 0 ? 'topMid' : 'mid';\n          }\n          if (offset == 0) {\n            let i = 1;\n            while (this.cells[this.y][x - i] instanceof Cell.ColSpanCell) {\n              i++;\n            }\n            if (this.cells[this.y][x - i] instanceof Cell.RowSpanCell) {\n              leftChar = 'leftMid';\n            }\n          }\n        }\n      }\n    }\n    return this.chars[leftChar];\n  }\n\n  wrapWithStyleColors(styleProperty, content) {\n    if (this[styleProperty] && this[styleProperty].length) {\n      try {\n        let colors = require('colors/safe');\n        for (let i = this[styleProperty].length - 1; i >= 0; i--) {\n          colors = colors[this[styleProperty][i]];\n        }\n        return colors(content);\n      } catch (e) {\n        return content;\n      }\n    } else {\n      return content;\n    }\n  }\n\n  /**\n   * Renders a line of text.\n   * @param lineNum - Which line of text to render. This is not necessarily the line within the cell.\n   * There may be top-padding above the first line of text.\n   * @param drawRight - true if this method should render the right edge of the cell.\n   * @param forceTruncationSymbol - `true` if the rendered text should end with the truncation symbol even\n   * if the text fits. This is used when the cell is vertically truncated. If `false` the text should\n   * only include the truncation symbol if the text will not fit horizontally within the cell width.\n   * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.\n   * @returns {String}\n   */\n  drawLine(lineNum, drawRight, forceTruncationSymbol, spanningCell) {\n    let left = this.chars[this.x == 0 ? 'left' : 'middle'];\n    if (this.x && spanningCell && this.cells) {\n      let cellLeft = this.cells[this.y + spanningCell][this.x - 1];\n      while (cellLeft instanceof ColSpanCell) {\n        cellLeft = this.cells[cellLeft.y][cellLeft.x - 1];\n      }\n      if (!(cellLeft instanceof RowSpanCell)) {\n        left = this.chars['rightMid'];\n      }\n    }\n    let leftPadding = utils.repeat(' ', this.paddingLeft);\n    let right = drawRight ? this.chars['right'] : '';\n    let rightPadding = utils.repeat(' ', this.paddingRight);\n    let line = this.lines[lineNum];\n    let len = this.width - (this.paddingLeft + this.paddingRight);\n    if (forceTruncationSymbol) line += this.truncate || '…';\n    let content = utils.truncate(line, len, this.truncate);\n    content = utils.pad(content, len, ' ', this.hAlign);\n    content = leftPadding + content + rightPadding;\n    return this.stylizeLine(left, content, right);\n  }\n\n  stylizeLine(left, content, right) {\n    left = this.wrapWithStyleColors('border', left);\n    right = this.wrapWithStyleColors('border', right);\n    if (this.y === 0) {\n      content = this.wrapWithStyleColors('head', content);\n    }\n    return left + content + right;\n  }\n\n  /**\n   * Renders the bottom line of the cell.\n   * @param drawRight - true if this method should render the right edge of the cell.\n   * @returns {String}\n   */\n  drawBottom(drawRight) {\n    let left = this.chars[this.x == 0 ? 'bottomLeft' : 'bottomMid'];\n    let content = utils.repeat(this.chars.bottom, this.width);\n    let right = drawRight ? this.chars['bottomRight'] : '';\n    return this.wrapWithStyleColors('border', left + content + right);\n  }\n\n  /**\n   * Renders a blank line of text within the cell. Used for top and/or bottom padding.\n   * @param drawRight - true if this method should render the right edge of the cell.\n   * @param spanningCell - a number of if being called from a RowSpanCell. (how many rows below). otherwise undefined.\n   * @returns {String}\n   */\n  drawEmpty(drawRight, spanningCell) {\n    let left = this.chars[this.x == 0 ? 'left' : 'middle'];\n    if (this.x && spanningCell && this.cells) {\n      let cellLeft = this.cells[this.y + spanningCell][this.x - 1];\n      while (cellLeft instanceof ColSpanCell) {\n        cellLeft = this.cells[cellLeft.y][cellLeft.x - 1];\n      }\n      if (!(cellLeft instanceof RowSpanCell)) {\n        left = this.chars['rightMid'];\n      }\n    }\n    let right = drawRight ? this.chars['right'] : '';\n    let content = utils.repeat(' ', this.width);\n    return this.stylizeLine(left, content, right);\n  }\n}\n\nclass ColSpanCell {\n  /**\n   * A Cell that doesn't do anything. It just draws empty lines.\n   * Used as a placeholder in column spanning.\n   * @constructor\n   */\n  constructor() {}\n\n  draw() {\n    return '';\n  }\n\n  init() {}\n\n  mergeTableOptions() {}\n}\n\nclass RowSpanCell {\n  /**\n   * A placeholder Cell for a Cell that spans multiple rows.\n   * It delegates rendering to the original cell, but adds the appropriate offset.\n   * @param originalCell\n   * @constructor\n   */\n  constructor(originalCell) {\n    this.originalCell = originalCell;\n  }\n\n  init(tableOptions) {\n    let y = this.y;\n    let originalY = this.originalCell.y;\n    this.cellOffset = y - originalY;\n    this.offset = findDimension(tableOptions.rowHeights, originalY, this.cellOffset);\n  }\n\n  draw(lineNum) {\n    if (lineNum == 'top') {\n      return this.originalCell.draw(this.offset, this.cellOffset);\n    }\n    if (lineNum == 'bottom') {\n      return this.originalCell.draw('bottom');\n    }\n    return this.originalCell.draw(this.offset + 1 + lineNum);\n  }\n\n  mergeTableOptions() {}\n}\n\n// HELPER FUNCTIONS\nfunction setOption(objA, objB, nameB, targetObj) {\n  let nameA = nameB.split('-');\n  if (nameA.length > 1) {\n    nameA[1] = nameA[1].charAt(0).toUpperCase() + nameA[1].substr(1);\n    nameA = nameA.join('');\n    targetObj[nameA] = objA[nameA] || objA[nameB] || objB[nameA] || objB[nameB];\n  } else {\n    targetObj[nameB] = objA[nameB] || objB[nameB];\n  }\n}\n\nfunction findDimension(dimensionTable, startingIndex, span) {\n  let ret = dimensionTable[startingIndex];\n  for (let i = 1; i < span; i++) {\n    ret += 1 + dimensionTable[startingIndex + i];\n  }\n  return ret;\n}\n\nfunction sumPlusOne(a, b) {\n  return a + b + 1;\n}\n\nlet CHAR_NAMES = [\n  'top',\n  'top-mid',\n  'top-left',\n  'top-right',\n  'bottom',\n  'bottom-mid',\n  'bottom-left',\n  'bottom-right',\n  'left',\n  'left-mid',\n  'mid',\n  'mid-mid',\n  'right',\n  'right-mid',\n  'middle',\n];\nmodule.exports = Cell;\nmodule.exports.ColSpanCell = ColSpanCell;\nmodule.exports.RowSpanCell = RowSpanCell;\n"]}