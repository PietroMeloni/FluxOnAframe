{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/cli-table3/src/layout-manager.js"],"names":["objectAssign","require","Cell","ColSpanCell","RowSpanCell","layoutTable","table","forEach","row","rowIndex","cell","columnIndex","y","x","row2","xMax","length","cell2","cellsConflict","maxWidth","mw","Math","max","colSpan","maxHeight","cell1","yMin1","yMax1","rowSpan","yMin2","yMax2","yConflict","xMin1","xMax1","xMin2","xMax2","xConflict","conflictExists","rows","i_max","min","i","j","allBlank","xMin","addRowSpanCells","rowSpanCell","insertCell","addColSpanCells","cellRows","cellColumns","k","colSpanCell","splice","fillInTable","h_max","w_max","opts","y2","generateCells","map","Array","isArray","key","Object","keys","slice","unshift","makeTableLayout","module","exports","computeWidths","makeComputeWidths","computeHeights","desiredWidth","forcedMin","vals","result","spanners","push","val","index","span","col","existingWidth","editableCols","dif","round"],"mappings":"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","file":"layout-manager.js","sourcesContent":["const objectAssign = require('object-assign');\nconst Cell = require('./cell');\nconst { ColSpanCell, RowSpanCell } = Cell;\n\n(function() {\n  function layoutTable(table) {\n    table.forEach(function(row, rowIndex) {\n      row.forEach(function(cell, columnIndex) {\n        cell.y = rowIndex;\n        cell.x = columnIndex;\n        for (let y = rowIndex; y >= 0; y--) {\n          let row2 = table[y];\n          let xMax = y === rowIndex ? columnIndex : row2.length;\n          for (let x = 0; x < xMax; x++) {\n            let cell2 = row2[x];\n            while (cellsConflict(cell, cell2)) {\n              cell.x++;\n            }\n          }\n        }\n      });\n    });\n  }\n\n  function maxWidth(table) {\n    let mw = 0;\n    table.forEach(function(row) {\n      row.forEach(function(cell) {\n        mw = Math.max(mw, cell.x + (cell.colSpan || 1));\n      });\n    });\n    return mw;\n  }\n\n  function maxHeight(table) {\n    return table.length;\n  }\n\n  function cellsConflict(cell1, cell2) {\n    let yMin1 = cell1.y;\n    let yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);\n    let yMin2 = cell2.y;\n    let yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);\n    let yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);\n\n    let xMin1 = cell1.x;\n    let xMax1 = cell1.x - 1 + (cell1.colSpan || 1);\n    let xMin2 = cell2.x;\n    let xMax2 = cell2.x - 1 + (cell2.colSpan || 1);\n    let xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);\n\n    return yConflict && xConflict;\n  }\n\n  function conflictExists(rows, x, y) {\n    let i_max = Math.min(rows.length - 1, y);\n    let cell = { x: x, y: y };\n    for (let i = 0; i <= i_max; i++) {\n      let row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        if (cellsConflict(cell, row[j])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function allBlank(rows, y, xMin, xMax) {\n    for (let x = xMin; x < xMax; x++) {\n      if (conflictExists(rows, x, y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function addRowSpanCells(table) {\n    table.forEach(function(row, rowIndex) {\n      row.forEach(function(cell) {\n        for (let i = 1; i < cell.rowSpan; i++) {\n          let rowSpanCell = new RowSpanCell(cell);\n          rowSpanCell.x = cell.x;\n          rowSpanCell.y = cell.y + i;\n          rowSpanCell.colSpan = cell.colSpan;\n          insertCell(rowSpanCell, table[rowIndex + i]);\n        }\n      });\n    });\n  }\n\n  function addColSpanCells(cellRows) {\n    for (let rowIndex = cellRows.length - 1; rowIndex >= 0; rowIndex--) {\n      let cellColumns = cellRows[rowIndex];\n      for (let columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {\n        let cell = cellColumns[columnIndex];\n        for (let k = 1; k < cell.colSpan; k++) {\n          let colSpanCell = new ColSpanCell();\n          colSpanCell.x = cell.x + k;\n          colSpanCell.y = cell.y;\n          cellColumns.splice(columnIndex + 1, 0, colSpanCell);\n        }\n      }\n    }\n  }\n\n  function insertCell(cell, row) {\n    let x = 0;\n    while (x < row.length && row[x].x < cell.x) {\n      x++;\n    }\n    row.splice(x, 0, cell);\n  }\n\n  function fillInTable(table) {\n    let h_max = maxHeight(table);\n    let w_max = maxWidth(table);\n    for (let y = 0; y < h_max; y++) {\n      for (let x = 0; x < w_max; x++) {\n        if (!conflictExists(table, x, y)) {\n          let opts = { x: x, y: y, colSpan: 1, rowSpan: 1 };\n          x++;\n          while (x < w_max && !conflictExists(table, x, y)) {\n            opts.colSpan++;\n            x++;\n          }\n          let y2 = y + 1;\n          while (y2 < h_max && allBlank(table, y2, opts.x, opts.x + opts.colSpan)) {\n            opts.rowSpan++;\n            y2++;\n          }\n\n          let cell = new Cell(opts);\n          cell.x = opts.x;\n          cell.y = opts.y;\n          insertCell(cell, table[y]);\n        }\n      }\n    }\n  }\n\n  function generateCells(rows) {\n    return rows.map(function(row) {\n      if (!Array.isArray(row)) {\n        let key = Object.keys(row)[0];\n        row = row[key];\n        if (Array.isArray(row)) {\n          row = row.slice();\n          row.unshift(key);\n        } else {\n          row = [key, row];\n        }\n      }\n      return row.map(function(cell) {\n        return new Cell(cell);\n      });\n    });\n  }\n\n  function makeTableLayout(rows) {\n    let cellRows = generateCells(rows);\n    layoutTable(cellRows);\n    fillInTable(cellRows);\n    addRowSpanCells(cellRows);\n    addColSpanCells(cellRows);\n    return cellRows;\n  }\n\n  module.exports = {\n    makeTableLayout: makeTableLayout,\n    layoutTable: layoutTable,\n    addRowSpanCells: addRowSpanCells,\n    maxWidth: maxWidth,\n    fillInTable: fillInTable,\n    computeWidths: makeComputeWidths('colSpan', 'desiredWidth', 'x', 1),\n    computeHeights: makeComputeWidths('rowSpan', 'desiredHeight', 'y', 1),\n  };\n})();\n\nfunction makeComputeWidths(colSpan, desiredWidth, x, forcedMin) {\n  return function(vals, table) {\n    let result = [];\n    let spanners = [];\n    table.forEach(function(row) {\n      row.forEach(function(cell) {\n        if ((cell[colSpan] || 1) > 1) {\n          spanners.push(cell);\n        } else {\n          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);\n        }\n      });\n    });\n\n    vals.forEach(function(val, index) {\n      if (typeof val === 'number') {\n        result[index] = val;\n      }\n    });\n\n    //spanners.forEach(function(cell){\n    for (let k = spanners.length - 1; k >= 0; k--) {\n      let cell = spanners[k];\n      let span = cell[colSpan];\n      let col = cell[x];\n      let existingWidth = result[col];\n      let editableCols = typeof vals[col] === 'number' ? 0 : 1;\n      for (let i = 1; i < span; i++) {\n        existingWidth += 1 + result[col + i];\n        if (typeof vals[col + i] !== 'number') {\n          editableCols++;\n        }\n      }\n      if (cell[desiredWidth] > existingWidth) {\n        let i = 0;\n        while (editableCols > 0 && cell[desiredWidth] > existingWidth) {\n          if (typeof vals[col + i] !== 'number') {\n            let dif = Math.round((cell[desiredWidth] - existingWidth) / editableCols);\n            existingWidth += dif;\n            result[col + i] += dif;\n            editableCols--;\n          }\n          i++;\n        }\n      }\n    }\n\n    objectAssign(vals, result);\n    for (let j = 0; j < vals.length; j++) {\n      vals[j] = Math.max(forcedMin, vals[j] || 0);\n    }\n  };\n}\n"]}