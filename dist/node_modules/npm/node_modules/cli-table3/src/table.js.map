{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/cli-table3/src/table.js"],"names":["utils","require","tableLayout","Table","options","mergeOptions","array","headersPresent","head","length","push","apply","style","cells","makeTableLayout","forEach","row","cell","mergeTableOptions","computeWidths","colWidths","computeHeights","rowHeights","init","result","rowIndex","heightOfRow","compact","doDraw","lineNum","join","str","toString","split","Array","line","draw","module","exports"],"mappings":"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","file":"table.js","sourcesContent":["const utils = require('./utils');\nconst tableLayout = require('./layout-manager');\n\nclass Table extends Array {\n  constructor(options) {\n    super();\n\n    this.options = utils.mergeOptions(options);\n  }\n\n  toString() {\n    let array = this;\n    let headersPresent = this.options.head && this.options.head.length;\n    if (headersPresent) {\n      array = [this.options.head];\n      if (this.length) {\n        array.push.apply(array, this);\n      }\n    } else {\n      this.options.style.head = [];\n    }\n\n    let cells = tableLayout.makeTableLayout(array);\n\n    cells.forEach(function(row) {\n      row.forEach(function(cell) {\n        cell.mergeTableOptions(this.options, cells);\n      }, this);\n    }, this);\n\n    tableLayout.computeWidths(this.options.colWidths, cells);\n    tableLayout.computeHeights(this.options.rowHeights, cells);\n\n    cells.forEach(function(row) {\n      row.forEach(function(cell) {\n        cell.init(this.options);\n      }, this);\n    }, this);\n\n    let result = [];\n\n    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {\n      let row = cells[rowIndex];\n      let heightOfRow = this.options.rowHeights[rowIndex];\n\n      if (rowIndex === 0 || !this.options.style.compact || (rowIndex == 1 && headersPresent)) {\n        doDraw(row, 'top', result);\n      }\n\n      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {\n        doDraw(row, lineNum, result);\n      }\n\n      if (rowIndex + 1 == cells.length) {\n        doDraw(row, 'bottom', result);\n      }\n    }\n\n    return result.join('\\n');\n  }\n\n  get width() {\n    let str = this.toString().split('\\n');\n    return str[0].length;\n  }\n}\n\nfunction doDraw(row, lineNum, result) {\n  let line = [];\n  row.forEach(function(cell) {\n    line.push(cell.draw(lineNum));\n  });\n  let str = line.join('');\n  if (str.length) result.push(str);\n}\n\nmodule.exports = Table;\n"]}