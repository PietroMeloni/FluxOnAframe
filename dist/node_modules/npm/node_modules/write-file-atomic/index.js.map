{"version":3,"sources":["../../../../../node_modules/npm/node_modules/write-file-atomic/index.js"],"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","_cleanupOnExit","cleanupOnExit","fs","require","MurmurHash3","onExit","path","activeFiles","invocations","filename","__filename","hash","String","process","pid","result","tmpfile","unlinkSync","_","data","options","callback","Function","Promise","global","truename","fd","removeOnExit","absoluteName","resolve","serializeSameFile","push","length","then","getRealPath","realpath","realname","stat","mode","chown","err","stats","Object","assign","getuid","uid","gid","thenWriteFile","reject","open","_fd","write","Buffer","isBuffer","encoding","syncAndClose","fsync","close","chmod","rename","success","catch","fail","unlink","checkQueue","shift","realpathSync","ex","statSync","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync","e"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit\n\nvar fs = require('graceful-fs')\nvar MurmurHash3 = require('imurmurhash')\nvar onExit = require('signal-exit')\nvar path = require('path')\nvar activeFiles = {}\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction cleanupOnExit (tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)\n    } catch (_) {}\n  }\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = null\n  }\n  if (!options) options = {}\n\n  var Promise = options.Promise || global.Promise\n  var truename\n  var fd\n  var tmpfile\n  var removeOnExit = cleanupOnExit(() => tmpfile)\n  var absoluteName = path.resolve(filename)\n\n  new Promise(function serializeSameFile (resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = []\n\n    activeFiles[absoluteName].push(resolve) // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) resolve() // kick off the first one\n  }).then(function getRealPath () {\n    return new Promise(function (resolve) {\n      fs.realpath(filename, function (_, realname) {\n        truename = realname || filename\n        tmpfile = getTmpname(truename)\n        resolve()\n      })\n    })\n  }).then(function stat () {\n    return new Promise(function stat (resolve) {\n      if (options.mode && options.chown) resolve()\n      else {\n        // Either mode or chown is not explicitly set\n        // Default behavior is to copy it from original file\n        fs.stat(truename, function (err, stats) {\n          if (err || !stats) resolve()\n          else {\n            options = Object.assign({}, options)\n\n            if (!options.mode) {\n              options.mode = stats.mode\n            }\n            if (!options.chown && process.getuid) {\n              options.chown = { uid: stats.uid, gid: stats.gid }\n            }\n            resolve()\n          }\n        })\n      }\n    })\n  }).then(function thenWriteFile () {\n    return new Promise(function (resolve, reject) {\n      fs.open(tmpfile, 'w', options.mode, function (err, _fd) {\n        fd = _fd\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }).then(function write () {\n    return new Promise(function (resolve, reject) {\n      if (Buffer.isBuffer(data)) {\n        fs.write(fd, data, 0, data.length, 0, function (err) {\n          if (err) reject(err)\n          else resolve()\n        })\n      } else if (data != null) {\n        fs.write(fd, String(data), 0, String(options.encoding || 'utf8'), function (err) {\n          if (err) reject(err)\n          else resolve()\n        })\n      } else resolve()\n    })\n  }).then(function syncAndClose () {\n    if (options.fsync !== false) {\n      return new Promise(function (resolve, reject) {\n        fs.fsync(fd, function (err) {\n          if (err) reject(err)\n          else fs.close(fd, resolve)\n        })\n      })\n    }\n  }).then(function chown () {\n    if (options.chown) {\n      return new Promise(function (resolve, reject) {\n        fs.chown(tmpfile, options.chown.uid, options.chown.gid, function (err) {\n          if (err) reject(err)\n          else resolve()\n        })\n      })\n    }\n  }).then(function chmod () {\n    if (options.mode) {\n      return new Promise(function (resolve, reject) {\n        fs.chmod(tmpfile, options.mode, function (err) {\n          if (err) reject(err)\n          else resolve()\n        })\n      })\n    }\n  }).then(function rename () {\n    return new Promise(function (resolve, reject) {\n      fs.rename(tmpfile, truename, function (err) {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }).then(function success () {\n    removeOnExit()\n    callback()\n  }).catch(function fail (err) {\n    removeOnExit()\n    fs.unlink(tmpfile, function () {\n      callback(err)\n    })\n  }).then(function checkQueue () {\n    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0]() // start next job if one is pending\n    } else delete activeFiles[absoluteName]\n  })\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename)\n\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename)\n        options = Object.assign({}, options)\n        if (!options.mode) {\n          options.mode = stats.mode\n        }\n        if (!options.chown && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      } catch (ex) {\n        // ignore stat errors\n      }\n    }\n\n    var removeOnExit = onExit(cleanupOnExit(tmpfile))\n    var fd = fs.openSync(tmpfile, 'w', options.mode)\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n    fs.closeSync(fd)\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    if (options.mode) fs.chmodSync(tmpfile, options.mode)\n    fs.renameSync(tmpfile, filename)\n    removeOnExit()\n  } catch (err) {\n    removeOnExit()\n    try { fs.unlinkSync(tmpfile) } catch (e) {}\n    throw err\n  }\n}\n"]}