{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/lib/utils.js"],"names":["module","exports","bufferSplit","addRSAMissing","calculateDSAPublic","calculateED25519Public","calculateX25519Public","mpNormalize","mpDenormalize","ecNormalize","countZeros","assertCompatible","isCompatible","opensslKeyDeriv","opensshCipherInfo","publicFromPrivateECDSA","zeroPadToLength","writeBitString","readBitString","assert","require","Buffer","PrivateKey","Key","crypto","algs","asn1","ec","jsbn","nacl","MAX_CLASS_DEPTH","obj","klass","needVer","undefined","prototype","_sshpkApiVersion","proto","Object","getPrototypeOf","depth","constructor","name","ver","_oldVersionDetect","ok","object","strictEqual","CIPHER_LEN","key","iv","PKCS5_SALT_LEN","cipher","salt","passphrase","count","buffer","number","clen","slice","D","D_prev","bufs","material","alloc","length","push","concat","j","createHash","update","digest","buf","o","obit","mask","chr","string","parts","lastPart","matches","i","charCodeAt","newPart","addZero","Error","b","copy","der","tag","Ber","BitString","readString","toString","writeBuffer","len","equal","bigintToMpBuf","bigint","from","toByteArray","g","p","x","bigInt","BigInteger","e","y","modPow","ybuf","k","kp","sign","keyPair","fromSeed","Uint8Array","publicKey","box","d","part","data","dmodp","mod","subtract","dmodq","q","curveName","priv","params","curves","a","curve","ECCurveFp","G","decodePointHex","pub","multiply","encodePointHex","type","inf","keySize","blockSize","opensslName"],"mappings":"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","file":"utils.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tbufferSplit: bufferSplit,\n\taddRSAMissing: addRSAMissing,\n\tcalculateDSAPublic: calculateDSAPublic,\n\tcalculateED25519Public: calculateED25519Public,\n\tcalculateX25519Public: calculateX25519Public,\n\tmpNormalize: mpNormalize,\n\tmpDenormalize: mpDenormalize,\n\tecNormalize: ecNormalize,\n\tcountZeros: countZeros,\n\tassertCompatible: assertCompatible,\n\tisCompatible: isCompatible,\n\topensslKeyDeriv: opensslKeyDeriv,\n\topensshCipherInfo: opensshCipherInfo,\n\tpublicFromPrivateECDSA: publicFromPrivateECDSA,\n\tzeroPadToLength: zeroPadToLength,\n\twriteBitString: writeBitString,\n\treadBitString: readBitString\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar PrivateKey = require('./private-key');\nvar Key = require('./key');\nvar crypto = require('crypto');\nvar algs = require('./algs');\nvar asn1 = require('asn1');\n\nvar ec, jsbn;\nvar nacl;\n\nvar MAX_CLASS_DEPTH = 3;\n\nfunction isCompatible(obj, klass, needVer) {\n\tif (obj === null || typeof (obj) !== 'object')\n\t\treturn (false);\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn (true);\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tif (!proto || ++depth > MAX_CLASS_DEPTH)\n\t\t\treturn (false);\n\t}\n\tif (proto.constructor.name !== klass.name)\n\t\treturn (false);\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tif (ver[0] != needVer[0] || ver[1] < needVer[1])\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction assertCompatible(obj, klass, needVer, name) {\n\tif (name === undefined)\n\t\tname = 'object';\n\tassert.ok(obj, name + ' must not be null');\n\tassert.object(obj, name + ' must be an object');\n\tif (needVer === undefined)\n\t\tneedVer = klass.prototype._sshpkApiVersion;\n\tif (obj instanceof klass &&\n\t    klass.prototype._sshpkApiVersion[0] == needVer[0])\n\t\treturn;\n\tvar proto = Object.getPrototypeOf(obj);\n\tvar depth = 0;\n\twhile (proto.constructor.name !== klass.name) {\n\t\tproto = Object.getPrototypeOf(proto);\n\t\tassert.ok(proto && ++depth <= MAX_CLASS_DEPTH,\n\t\t    name + ' must be a ' + klass.name + ' instance');\n\t}\n\tassert.strictEqual(proto.constructor.name, klass.name,\n\t    name + ' must be a ' + klass.name + ' instance');\n\tvar ver = proto._sshpkApiVersion;\n\tif (ver === undefined)\n\t\tver = klass._oldVersionDetect(obj);\n\tassert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1],\n\t    name + ' must be compatible with ' + klass.name + ' klass ' +\n\t    'version ' + needVer[0] + '.' + needVer[1]);\n}\n\nvar CIPHER_LEN = {\n\t'des-ede3-cbc': { key: 7, iv: 8 },\n\t'aes-128-cbc': { key: 16, iv: 16 }\n};\nvar PKCS5_SALT_LEN = 8;\n\nfunction opensslKeyDeriv(cipher, salt, passphrase, count) {\n\tassert.buffer(salt, 'salt');\n\tassert.buffer(passphrase, 'passphrase');\n\tassert.number(count, 'iteration count');\n\n\tvar clen = CIPHER_LEN[cipher];\n\tassert.object(clen, 'supported cipher');\n\n\tsalt = salt.slice(0, PKCS5_SALT_LEN);\n\n\tvar D, D_prev, bufs;\n\tvar material = Buffer.alloc(0);\n\twhile (material.length < clen.key + clen.iv) {\n\t\tbufs = [];\n\t\tif (D_prev)\n\t\t\tbufs.push(D_prev);\n\t\tbufs.push(passphrase);\n\t\tbufs.push(salt);\n\t\tD = Buffer.concat(bufs);\n\t\tfor (var j = 0; j < count; ++j)\n\t\t\tD = crypto.createHash('md5').update(D).digest();\n\t\tmaterial = Buffer.concat([material, D]);\n\t\tD_prev = D;\n\t}\n\n\treturn ({\n\t    key: material.slice(0, clen.key),\n\t    iv: material.slice(clen.key, clen.key + clen.iv)\n\t});\n}\n\n/* Count leading zero bits on a buffer */\nfunction countZeros(buf) {\n\tvar o = 0, obit = 8;\n\twhile (o < buf.length) {\n\t\tvar mask = (1 << obit);\n\t\tif ((buf[o] & mask) === mask)\n\t\t\tbreak;\n\t\tobit--;\n\t\tif (obit < 0) {\n\t\t\to++;\n\t\t\tobit = 8;\n\t\t}\n\t}\n\treturn (o*8 + (8 - obit) - 1);\n}\n\nfunction bufferSplit(buf, chr) {\n\tassert.buffer(buf);\n\tassert.string(chr);\n\n\tvar parts = [];\n\tvar lastPart = 0;\n\tvar matches = 0;\n\tfor (var i = 0; i < buf.length; ++i) {\n\t\tif (buf[i] === chr.charCodeAt(matches))\n\t\t\t++matches;\n\t\telse if (buf[i] === chr.charCodeAt(0))\n\t\t\tmatches = 1;\n\t\telse\n\t\t\tmatches = 0;\n\n\t\tif (matches >= chr.length) {\n\t\t\tvar newPart = i + 1;\n\t\t\tparts.push(buf.slice(lastPart, newPart - matches));\n\t\t\tlastPart = newPart;\n\t\t\tmatches = 0;\n\t\t}\n\t}\n\tif (lastPart <= buf.length)\n\t\tparts.push(buf.slice(lastPart, buf.length));\n\n\treturn (parts);\n}\n\nfunction ecNormalize(buf, addZero) {\n\tassert.buffer(buf);\n\tif (buf[0] === 0x00 && buf[1] === 0x04) {\n\t\tif (addZero)\n\t\t\treturn (buf);\n\t\treturn (buf.slice(1));\n\t} else if (buf[0] === 0x04) {\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t} else {\n\t\twhile (buf[0] === 0x00)\n\t\t\tbuf = buf.slice(1);\n\t\tif (buf[0] === 0x02 || buf[0] === 0x03)\n\t\t\tthrow (new Error('Compressed elliptic curve points ' +\n\t\t\t    'are not supported'));\n\t\tif (buf[0] !== 0x04)\n\t\t\tthrow (new Error('Not a valid elliptic curve point'));\n\t\tif (!addZero)\n\t\t\treturn (buf);\n\t}\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x0;\n\tbuf.copy(b, 1);\n\treturn (b);\n}\n\nfunction readBitString(der, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar buf = der.readString(tag, true);\n\tassert.strictEqual(buf[0], 0x00, 'bit strings with unused bits are ' +\n\t    'not supported (0x' + buf[0].toString(16) + ')');\n\treturn (buf.slice(1));\n}\n\nfunction writeBitString(der, buf, tag) {\n\tif (tag === undefined)\n\t\ttag = asn1.Ber.BitString;\n\tvar b = Buffer.alloc(buf.length + 1);\n\tb[0] = 0x00;\n\tbuf.copy(b, 1);\n\tder.writeBuffer(b, tag);\n}\n\nfunction mpNormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)\n\t\tbuf = buf.slice(1);\n\tif ((buf[0] & 0x80) === 0x80) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction mpDenormalize(buf) {\n\tassert.buffer(buf);\n\twhile (buf.length > 1 && buf[0] === 0x00)\n\t\tbuf = buf.slice(1);\n\treturn (buf);\n}\n\nfunction zeroPadToLength(buf, len) {\n\tassert.buffer(buf);\n\tassert.number(len);\n\twhile (buf.length > len) {\n\t\tassert.equal(buf[0], 0x00);\n\t\tbuf = buf.slice(1);\n\t}\n\twhile (buf.length < len) {\n\t\tvar b = Buffer.alloc(buf.length + 1);\n\t\tb[0] = 0x00;\n\t\tbuf.copy(b, 1);\n\t\tbuf = b;\n\t}\n\treturn (buf);\n}\n\nfunction bigintToMpBuf(bigint) {\n\tvar buf = Buffer.from(bigint.toByteArray());\n\tbuf = mpNormalize(buf);\n\treturn (buf);\n}\n\nfunction calculateDSAPublic(g, p, x) {\n\tassert.buffer(g);\n\tassert.buffer(p);\n\tassert.buffer(x);\n\ttry {\n\t\tvar bigInt = require('jsbn').BigInteger;\n\t} catch (e) {\n\t\tthrow (new Error('To load a PKCS#8 format DSA private key, ' +\n\t\t    'the node jsbn library is required.'));\n\t}\n\tg = new bigInt(g);\n\tp = new bigInt(p);\n\tx = new bigInt(x);\n\tvar y = g.modPow(x, p);\n\tvar ybuf = bigintToMpBuf(y);\n\treturn (ybuf);\n}\n\nfunction calculateED25519Public(k) {\n\tassert.buffer(k);\n\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tvar kp = nacl.sign.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction calculateX25519Public(k) {\n\tassert.buffer(k);\n\n\tif (nacl === undefined)\n\t\tnacl = require('tweetnacl');\n\n\tvar kp = nacl.box.keyPair.fromSeed(new Uint8Array(k));\n\treturn (Buffer.from(kp.publicKey));\n}\n\nfunction addRSAMissing(key) {\n\tassert.object(key);\n\tassertCompatible(key, PrivateKey, [1, 1]);\n\ttry {\n\t\tvar bigInt = require('jsbn').BigInteger;\n\t} catch (e) {\n\t\tthrow (new Error('To write a PEM private key from ' +\n\t\t    'this source, the node jsbn lib is required.'));\n\t}\n\n\tvar d = new bigInt(key.part.d.data);\n\tvar buf;\n\n\tif (!key.part.dmodp) {\n\t\tvar p = new bigInt(key.part.p.data);\n\t\tvar dmodp = d.mod(p.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodp);\n\t\tkey.part.dmodp = {name: 'dmodp', data: buf};\n\t\tkey.parts.push(key.part.dmodp);\n\t}\n\tif (!key.part.dmodq) {\n\t\tvar q = new bigInt(key.part.q.data);\n\t\tvar dmodq = d.mod(q.subtract(1));\n\n\t\tbuf = bigintToMpBuf(dmodq);\n\t\tkey.part.dmodq = {name: 'dmodq', data: buf};\n\t\tkey.parts.push(key.part.dmodq);\n\t}\n}\n\nfunction publicFromPrivateECDSA(curveName, priv) {\n\tassert.string(curveName, 'curveName');\n\tassert.buffer(priv);\n\tif (ec === undefined)\n\t\tec = require('ecc-jsbn/lib/ec');\n\tif (jsbn === undefined)\n\t\tjsbn = require('jsbn').BigInteger;\n\tvar params = algs.curves[curveName];\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tvar d = new jsbn(mpNormalize(priv));\n\tvar pub = G.multiply(d);\n\tpub = Buffer.from(curve.encodePointHex(pub), 'hex');\n\n\tvar parts = [];\n\tparts.push({name: 'curve', data: Buffer.from(curveName)});\n\tparts.push({name: 'Q', data: pub});\n\n\tvar key = new Key({type: 'ecdsa', curve: curve, parts: parts});\n\treturn (key);\n}\n\nfunction opensshCipherInfo(cipher) {\n\tvar inf = {};\n\tswitch (cipher) {\n\tcase '3des-cbc':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'des-ede3-cbc';\n\t\tbreak;\n\tcase 'blowfish-cbc':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 8;\n\t\tinf.opensslName = 'bf-cbc';\n\t\tbreak;\n\tcase 'aes128-cbc':\n\tcase 'aes128-ctr':\n\tcase 'aes128-gcm@openssh.com':\n\t\tinf.keySize = 16;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-128-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes192-cbc':\n\tcase 'aes192-ctr':\n\tcase 'aes192-gcm@openssh.com':\n\t\tinf.keySize = 24;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-192-' + cipher.slice(7, 10);\n\t\tbreak;\n\tcase 'aes256-cbc':\n\tcase 'aes256-ctr':\n\tcase 'aes256-gcm@openssh.com':\n\t\tinf.keySize = 32;\n\t\tinf.blockSize = 16;\n\t\tinf.opensslName = 'aes-256-' + cipher.slice(7, 10);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'Unsupported openssl cipher \"' + cipher + '\"'));\n\t}\n\treturn (inf);\n}\n"]}