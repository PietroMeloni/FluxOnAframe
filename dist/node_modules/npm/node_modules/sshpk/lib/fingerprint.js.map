{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/lib/fingerprint.js"],"names":["module","exports","Fingerprint","assert","require","Buffer","algs","crypto","errs","Key","Certificate","utils","FingerprintFormatError","InvalidAlgorithmError","opts","object","string","type","buffer","hash","algorithm","toLowerCase","hashAlgs","prototype","toString","format","undefined","addColons","sshBase64Format","matches","other","assertCompatible","theirHash","theirHash2","createHash","update","digest","hash2","parse","fp","options","alg","enAlgs","Array","isArray","optionalObject","optionalArrayOfString","parts","split","length","base64RE","test","from","e","slice","join","md5RE","map","a","indexOf","s","replace","base64Strip","h","toUpperCase","isFingerprint","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect","func"],"mappings":"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","file":"fingerprint.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Fingerprint;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar Certificate = require('./certificate');\nvar utils = require('./utils');\n\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Fingerprint(opts) {\n\tassert.object(opts, 'options');\n\tassert.string(opts.type, 'options.type');\n\tassert.buffer(opts.hash, 'options.hash');\n\tassert.string(opts.algorithm, 'options.algorithm');\n\n\tthis.algorithm = opts.algorithm.toLowerCase();\n\tif (algs.hashAlgs[this.algorithm] !== true)\n\t\tthrow (new InvalidAlgorithmError(this.algorithm));\n\n\tthis.hash = opts.hash;\n\tthis.type = opts.type;\n}\n\nFingerprint.prototype.toString = function (format) {\n\tif (format === undefined) {\n\t\tif (this.algorithm === 'md5')\n\t\t\tformat = 'hex';\n\t\telse\n\t\t\tformat = 'base64';\n\t}\n\tassert.string(format);\n\n\tswitch (format) {\n\tcase 'hex':\n\t\treturn (addColons(this.hash.toString('hex')));\n\tcase 'base64':\n\t\treturn (sshBase64Format(this.algorithm,\n\t\t    this.hash.toString('base64')));\n\tdefault:\n\t\tthrow (new FingerprintFormatError(undefined, format));\n\t}\n};\n\nFingerprint.prototype.matches = function (other) {\n\tassert.object(other, 'key or certificate');\n\tif (this.type === 'key') {\n\t\tutils.assertCompatible(other, Key, [1, 0], 'key');\n\t} else {\n\t\tutils.assertCompatible(other, Certificate, [1, 0],\n\t\t    'certificate');\n\t}\n\n\tvar theirHash = other.hash(this.algorithm);\n\tvar theirHash2 = crypto.createHash(this.algorithm).\n\t    update(theirHash).digest('base64');\n\n\tif (this.hash2 === undefined)\n\t\tthis.hash2 = crypto.createHash(this.algorithm).\n\t\t    update(this.hash).digest('base64');\n\n\treturn (this.hash2 === theirHash2);\n};\n\nFingerprint.parse = function (fp, options) {\n\tassert.string(fp, 'fingerprint');\n\n\tvar alg, hash, enAlgs;\n\tif (Array.isArray(options)) {\n\t\tenAlgs = options;\n\t\toptions = {};\n\t}\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tif (options.enAlgs !== undefined)\n\t\tenAlgs = options.enAlgs;\n\tassert.optionalArrayOfString(enAlgs, 'algorithms');\n\n\tvar parts = fp.split(':');\n\tif (parts.length == 2) {\n\t\talg = parts[0].toLowerCase();\n\t\t/*JSSTYLED*/\n\t\tvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n\t\tif (!base64RE.test(parts[1]))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts[1], 'base64');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else if (parts.length > 2) {\n\t\talg = 'md5';\n\t\tif (parts[0].toLowerCase() === 'md5')\n\t\t\tparts = parts.slice(1);\n\t\tparts = parts.join('');\n\t\t/*JSSTYLED*/\n\t\tvar md5RE = /^[a-fA-F0-9]+$/;\n\t\tif (!md5RE.test(parts))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = Buffer.from(parts, 'hex');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t}\n\n\tif (alg === undefined)\n\t\tthrow (new FingerprintFormatError(fp));\n\n\tif (algs.hashAlgs[alg] === undefined)\n\t\tthrow (new InvalidAlgorithmError(alg));\n\n\tif (enAlgs !== undefined) {\n\t\tenAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });\n\t\tif (enAlgs.indexOf(alg) === -1)\n\t\t\tthrow (new InvalidAlgorithmError(alg));\n\t}\n\n\treturn (new Fingerprint({\n\t\talgorithm: alg,\n\t\thash: hash,\n\t\ttype: options.type || 'key'\n\t}));\n};\n\nfunction addColons(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/(.{2})(?=.)/g, '$1:'));\n}\n\nfunction base64Strip(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/=*$/, ''));\n}\n\nfunction sshBase64Format(alg, h) {\n\treturn (alg.toUpperCase() + ':' + base64Strip(h));\n}\n\nFingerprint.isFingerprint = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Fingerprint, ver));\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n */\nFingerprint.prototype._sshpkApiVersion = [1, 1];\n\nFingerprint._oldVersionDetect = function (obj) {\n\tassert.func(obj.toString);\n\tassert.func(obj.matches);\n\treturn ([1, 0]);\n};\n"]}