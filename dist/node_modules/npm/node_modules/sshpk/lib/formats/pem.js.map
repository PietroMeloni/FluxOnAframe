{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/pem.js"],"names":["module","exports","read","write","assert","require","asn1","crypto","Buffer","algs","utils","Key","PrivateKey","pkcs1","pkcs8","sshpriv","rfc4253","errors","buf","options","forceType","input","buffer","toString","lines","trim","split","m","match","ok","m2","length","equal","type","toLowerCase","alg","headers","slice","cipher","key","iv","parts","passphrase","from","isBuffer","KeyEncryptedError","filename","opensslKeyDeriv","join","cipherStream","createDecipheriv","chunk","chunks","once","e","indexOf","Error","end","push","concat","readSSHPrivate","readType","der","BerReader","originalInput","readSequence","strictEqual","readPkcs1","readPkcs8","object","header","BerWriter","isPrivateKey","writePkcs8","writePkcs1","isKey","tmp","len","alloc","o","i","limit"],"mappings":"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","file":"pem.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\nvar errors = require('../errors');\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, options, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split('\\n');\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\tvar cipher, key, iv;\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\t\toptions.passphrase = Buffer.from(\n\t\t\t\t    options.passphrase, 'utf-8');\n\t\t\t}\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t    options.filename, 'PEM'));\n\t\t\t} else {\n\t\t\t\tparts = headers['dek-info'].split(',');\n\t\t\t\tassert.ok(parts.length === 2);\n\t\t\t\tcipher = parts[0].toLowerCase();\n\t\t\t\tiv = Buffer.from(parts[1], 'hex');\n\t\t\t\tkey = utils.opensslKeyDeriv(cipher, iv,\n\t\t\t\t    options.passphrase, 1).key;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = Buffer.from(lines, 'base64');\n\n\tif (cipher && key && iv) {\n\t\tvar cipherStream = crypto.createDecipheriv(cipher, key, iv);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(buf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tbuf = Buffer.concat(chunks);\n\t}\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf, options));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf, options));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, options, type) {\n\tassert.object(key);\n\n\tvar alg = {\n\t    'ecdsa': 'EC',\n\t    'rsa': 'RSA',\n\t    'dsa': 'DSA',\n\t    'ed25519': 'EdDSA'\n\t}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}