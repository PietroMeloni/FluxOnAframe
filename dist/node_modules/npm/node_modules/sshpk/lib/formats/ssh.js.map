{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/ssh.js"],"names":["module","exports","read","write","assert","require","Buffer","rfc4253","utils","Key","PrivateKey","sshpriv","SSHKEY_RE","SSHKEY_RE2","buf","options","buffer","toString","trimmed","trim","replace","m","match","ok","type","algToKeyType","kbuf","from","key","ret","e","readInternal","strictEqual","length","comment","consumed","data","realOffset","Math","ceil","slice","padding","trailer","object","isKey","Error","parts","alg","keyTypeToAlg","push","join"],"mappings":"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","file":"ssh.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([ \\t]+([^ \\t][^\\n]*[\\n]*)?)?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t\\n]+([a-zA-Z0-9+\\/][a-zA-Z0-9+\\/ \\t\\n=]*)([^a-zA-Z0-9+\\/ \\t\\n=].*)?$/;\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = Buffer.from(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = Buffer.from(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + (m[3] ? m[3] : '');\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (Buffer.from(parts.join(' ')));\n}\n"]}