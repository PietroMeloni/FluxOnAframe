{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/x509-pem.js"],"names":["x509","require","module","exports","read","verify","sign","write","assert","asn1","Buffer","algs","utils","Key","PrivateKey","pem","Identity","Signature","Certificate","buf","options","buffer","toString","lines","trim","split","m","match","ok","m2","length","headers","slice","toLowerCase","join","from","cert","dbuf","header","tmp","len","alloc","o","i","limit"],"mappings":"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","file":"x509-pem.js","sourcesContent":["// Copyright 2016 Joyent, Inc.\n\nvar x509 = require('./x509');\n\nmodule.exports = {\n\tread: read,\n\tverify: x509.verify,\n\tsign: x509.sign,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split(/[\\r\\n]+/g);\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END CERTIFICATE[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = Buffer.from(lines, 'base64');\n\n\treturn (x509.read(buf, options));\n}\n\nfunction write(cert, options) {\n\tvar dbuf = x509.write(cert, options);\n\n\tvar header = 'CERTIFICATE';\n\tvar tmp = dbuf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}