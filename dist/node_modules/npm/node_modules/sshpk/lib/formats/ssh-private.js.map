{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/ssh-private.js"],"names":["module","exports","read","readSSHPrivate","write","assert","require","asn1","Buffer","algs","utils","crypto","Key","PrivateKey","pem","rfc4253","SSHBuffer","errors","bcrypt","buf","options","MAGIC","type","buffer","magic","readCString","strictEqual","cipher","readString","kdf","kdfOpts","readBuffer","nkeys","readInt","Error","pubKey","ok","atEnd","privKeyBlob","kdfOptsBuf","salt","rounds","cinf","opensshCipherInfo","undefined","passphrase","from","isBuffer","KeyEncryptedError","filename","pass","Uint8Array","salti","out","keySize","blockSize","res","pbkdf","length","ckey","slice","iv","cipherStream","createDecipheriv","opensslName","setAutoPadding","chunk","chunks","once","e","toString","indexOf","end","push","concat","checkInt1","checkInt2","ret","key","readInternal","remainder","skip","consumed","comment","isPrivateKey","toPublic","kdfopts","alloc","optionalString","privBuf","checkInt","randomBytes","readUInt32BE","writeInt","toBuffer","writeString","n","_offset","writeChar","kdfssh","writeBuffer","createCipheriv","writeCString","header","tmp","len","o","i","limit"],"mappings":"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","file":"ssh-private.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = Buffer.from(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = Buffer.alloc(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}