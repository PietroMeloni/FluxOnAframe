{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/rfc4253.js"],"names":["module","exports","read","bind","undefined","readType","write","readPartial","readInternal","keyTypeToAlg","algToKeyType","assert","require","Buffer","algs","utils","Key","PrivateKey","SSHBuffer","alg","string","match","Error","key","object","type","part","curve","data","toString","partial","buf","options","from","buffer","parts","sshbuf","readString","ok","atEnd","partCount","info","length","privInfo","push","readPart","Constructor","algInfo","strictEqual","res","exec","normalized","i","p","name","slice","normalize","nd","zeroPadToLength","mpNormalize","_rfc4253Cache","toBuffer","remainder","consumed","_offset","isPrivateKey","writeString","concat","A","writeBuffer"],"mappings":"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","file":"rfc4253.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf, options) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = Buffer.from(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = parts[i];\n\t\tp.name = algInfo.parts[i];\n\t\t/*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */\n\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\tp.data = p.data.slice(0, 32);\n\n\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\tvar nd;\n\t\t\tif (key.type === 'ed25519') {\n\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t} else {\n\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t}\n\t\t\tif (nd.toString('binary') !==\n\t\t\t    p.data.toString('binary')) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false) {\n\t\t\tif (key.type === 'ed25519')\n\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\telse\n\t\t\t\tdata = utils.mpNormalize(data);\n\t\t}\n\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n"]}