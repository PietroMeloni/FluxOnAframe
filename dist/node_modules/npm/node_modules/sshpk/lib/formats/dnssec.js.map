{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/dnssec.js"],"names":["module","exports","read","write","assert","require","Buffer","Key","PrivateKey","utils","SSHBuffer","Dhe","supportedAlgos","supportedAlgosById","Object","keys","forEach","k","toUpperCase","buf","options","buffer","toString","lines","split","match","algElems","algoNum","parseInt","algoName","Error","readDNSSECPrivateKey","slice","line","length","readRFC3110","keyString","elems","algorithm","base64key","join","keyBuffer","from","publicExponentLen","readUInt8","publicExponent","mpNormalize","modulus","rsaKey","type","parts","push","name","data","curve","size","ecdsaKey","ecNormalize","elementToBuf","e","readDNSSECRSAPrivateKey","elements","rsaParams","element","key","alg","d","publicKey","publicFromPrivateECDSA","Q","part","dnssecTimestamp","date","year","getFullYear","month","getMonth","timestampStr","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","rsaAlgFromOptions","opts","hashAlgo","writeRSA","dmodp","dmodq","addRSAMissing","out","n","mpDenormalize","p","q","iqmp","timestamp","Date","writeECDSA","base64Key","isPrivateKey","isKey"],"mappings":"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","file":"dnssec.js","sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar utils = require('../utils');\nvar SSHBuffer = require('../ssh-buffer');\nvar Dhe = require('../dhe');\n\nvar supportedAlgos = {\n\t'rsa-sha1' : 5,\n\t'rsa-sha256' : 8,\n\t'rsa-sha512' : 10,\n\t'ecdsa-p256-sha256' : 13,\n\t'ecdsa-p384-sha384' : 14\n\t/*\n\t * ed25519 is hypothetically supported with id 15\n\t * but the common tools available don't appear to be\n\t * capable of generating/using ed25519 keys\n\t */\n};\n\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function (k) {\n\tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tif (lines[0].match(/^Private-key-format\\: v1/)) {\n\t\tvar algElems = lines[1].split(' ');\n\t\tvar algoNum = parseInt(algElems[1], 10);\n\t\tvar algoName = algElems[2];\n\t\tif (!supportedAlgosById[algoNum])\n\t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n\t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n\t}\n\n\t// skip any comment-lines\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\t// we should now have *one single* line left with our KEY on it.\n\tif ((lines[line].match(/\\. IN KEY /) ||\n\t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n\t\treturn (readRFC3110(lines[line]));\n\t}\n\tthrow (new Error('Cannot parse dnssec key'));\n}\n\nfunction readRFC3110(keyString) {\n\tvar elems = keyString.split(' ');\n\t//unused var flags = parseInt(elems[3], 10);\n\t//unused var protocol = parseInt(elems[4], 10);\n\tvar algorithm = parseInt(elems[5], 10);\n\tif (!supportedAlgosById[algorithm])\n\t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n\tvar base64key = elems.slice(6, elems.length).join();\n\tvar keyBuffer = Buffer.from(base64key, 'base64');\n\tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n\t\t// join the rest of the body into a single base64-blob\n\t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n\t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n\t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n\t\t\t    'unsupported exponent length'));\n\n\t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n\t\tpublicExponent = utils.mpNormalize(publicExponent);\n\t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n\t\tmodulus = utils.mpNormalize(modulus);\n\t\t// now, make the key\n\t\tvar rsaKey = {\n\t\t\ttype: 'rsa',\n\t\t\tparts: []\n\t\t};\n\t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n\t\trsaKey.parts.push({ name: 'n', data: modulus});\n\t\treturn (new Key(rsaKey));\n\t}\n\tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n\t\t\t]\n\t\t};\n\t\treturn (new Key(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' +\n\t    supportedAlgosById[algorithm]));\n}\n\nfunction elementToBuf(e) {\n\treturn (Buffer.from(e.split(' ')[1], 'base64'));\n}\n\nfunction readDNSSECRSAPrivateKey(elements) {\n\tvar rsaParams = {};\n\telements.forEach(function (element) {\n\t\tif (element.split(' ')[0] === 'Modulus:')\n\t\t\trsaParams['n'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PublicExponent:')\n\t\t\trsaParams['e'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n\t\t\trsaParams['d'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime1:')\n\t\t\trsaParams['p'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime2:')\n\t\t\trsaParams['q'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent1:')\n\t\t\trsaParams['dmodp'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent2:')\n\t\t\trsaParams['dmodq'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Coefficient:')\n\t\t\trsaParams['iqmp'] = elementToBuf(element);\n\t});\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n\t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n\t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n\t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n\t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n\t\t\t{ name: 'dmodp',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n\t\t\t{ name: 'dmodq',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n\t\t\t{ name: 'iqmp',\n\t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n\t\t]\n\t};\n\treturn (new PrivateKey(key));\n}\n\nfunction readDNSSECPrivateKey(alg, elements) {\n\tif (supportedAlgosById[alg].match(/^RSA-/)) {\n\t\treturn (readDNSSECRSAPrivateKey(elements));\n\t}\n\tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\tvar d = Buffer.from(elements[0].split(' ')[1], 'base64');\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\t\t// DNSSEC generates the public-key on the fly (go calculate it)\n\t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n\t\tvar Q = publicKey.part['Q'].data;\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'd', data: d },\n\t\t\t\t{name: 'Q', data: Q }\n\t\t\t]\n\t\t};\n\t\treturn (new PrivateKey(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n}\n\nfunction dnssecTimestamp(date) {\n\tvar year = date.getFullYear() + ''; //stringify\n\tvar month = (date.getMonth() + 1);\n\tvar timestampStr = year + month + date.getUTCDate();\n\ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n\ttimestampStr += date.getUTCSeconds();\n\treturn (timestampStr);\n}\n\nfunction rsaAlgFromOptions(opts) {\n\tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n\t\treturn ('5 (RSASHA1)');\n\telse if (opts.hashAlgo === 'sha256')\n\t\treturn ('8 (RSASHA256)');\n\telse if (opts.hashAlgo === 'sha512')\n\t\treturn ('10 (RSASHA512)');\n\telse\n\t\tthrow (new Error('Unknown or unsupported hash: ' +\n\t\t    opts.hashAlgo));\n}\n\nfunction writeRSA(key, options) {\n\t// if we're missing parts, add them.\n\tif (!key.part.dmodp || !key.part.dmodq) {\n\t\tutils.addRSAMissing(key);\n\t}\n\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n\tvar n = utils.mpDenormalize(key.part['n'].data);\n\tout += 'Modulus: ' + n.toString('base64') + '\\n';\n\tvar e = utils.mpDenormalize(key.part['e'].data);\n\tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n\tvar d = utils.mpDenormalize(key.part['d'].data);\n\tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n\tvar p = utils.mpDenormalize(key.part['p'].data);\n\tout += 'Prime1: ' + p.toString('base64') + '\\n';\n\tvar q = utils.mpDenormalize(key.part['q'].data);\n\tout += 'Prime2: ' + q.toString('base64') + '\\n';\n\tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n\tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n\tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n\tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n\tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n\tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction writeECDSA(key, options) {\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\n\tif (key.curve === 'nistp256') {\n\t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n\t} else if (key.curve === 'nistp384') {\n\t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n\t} else {\n\t\tthrow (new Error('Unsupported curve'));\n\t}\n\tvar base64Key = key.part['d'].data.toString('base64');\n\tout += 'PrivateKey: ' + base64Key + '\\n';\n\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction write(key, options) {\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (key.type === 'rsa') {\n\t\t\treturn (writeRSA(key, options));\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\treturn (writeECDSA(key, options));\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n\t\t}\n\t} else if (Key.isKey(key)) {\n\t\t/*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */\n\t\tthrow (new Error('Format \"dnssec\" only supports ' +\n\t\t    'writing private keys'));\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n}\n"]}