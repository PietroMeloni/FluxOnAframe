{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/x509.js"],"names":["module","exports","read","verify","sign","signAsync","write","assert","require","asn1","Buffer","algs","utils","Key","PrivateKey","pem","Identity","Signature","Certificate","pkcs8","readMPInt","der","nm","strictEqual","peek","Ber","Integer","mpNormalize","readString","cert","key","sig","signatures","x509","object","algParts","algo","split","type","blob","cache","undefined","BerWriter","writeTBSCert","buffer","verifier","createVerify","signature","Local","i","Context","Constructor","SIGN_ALGS","Object","keys","forEach","k","EXTS","buf","options","from","BerReader","readSequence","Math","abs","length","remain","Error","tbsStart","offset","sigOffset","tbsEnd","version","readInt","ok","extras","serial","after","certAlgOid","readOID","certAlg","_offset","issuer","parseAsn1","validFrom","readDate","validUntil","subjects","subjectKey","readPkcs8","issuerUniqueID","slice","subjectUniqueID","extEnd","readExtension","sigAlgOid","sigAlg","sigData","BitString","parse","hashAlgorithm","UTCTime","utcTimeToDate","GeneralizedTime","gTimeToDate","ALTNAME","OtherName","RFC822Name","DNSName","X400Address","DirectoryName","EDIPartyName","URI","IPAddress","OID","EXTPURPOSE","EXTPURPOSE_REV","KEYUSEBITS","extId","id","exts","critical","Boolean","readBoolean","basicConstraints","OctetString","bcEnd","ca","purposes","push","bc","oid","pathLen","extKeyUsage","ekEnd","indexOf","ide","hostname","uid","email","components","value","keyUsage","bits","setBits","readBitField","bit","altName","aeEnd","forEmail","equals","host","forHost","data","UTCTIME_RE","t","m","match","d","Date","thisYear","getUTCFullYear","century","floor","year","parseInt","setUTCFullYear","setUTCHours","setUTCSeconds","GTIME_RE","zeroPad","n","s","dateToUTCTime","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","defaultHashAlgorithm","signer","createSign","done","err","startSequence","_ensure","copy","_buf","writeOID","writeNull","endSequence","toBuffer","alloc","writeBuffer","writeInt","toAsn1","writeString","subject","altNames","writePkcs8","writeBoolean","j","purpose","writeBitField","bitIndex","bitLen","byteN","mask","bitVal","name","blen","ceil","unused"],"mappings":"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","file":"x509.js","sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nvar pkcs8 = require('./pkcs8');\n\n/*\n * This file is based on RFC5280 (X.509).\n */\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction verify(cert, key) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar algParts = sig.algo.split('-');\n\tif (algParts[0] !== key.type)\n\t\treturn (false);\n\n\tvar blob = sig.cache;\n\tif (blob === undefined) {\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tblob = der.buffer;\n\t}\n\n\tvar verifier = key.createVerify(algParts[1]);\n\tverifier.write(blob);\n\treturn (verifier.verify(sig.signature));\n}\n\nfunction Local(i) {\n\treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n}\n\nfunction Context(i) {\n\treturn (asn1.Ber.Context | i);\n}\n\nvar SIGN_ALGS = {\n\t'rsa-md5': '1.2.840.113549.1.1.4',\n\t'rsa-sha1': '1.2.840.113549.1.1.5',\n\t'rsa-sha256': '1.2.840.113549.1.1.11',\n\t'rsa-sha384': '1.2.840.113549.1.1.12',\n\t'rsa-sha512': '1.2.840.113549.1.1.13',\n\t'dsa-sha1': '1.2.840.10040.4.3',\n\t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n\t'ecdsa-sha1': '1.2.840.10045.4.1',\n\t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n\t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n\t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n\t'ed25519-sha512': '1.3.101.112'\n};\nObject.keys(SIGN_ALGS).forEach(function (k) {\n\tSIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\nSIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\nvar EXTS = {\n\t'issuerKeyId': '2.5.29.35',\n\t'altName': '2.5.29.17',\n\t'basicConstraints': '2.5.29.19',\n\t'keyUsage': '2.5.29.15',\n\t'extKeyUsage': '2.5.29.37'\n};\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tbuf = Buffer.from(buf, 'binary');\n\t}\n\tassert.buffer(buf, 'buf');\n\n\tvar der = new asn1.BerReader(buf);\n\n\tder.readSequence();\n\tif (Math.abs(der.length - der.remain) > 1) {\n\t\tthrow (new Error('DER sequence does not contain whole byte ' +\n\t\t    'stream'));\n\t}\n\n\tvar tbsStart = der.offset;\n\tder.readSequence();\n\tvar sigOffset = der.offset + der.length;\n\tvar tbsEnd = sigOffset;\n\n\tif (der.peek() === Local(0)) {\n\t\tder.readSequence(Local(0));\n\t\tvar version = der.readInt();\n\t\tassert.ok(version <= 3,\n\t\t    'only x.509 versions up to v3 supported');\n\t}\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tvar sig = (cert.signatures.x509 = {});\n\tsig.extras = {};\n\n\tcert.serial = readMPInt(der, 'serial');\n\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar certAlgOid = der.readOID();\n\tvar certAlg = SIGN_ALGS[certAlgOid];\n\tif (certAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n\tder._offset = after;\n\tcert.issuer = Identity.parseAsn1(der);\n\n\tder.readSequence();\n\tcert.validFrom = readDate(der);\n\tcert.validUntil = readDate(der);\n\n\tcert.subjects = [Identity.parseAsn1(der)];\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n\tder._offset = after;\n\n\t/* issuerUniqueID */\n\tif (der.peek() === Local(1)) {\n\t\tder.readSequence(Local(1));\n\t\tsig.extras.issuerUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* subjectUniqueID */\n\tif (der.peek() === Local(2)) {\n\t\tder.readSequence(Local(2));\n\t\tsig.extras.subjectUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* extensions */\n\tif (der.peek() === Local(3)) {\n\t\tder.readSequence(Local(3));\n\t\tvar extEnd = der.offset + der.length;\n\t\tder.readSequence();\n\n\t\twhile (der.offset < extEnd)\n\t\t\treadExtension(cert, buf, der);\n\n\t\tassert.strictEqual(der.offset, extEnd);\n\t}\n\n\tassert.strictEqual(der.offset, sigOffset);\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tvar sigAlgOid = der.readOID();\n\tvar sigAlg = SIGN_ALGS[sigAlgOid];\n\tif (sigAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n\tder._offset = after;\n\n\tvar sigData = der.readString(asn1.Ber.BitString, true);\n\tif (sigData[0] === 0)\n\t\tsigData = sigData.slice(1);\n\tvar algParts = sigAlg.split('-');\n\n\tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n\tsig.signature.hashAlgorithm = algParts[1];\n\tsig.algo = sigAlg;\n\tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n\treturn (new Certificate(cert));\n}\n\nfunction readDate(der) {\n\tif (der.peek() === asn1.Ber.UTCTime) {\n\t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n\t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n\t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n\t} else {\n\t\tthrow (new Error('Unsupported date format'));\n\t}\n}\n\n/* RFC5280, section 4.2.1.6 (GeneralName type) */\nvar ALTNAME = {\n\tOtherName: Local(0),\n\tRFC822Name: Context(1),\n\tDNSName: Context(2),\n\tX400Address: Local(3),\n\tDirectoryName: Local(4),\n\tEDIPartyName: Local(5),\n\tURI: Context(6),\n\tIPAddress: Context(7),\n\tOID: Context(8)\n};\n\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */\nvar EXTPURPOSE = {\n\t'serverAuth': '1.3.6.1.5.5.7.3.1',\n\t'clientAuth': '1.3.6.1.5.5.7.3.2',\n\t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n\t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n\t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n\t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function (k) {\n\tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\n\nvar KEYUSEBITS = [\n\t'signature', 'identity', 'keyEncryption',\n\t'encryption', 'keyAgreement', 'ca', 'crl'\n];\n\nfunction readExtension(cert, buf, der) {\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar extId = der.readOID();\n\tvar id;\n\tvar sig = cert.signatures.x509;\n\tsig.extras.exts = [];\n\n\tvar critical;\n\tif (der.peek() === asn1.Ber.Boolean)\n\t\tcritical = der.readBoolean();\n\n\tswitch (extId) {\n\tcase (EXTS.basicConstraints):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar bcEnd = der.offset + der.length;\n\t\tvar ca = false;\n\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\tca = der.readBoolean();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tif (ca === true)\n\t\t\tcert.purposes.push('ca');\n\t\tvar bc = { oid: extId, critical: critical };\n\t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n\t\t\tbc.pathLen = der.readInt();\n\t\tsig.extras.exts.push(bc);\n\t\tbreak;\n\tcase (EXTS.extKeyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tvar ekEnd = der.offset + der.length;\n\t\twhile (der.offset < ekEnd) {\n\t\t\tvar oid = der.readOID();\n\t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n\t\t}\n\t\t/*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */\n\t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('clientAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'host') {\n\t\t\t\t\tide.type = 'host';\n\t\t\t\t\tide.hostname = ide.uid ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('serverAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'user') {\n\t\t\t\t\tide.type = 'user';\n\t\t\t\t\tide.uid = ide.hostname ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tcase (EXTS.keyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tvar bits = der.readString(asn1.Ber.BitString, true);\n\t\tvar setBits = readBitField(bits, KEYUSEBITS);\n\t\tsetBits.forEach(function (bit) {\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tif (cert.purposes.indexOf(bit) === -1)\n\t\t\t\tcert.purposes.push(bit);\n\t\t});\n\t\tsig.extras.exts.push({ oid: extId, critical: critical,\n\t\t    bits: bits });\n\t\tbreak;\n\tcase (EXTS.altName):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar aeEnd = der.offset + der.length;\n\t\twhile (der.offset < aeEnd) {\n\t\t\tswitch (der.peek()) {\n\t\t\tcase ALTNAME.OtherName:\n\t\t\tcase ALTNAME.EDIPartyName:\n\t\t\t\tder.readSequence();\n\t\t\t\tder._offset += der.length;\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.OID:\n\t\t\t\tder.readOID(ALTNAME.OID);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.RFC822Name:\n\t\t\t\t/* RFC822 specifies email addresses */\n\t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n\t\t\t\tid = Identity.forEmail(email);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DirectoryName:\n\t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n\t\t\t\tid = Identity.parseAsn1(der);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DNSName:\n\t\t\t\tvar host = der.readString(\n\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\tid = Identity.forHost(host);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tder.readString(der.peek());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tdefault:\n\t\tsig.extras.exts.push({\n\t\t\toid: extId,\n\t\t\tcritical: critical,\n\t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n\t\t});\n\t\tbreak;\n\t}\n\n\tder._offset = after;\n}\n\nvar UTCTIME_RE =\n    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n\tvar m = t.match(UTCTIME_RE);\n\tassert.ok(m, 'timestamps must be in UTC');\n\tvar d = new Date();\n\n\tvar thisYear = d.getUTCFullYear();\n\tvar century = Math.floor(thisYear / 100) * 100;\n\n\tvar year = parseInt(m[1], 10);\n\tif (thisYear % 100 < 50 && year >= 60)\n\t\tyear += (century - 1);\n\telse\n\t\tyear += century;\n\td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nvar GTIME_RE =\n    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n\tvar m = t.match(GTIME_RE);\n\tassert.ok(m);\n\tvar d = new Date();\n\n\td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n\t    parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nfunction zeroPad(n) {\n\tvar s = '' + n;\n\twhile (s.length < 2)\n\t\ts = '0' + s;\n\treturn (s);\n}\n\nfunction dateToUTCTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear() % 100);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n\tif (SIGN_ALGS[sig.algo] === undefined)\n\t\treturn (false);\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tvar signer = key.createSign();\n\tsigner.write(blob);\n\tcert.signatures.x509.signature = signer.sign();\n\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n\t\tif (SIGN_ALGS[sig.algo] === undefined) {\n\t\t\tdone(new Error('Invalid signing algorithm \"' +\n\t\t\t    sig.algo + '\"'));\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar der = new asn1.BerWriter();\n\tder.startSequence();\n\tif (sig.cache) {\n\t\tder._ensure(sig.cache.length);\n\t\tsig.cache.copy(der._buf, der._offset);\n\t\tder._offset += sig.cache.length;\n\t} else {\n\t\twriteTBSCert(cert, der);\n\t}\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tvar sigData = sig.signature.toBuffer('asn1');\n\tvar data = Buffer.alloc(sigData.length + 1);\n\tdata[0] = 0;\n\tsigData.copy(data, 1);\n\tder.writeBuffer(data, asn1.Ber.BitString);\n\tder.endSequence();\n\n\treturn (der.buffer);\n}\n\nfunction writeTBSCert(cert, der) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tder.startSequence();\n\n\tder.startSequence(Local(0));\n\tder.writeInt(2);\n\tder.endSequence();\n\n\tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tcert.issuer.toAsn1(der);\n\n\tder.startSequence();\n\tder.writeString(dateToUTCTime(cert.validFrom), asn1.Ber.UTCTime);\n\tder.writeString(dateToUTCTime(cert.validUntil), asn1.Ber.UTCTime);\n\tder.endSequence();\n\n\tvar subject = cert.subjects[0];\n\tvar altNames = cert.subjects.slice(1);\n\tsubject.toAsn1(der);\n\n\tpkcs8.writePkcs8(der, cert.subjectKey);\n\n\tif (sig.extras && sig.extras.issuerUniqueID) {\n\t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n\t}\n\n\tif (sig.extras && sig.extras.subjectUniqueID) {\n\t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n\t}\n\n\tif (altNames.length > 0 || subject.type === 'host' ||\n\t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n\t    (sig.extras && sig.extras.exts)) {\n\t\tder.startSequence(Local(3));\n\t\tder.startSequence();\n\n\t\tvar exts = [];\n\t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n\t\t\texts.push({\n\t\t\t\toid: EXTS.basicConstraints,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.keyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.extKeyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t}\n\t\texts.push({ oid: EXTS.altName });\n\t\tif (sig.extras && sig.extras.exts)\n\t\t\texts = sig.extras.exts;\n\n\t\tfor (var i = 0; i < exts.length; ++i) {\n\t\t\tder.startSequence();\n\t\t\tder.writeOID(exts[i].oid);\n\n\t\t\tif (exts[i].critical !== undefined)\n\t\t\t\tder.writeBoolean(exts[i].critical);\n\n\t\t\tif (exts[i].oid === EXTS.altName) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tif (subject.type === 'host') {\n\t\t\t\t\tder.writeString(subject.hostname,\n\t\t\t\t\t    Context(2));\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n\t\t\t\t\tif (altNames[j].type === 'host') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].hostname,\n\t\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\t} else if (altNames[j].type ===\n\t\t\t\t\t    'email') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].email,\n\t\t\t\t\t\t    ALTNAME.RFC822Name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tder.startSequence(\n\t\t\t\t\t\t    ALTNAME.DirectoryName);\n\t\t\t\t\t\taltNames[j].toAsn1(der);\n\t\t\t\t\t\tder.endSequence();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n\t\t\t\tvar pathLen = exts[i].pathLen;\n\t\t\t\tder.writeBoolean(ca);\n\t\t\t\tif (pathLen !== undefined)\n\t\t\t\t\tder.writeInt(pathLen);\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tcert.purposes.forEach(function (purpose) {\n\t\t\t\t\tif (purpose === 'ca')\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar oid = purpose;\n\t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n\t\t\t\t\t\toid = EXTPURPOSE[purpose];\n\t\t\t\t\tder.writeOID(oid);\n\t\t\t\t});\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t/*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */\n\t\t\t\tif (exts[i].bits !== undefined) {\n\t\t\t\t\tder.writeBuffer(exts[i].bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t} else {\n\t\t\t\t\tvar bits = writeBitField(cert.purposes,\n\t\t\t\t\t    KEYUSEBITS);\n\t\t\t\t\tder.writeBuffer(bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t} else {\n\t\t\t\tder.writeBuffer(exts[i].data,\n\t\t\t\t    asn1.Ber.OctetString);\n\t\t\t}\n\n\t\t\tder.endSequence();\n\t\t}\n\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t}\n\n\tder.endSequence();\n}\n\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */\nfunction readBitField(bits, bitIndex) {\n\tvar bitLen = 8 * (bits.length - 1) - bits[0];\n\tvar setBits = {};\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n\t\tvar name = bitIndex[i];\n\t\tif (bitVal && typeof (name) === 'string') {\n\t\t\tsetBits[name] = true;\n\t\t}\n\t}\n\treturn (Object.keys(setBits));\n}\n\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */\nfunction writeBitField(setBits, bitIndex) {\n\tvar bitLen = bitIndex.length;\n\tvar blen = Math.ceil(bitLen / 8);\n\tvar unused = blen * 8 - bitLen;\n\tvar bits = Buffer.alloc(1 + blen); // zero-filled\n\tbits[0] = unused;\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar name = bitIndex[i];\n\t\tif (name === undefined)\n\t\t\tcontinue;\n\t\tvar bitVal = (setBits.indexOf(name) !== -1);\n\t\tif (bitVal) {\n\t\t\tbits[byteN] |= mask;\n\t\t}\n\t}\n\treturn (bits);\n}\n"]}