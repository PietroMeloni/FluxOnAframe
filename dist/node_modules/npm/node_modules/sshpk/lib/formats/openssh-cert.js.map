{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/sshpk/lib/formats/openssh-cert.js"],"names":["module","exports","read","verify","sign","signAsync","write","fromBuffer","toBuffer","assert","require","SSHBuffer","crypto","Buffer","algs","Key","PrivateKey","Identity","rfc4253","Signature","utils","Certificate","cert","key","TYPES","Object","keys","forEach","k","ECDSA_ALGO","buf","options","isBuffer","toString","parts","trim","split","length","Error","algo","data","from","partial","sshbuf","buffer","innerAlgo","readString","undefined","signatures","openssh","nonce","readBuffer","type","getAlg","partCount","info","push","readPart","ok","algInfo","res","exec","strictEqual","i","name","normalize","p","mpNormalize","subjectKey","serial","readInt64","readInt","string","keyId","principals","pbuf","psshbuf","atEnd","subjects","map","pr","forUser","forHost","validFrom","int64ToDate","validUntil","critical","exts","signingKeyBuf","issuerKey","issuer","sigBuf","signature","parse","remainder","consumed","_offset","readUInt32BE","d","Date","setTime","sourceInt64","dateToInt64","date","Math","round","getTime","upper","floor","lower","alloc","writeUInt32BE","blob","e","sig","hashAlgo","signer","createSign","done","err","out","getCertType","comment","noSig","object","randomBytes","writeString","writeBuffer","part","writePart","writeInt64","notStrictEqual","id","writeInt","uid","hostname","sub","host","user","certType","match","curve"],"mappings":";;AAAA;;AAEAA,OAAOC,OAAP,GAAiB;AAChBC,OAAMA,IADU;AAEhBC,SAAQA,MAFQ;AAGhBC,OAAMA,IAHU;AAIhBC,YAAWA,SAJK;AAKhBC,QAAOA,KALS;;AAOhB;AACAC,aAAYA,UARI;AAShBC,WAAUA;AATM,CAAjB;;AAYA,IAAIC,SAASC,QAAQ,aAAR,CAAb;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,SAASH,QAAQ,cAAR,EAAwBG,MAArC;AACA,IAAIC,OAAOJ,QAAQ,SAAR,CAAX;AACA,IAAIK,MAAML,QAAQ,QAAR,CAAV;AACA,IAAIM,aAAaN,QAAQ,gBAAR,CAAjB;AACA,IAAIO,WAAWP,QAAQ,aAAR,CAAf;AACA,IAAIQ,UAAUR,QAAQ,WAAR,CAAd;AACA,IAAIS,YAAYT,QAAQ,cAAR,CAAhB;AACA,IAAIU,QAAQV,QAAQ,UAAR,CAAZ;AACA,IAAIW,cAAcX,QAAQ,gBAAR,CAAlB;;AAEA,SAASP,MAAT,CAAgBmB,IAAhB,EAAsBC,GAAtB,EAA2B;AAC1B;;;;AAIA,QAAQ,KAAR;AACA;;AAED,IAAIC,QAAQ;AACX,SAAQ,CADG;AAEX,SAAQ;AAFG,CAAZ;AAIAC,OAAOC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,CAAV,EAAa;AAAEJ,OAAMA,MAAMI,CAAN,CAAN,IAAkBA,CAAlB;AAAsB,CAAhE;;AAEA,IAAIC,aAAa,4CAAjB;;AAEA,SAAS3B,IAAT,CAAc4B,GAAd,EAAmBC,OAAnB,EAA4B;AAC3B,KAAIlB,OAAOmB,QAAP,CAAgBF,GAAhB,CAAJ,EACCA,MAAMA,IAAIG,QAAJ,CAAa,OAAb,CAAN;AACD,KAAIC,QAAQJ,IAAIK,IAAJ,GAAWC,KAAX,CAAiB,WAAjB,CAAZ;AACA,KAAIF,MAAMG,MAAN,GAAe,CAAf,IAAoBH,MAAMG,MAAN,GAAe,CAAvC,EACC,MAAO,IAAIC,KAAJ,CAAU,kCAAV,CAAP;;AAED,KAAIC,OAAOL,MAAM,CAAN,CAAX;AACA,KAAIM,OAAON,MAAM,CAAN,CAAX;;AAEAM,QAAO3B,OAAO4B,IAAP,CAAYD,IAAZ,EAAkB,QAAlB,CAAP;AACA,QAAQjC,WAAWiC,IAAX,EAAiBD,IAAjB,CAAR;AACA;;AAED,SAAShC,UAAT,CAAoBiC,IAApB,EAA0BD,IAA1B,EAAgCG,OAAhC,EAAyC;AACxC,KAAIC,SAAS,IAAIhC,SAAJ,CAAc,EAAEiC,QAAQJ,IAAV,EAAd,CAAb;AACA,KAAIK,YAAYF,OAAOG,UAAP,EAAhB;AACA,KAAIP,SAASQ,SAAT,IAAsBF,cAAcN,IAAxC,EACC,MAAO,IAAID,KAAJ,CAAU,oCAAV,CAAP;AACD,KAAIC,SAASQ,SAAb,EACCR,OAAOM,SAAP;;AAED,KAAIvB,OAAO,EAAX;AACAA,MAAK0B,UAAL,GAAkB,EAAlB;AACA1B,MAAK0B,UAAL,CAAgBC,OAAhB,GAA0B,EAA1B;;AAEA3B,MAAK0B,UAAL,CAAgBC,OAAhB,CAAwBC,KAAxB,GAAgCP,OAAOQ,UAAP,EAAhC;;AAEA,KAAI5B,MAAM,EAAV;AACA,KAAIW,QAASX,IAAIW,KAAJ,GAAY,EAAzB;AACAX,KAAI6B,IAAJ,GAAWC,OAAOd,IAAP,CAAX;;AAEA,KAAIe,YAAYxC,KAAKyC,IAAL,CAAUhC,IAAI6B,IAAd,EAAoBlB,KAApB,CAA0BG,MAA1C;AACA,QAAOH,MAAMG,MAAN,GAAeiB,SAAtB;AACCpB,QAAMsB,IAAN,CAAWb,OAAOc,QAAP,EAAX;AADD,EAEAhD,OAAOiD,EAAP,CAAUxB,MAAMG,MAAN,IAAgB,CAA1B,EAA6B,iCAA7B;;AAEA,KAAIsB,UAAU7C,KAAKyC,IAAL,CAAUhC,IAAI6B,IAAd,CAAd;AACA,KAAI7B,IAAI6B,IAAJ,KAAa,OAAjB,EAA0B;AACzB,MAAIQ,MAAM/B,WAAWgC,IAAX,CAAgBtB,IAAhB,CAAV;AACA9B,SAAOiD,EAAP,CAAUE,QAAQ,IAAlB;AACAnD,SAAOqD,WAAP,CAAmBF,IAAI,CAAJ,CAAnB,EAA2B1B,MAAM,CAAN,EAASM,IAAT,CAAcP,QAAd,EAA3B;AACA;;AAED,MAAK,IAAI8B,IAAI,CAAb,EAAgBA,IAAIJ,QAAQzB,KAAR,CAAcG,MAAlC,EAA0C,EAAE0B,CAA5C,EAA+C;AAC9C7B,QAAM6B,CAAN,EAASC,IAAT,GAAgBL,QAAQzB,KAAR,CAAc6B,CAAd,CAAhB;AACA,MAAI7B,MAAM6B,CAAN,EAASC,IAAT,KAAkB,OAAlB,IACAL,QAAQM,SAAR,KAAsB,KAD1B,EACiC;AAChC,OAAIC,IAAIhC,MAAM6B,CAAN,CAAR;AACAG,KAAE1B,IAAF,GAASpB,MAAM+C,WAAN,CAAkBD,EAAE1B,IAApB,CAAT;AACA;AACD;;AAEDlB,MAAK8C,UAAL,GAAkB,IAAIrD,GAAJ,CAAQQ,GAAR,CAAlB;;AAEAD,MAAK+C,MAAL,GAAc1B,OAAO2B,SAAP,EAAd;;AAEA,KAAIlB,OAAO5B,MAAMmB,OAAO4B,OAAP,EAAN,CAAX;AACA9D,QAAO+D,MAAP,CAAcpB,IAAd,EAAoB,iBAApB;;AAEA9B,MAAK0B,UAAL,CAAgBC,OAAhB,CAAwBwB,KAAxB,GAAgC9B,OAAOG,UAAP,EAAhC;;AAEA,KAAI4B,aAAa,EAAjB;AACA,KAAIC,OAAOhC,OAAOQ,UAAP,EAAX;AACA,KAAIyB,UAAU,IAAIjE,SAAJ,CAAc,EAAEiC,QAAQ+B,IAAV,EAAd,CAAd;AACA,QAAO,CAACC,QAAQC,KAAR,EAAR;AACCH,aAAWlB,IAAX,CAAgBoB,QAAQ9B,UAAR,EAAhB;AADD,EAEA,IAAI4B,WAAWrC,MAAX,KAAsB,CAA1B,EACCqC,aAAa,CAAC,GAAD,CAAb;;AAEDpD,MAAKwD,QAAL,GAAgBJ,WAAWK,GAAX,CAAe,UAAUC,EAAV,EAAc;AAC5C,MAAI5B,SAAS,MAAb,EACC,OAAQnC,SAASgE,OAAT,CAAiBD,EAAjB,CAAR,CADD,KAEK,IAAI5B,SAAS,MAAb,EACJ,OAAQnC,SAASiE,OAAT,CAAiBF,EAAjB,CAAR;AACD,QAAO,IAAI1C,KAAJ,CAAU,2BAA2Bc,IAArC,CAAP;AACA,EANe,CAAhB;;AAQA9B,MAAK6D,SAAL,GAAiBC,YAAYzC,OAAO2B,SAAP,EAAZ,CAAjB;AACAhD,MAAK+D,UAAL,GAAkBD,YAAYzC,OAAO2B,SAAP,EAAZ,CAAlB;;AAEAhD,MAAK0B,UAAL,CAAgBC,OAAhB,CAAwBqC,QAAxB,GAAmC3C,OAAOQ,UAAP,EAAnC;AACA7B,MAAK0B,UAAL,CAAgBC,OAAhB,CAAwBsC,IAAxB,GAA+B5C,OAAOQ,UAAP,EAA/B;;AAEA;AACAR,QAAOQ,UAAP;;AAEA,KAAIqC,gBAAgB7C,OAAOQ,UAAP,EAApB;AACA7B,MAAKmE,SAAL,GAAiBvE,QAAQhB,IAAR,CAAasF,aAAb,CAAjB;;AAEA;;;;;AAKAlE,MAAKoE,MAAL,GAAczE,SAASiE,OAAT,CAAiB,IAAjB,CAAd;;AAEA,KAAIS,SAAShD,OAAOQ,UAAP,EAAb;AACA7B,MAAK0B,UAAL,CAAgBC,OAAhB,CAAwB2C,SAAxB,GACIzE,UAAU0E,KAAV,CAAgBF,MAAhB,EAAwBrE,KAAKmE,SAAL,CAAerC,IAAvC,EAA6C,KAA7C,CADJ;;AAGA,KAAIV,YAAYK,SAAhB,EAA2B;AAC1BL,UAAQoD,SAAR,GAAoBnD,OAAOmD,SAAP,EAApB;AACApD,UAAQqD,QAAR,GAAmBpD,OAAOqD,OAA1B;AACA;;AAED,QAAQ,IAAI3E,WAAJ,CAAgBC,IAAhB,CAAR;AACA;;AAED,SAAS8D,WAAT,CAAqBtD,GAArB,EAA0B;AACzB,KAAIiC,IAAIjC,IAAImE,YAAJ,CAAiB,CAAjB,IAAsB,UAA9B;AACAlC,MAAKjC,IAAImE,YAAJ,CAAiB,CAAjB,CAAL;AACA,KAAIC,IAAI,IAAIC,IAAJ,EAAR;AACAD,GAAEE,OAAF,CAAUrC,IAAI,IAAd;AACAmC,GAAEG,WAAF,GAAgBvE,GAAhB;AACA,QAAQoE,CAAR;AACA;;AAED,SAASI,WAAT,CAAqBC,IAArB,EAA2B;AAC1B,KAAIA,KAAKF,WAAL,KAAqBtD,SAAzB,EACC,OAAQwD,KAAKF,WAAb;AACD,KAAItC,IAAIyC,KAAKC,KAAL,CAAWF,KAAKG,OAAL,KAAiB,IAA5B,CAAR;AACA,KAAIC,QAAQH,KAAKI,KAAL,CAAW7C,IAAI,UAAf,CAAZ;AACA,KAAI8C,QAAQL,KAAKI,KAAL,CAAW7C,IAAI,UAAf,CAAZ;AACA,KAAIjC,MAAMjB,OAAOiG,KAAP,CAAa,CAAb,CAAV;AACAhF,KAAIiF,aAAJ,CAAkBJ,KAAlB,EAAyB,CAAzB;AACA7E,KAAIiF,aAAJ,CAAkBF,KAAlB,EAAyB,CAAzB;AACA,QAAQ/E,GAAR;AACA;;AAED,SAAS1B,IAAT,CAAckB,IAAd,EAAoBC,GAApB,EAAyB;AACxB,KAAID,KAAK0B,UAAL,CAAgBC,OAAhB,KAA4BF,SAAhC,EACCzB,KAAK0B,UAAL,CAAgBC,OAAhB,GAA0B,EAA1B;AACD,KAAI;AACH,MAAI+D,OAAOxG,SAASc,IAAT,EAAe,IAAf,CAAX;AACA,EAFD,CAEE,OAAO2F,CAAP,EAAU;AACX,SAAQ3F,KAAK0B,UAAL,CAAgBC,OAAxB;AACA,SAAQ,KAAR;AACA;AACD,KAAIiE,MAAM5F,KAAK0B,UAAL,CAAgBC,OAA1B;AACA,KAAIkE,WAAWpE,SAAf;AACA,KAAIxB,IAAI6B,IAAJ,KAAa,KAAb,IAAsB7B,IAAI6B,IAAJ,KAAa,KAAvC,EACC+D,WAAW,MAAX;AACD,KAAIC,SAAS7F,IAAI8F,UAAJ,CAAeF,QAAf,CAAb;AACAC,QAAO9G,KAAP,CAAa0G,IAAb;AACAE,KAAItB,SAAJ,GAAgBwB,OAAOhH,IAAP,EAAhB;AACA,QAAQ,IAAR;AACA;;AAED,SAASC,SAAT,CAAmBiB,IAAnB,EAAyB8F,MAAzB,EAAiCE,IAAjC,EAAuC;AACtC,KAAIhG,KAAK0B,UAAL,CAAgBC,OAAhB,KAA4BF,SAAhC,EACCzB,KAAK0B,UAAL,CAAgBC,OAAhB,GAA0B,EAA1B;AACD,KAAI;AACH,MAAI+D,OAAOxG,SAASc,IAAT,EAAe,IAAf,CAAX;AACA,EAFD,CAEE,OAAO2F,CAAP,EAAU;AACX,SAAQ3F,KAAK0B,UAAL,CAAgBC,OAAxB;AACAqE,OAAKL,CAAL;AACA;AACA;AACD,KAAIC,MAAM5F,KAAK0B,UAAL,CAAgBC,OAA1B;;AAEAmE,QAAOJ,IAAP,EAAa,UAAUO,GAAV,EAAe3B,SAAf,EAA0B;AACtC,MAAI2B,GAAJ,EAAS;AACRD,QAAKC,GAAL;AACA;AACA;AACD,MAAI;AACH;;;;AAIA3B,aAAUpF,QAAV,CAAmB,KAAnB;AACA,GAND,CAME,OAAOyG,CAAP,EAAU;AACXK,QAAKL,CAAL;AACA;AACA;AACDC,MAAItB,SAAJ,GAAgBA,SAAhB;AACA0B;AACA,EAjBD;AAkBA;;AAED,SAAShH,KAAT,CAAegB,IAAf,EAAqBS,OAArB,EAA8B;AAC7B,KAAIA,YAAYgB,SAAhB,EACChB,UAAU,EAAV;;AAED,KAAIiF,OAAOxG,SAASc,IAAT,CAAX;AACA,KAAIkG,MAAMC,YAAYnG,KAAK8C,UAAjB,IAA+B,GAA/B,GAAqC4C,KAAK/E,QAAL,CAAc,QAAd,CAA/C;AACA,KAAIF,QAAQ2F,OAAZ,EACCF,MAAMA,MAAM,GAAN,GAAYzF,QAAQ2F,OAA1B;AACD,QAAQF,GAAR;AACA;;AAGD,SAAShH,QAAT,CAAkBc,IAAlB,EAAwBqG,KAAxB,EAA+B;AAC9BlH,QAAOmH,MAAP,CAActG,KAAK0B,UAAL,CAAgBC,OAA9B,EAAuC,8BAAvC;AACA,KAAIiE,MAAM5F,KAAK0B,UAAL,CAAgBC,OAA1B;;AAEA,KAAIiE,IAAIhE,KAAJ,KAAcH,SAAlB,EACCmE,IAAIhE,KAAJ,GAAYtC,OAAOiH,WAAP,CAAmB,EAAnB,CAAZ;AACD,KAAI/F,MAAM,IAAInB,SAAJ,CAAc,EAAd,CAAV;AACAmB,KAAIgG,WAAJ,CAAgBL,YAAYnG,KAAK8C,UAAjB,CAAhB;AACAtC,KAAIiG,WAAJ,CAAgBb,IAAIhE,KAApB;;AAEA,KAAI3B,MAAMD,KAAK8C,UAAf;AACA,KAAIT,UAAU7C,KAAKyC,IAAL,CAAUhC,IAAI6B,IAAd,CAAd;AACAO,SAAQzB,KAAR,CAAcP,OAAd,CAAsB,UAAUqG,IAAV,EAAgB;AACrClG,MAAImG,SAAJ,CAAc1G,IAAIyG,IAAJ,CAASA,IAAT,CAAd;AACA,EAFD;;AAIAlG,KAAIoG,UAAJ,CAAe5G,KAAK+C,MAApB;;AAEA,KAAIjB,OAAO9B,KAAKwD,QAAL,CAAc,CAAd,EAAiB1B,IAA5B;AACA3C,QAAO0H,cAAP,CAAsB/E,IAAtB,EAA4B,SAA5B;AACA9B,MAAKwD,QAAL,CAAcnD,OAAd,CAAsB,UAAUyG,EAAV,EAAc;AACnC3H,SAAOqD,WAAP,CAAmBsE,GAAGhF,IAAtB,EAA4BA,IAA5B;AACA,EAFD;AAGAA,QAAO5B,MAAM4B,IAAN,CAAP;AACAtB,KAAIuG,QAAJ,CAAajF,IAAb;;AAEA,KAAI8D,IAAIzC,KAAJ,KAAc1B,SAAlB,EAA6B;AAC5BmE,MAAIzC,KAAJ,GAAYnD,KAAKwD,QAAL,CAAc,CAAd,EAAiB1B,IAAjB,GAAwB,GAAxB,IACP9B,KAAKwD,QAAL,CAAc,CAAd,EAAiBwD,GAAjB,IAAwBhH,KAAKwD,QAAL,CAAc,CAAd,EAAiByD,QADlC,CAAZ;AAEA;AACDzG,KAAIgG,WAAJ,CAAgBZ,IAAIzC,KAApB;;AAEA,KAAI+D,MAAM,IAAI7H,SAAJ,CAAc,EAAd,CAAV;AACAW,MAAKwD,QAAL,CAAcnD,OAAd,CAAsB,UAAUyG,EAAV,EAAc;AACnC,MAAIhF,SAAS5B,MAAMiH,IAAnB,EACCD,IAAIV,WAAJ,CAAgBM,GAAGG,QAAnB,EADD,KAEK,IAAInF,SAAS5B,MAAMkH,IAAnB,EACJF,IAAIV,WAAJ,CAAgBM,GAAGE,GAAnB;AACD,EALD;AAMAxG,KAAIiG,WAAJ,CAAgBS,IAAIhI,QAAJ,EAAhB;;AAEAsB,KAAIoG,UAAJ,CAAe5B,YAAYhF,KAAK6D,SAAjB,CAAf;AACArD,KAAIoG,UAAJ,CAAe5B,YAAYhF,KAAK+D,UAAjB,CAAf;;AAEA,KAAI6B,IAAI5B,QAAJ,KAAiBvC,SAArB,EACCmE,IAAI5B,QAAJ,GAAezE,OAAOiG,KAAP,CAAa,CAAb,CAAf;AACDhF,KAAIiG,WAAJ,CAAgBb,IAAI5B,QAApB;;AAEA,KAAI4B,IAAI3B,IAAJ,KAAaxC,SAAjB,EACCmE,IAAI3B,IAAJ,GAAW1E,OAAOiG,KAAP,CAAa,CAAb,CAAX;AACDhF,KAAIiG,WAAJ,CAAgBb,IAAI3B,IAApB;;AAEA;AACAzD,KAAIiG,WAAJ,CAAgBlH,OAAOiG,KAAP,CAAa,CAAb,CAAhB;;AAEA0B,OAAMtH,QAAQZ,KAAR,CAAcgB,KAAKmE,SAAnB,CAAN;AACA3D,KAAIiG,WAAJ,CAAgBS,GAAhB;;AAEA,KAAI,CAACb,KAAL,EACC7F,IAAIiG,WAAJ,CAAgBb,IAAItB,SAAJ,CAAcpF,QAAd,CAAuB,KAAvB,CAAhB;;AAED,QAAQsB,IAAItB,QAAJ,EAAR;AACA;;AAED,SAAS6C,MAAT,CAAgBsF,QAAhB,EAA0B;AACzB,KAAIA,aAAa,8BAAjB,EACC,OAAQ,KAAR;AACD,KAAIA,aAAa,8BAAjB,EACC,OAAQ,KAAR;AACD,KAAIA,SAASC,KAAT,CAAe/G,UAAf,CAAJ,EACC,OAAQ,OAAR;AACD,KAAI8G,aAAa,kCAAjB,EACC,OAAQ,SAAR;AACD,OAAO,IAAIrG,KAAJ,CAAU,2BAA2BqG,QAArC,CAAP;AACA;;AAED,SAASlB,WAAT,CAAqBlG,GAArB,EAA0B;AACzB,KAAIA,IAAI6B,IAAJ,KAAa,KAAjB,EACC,OAAQ,8BAAR;AACD,KAAI7B,IAAI6B,IAAJ,KAAa,KAAjB,EACC,OAAQ,8BAAR;AACD,KAAI7B,IAAI6B,IAAJ,KAAa,OAAjB,EACC,OAAQ,gBAAgB7B,IAAIsH,KAApB,GAA4B,uBAApC;AACD,KAAItH,IAAI6B,IAAJ,KAAa,SAAjB,EACC,OAAQ,kCAAR;AACD,OAAO,IAAId,KAAJ,CAAU,0BAA0Bf,IAAI6B,IAAxC,CAAP;AACA","file":"openssh-cert.js","sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write,\n\n\t/* Internal private API */\n\tfromBuffer: fromBuffer,\n\ttoBuffer: toBuffer\n};\n\nvar assert = require('assert-plus');\nvar SSHBuffer = require('../ssh-buffer');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar Identity = require('../identity');\nvar rfc4253 = require('./rfc4253');\nvar Signature = require('../signature');\nvar utils = require('../utils');\nvar Certificate = require('../certificate');\n\nfunction verify(cert, key) {\n\t/*\n\t * We always give an issuerKey, so if our verify() is being called then\n\t * there was no signature. Return false.\n\t */\n\treturn (false);\n}\n\nvar TYPES = {\n\t'user': 1,\n\t'host': 2\n};\nObject.keys(TYPES).forEach(function (k) { TYPES[TYPES[k]] = k; });\n\nvar ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;\n\nfunction read(buf, options) {\n\tif (Buffer.isBuffer(buf))\n\t\tbuf = buf.toString('ascii');\n\tvar parts = buf.trim().split(/[ \\t\\n]+/g);\n\tif (parts.length < 2 || parts.length > 3)\n\t\tthrow (new Error('Not a valid SSH certificate line'));\n\n\tvar algo = parts[0];\n\tvar data = parts[1];\n\n\tdata = Buffer.from(data, 'base64');\n\treturn (fromBuffer(data, algo));\n}\n\nfunction fromBuffer(data, algo, partial) {\n\tvar sshbuf = new SSHBuffer({ buffer: data });\n\tvar innerAlgo = sshbuf.readString();\n\tif (algo !== undefined && innerAlgo !== algo)\n\t\tthrow (new Error('SSH certificate algorithm mismatch'));\n\tif (algo === undefined)\n\t\talgo = innerAlgo;\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tcert.signatures.openssh = {};\n\n\tcert.signatures.openssh.nonce = sshbuf.readBuffer();\n\n\tvar key = {};\n\tvar parts = (key.parts = []);\n\tkey.type = getAlg(algo);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\twhile (parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\tassert.ok(parts.length >= 1, 'key must have at least one part');\n\n\tvar algInfo = algs.info[key.type];\n\tif (key.type === 'ecdsa') {\n\t\tvar res = ECDSA_ALGO.exec(algo);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tparts[i].name = algInfo.parts[i];\n\t\tif (parts[i].name !== 'curve' &&\n\t\t    algInfo.normalize !== false) {\n\t\t\tvar p = parts[i];\n\t\t\tp.data = utils.mpNormalize(p.data);\n\t\t}\n\t}\n\n\tcert.subjectKey = new Key(key);\n\n\tcert.serial = sshbuf.readInt64();\n\n\tvar type = TYPES[sshbuf.readInt()];\n\tassert.string(type, 'valid cert type');\n\n\tcert.signatures.openssh.keyId = sshbuf.readString();\n\n\tvar principals = [];\n\tvar pbuf = sshbuf.readBuffer();\n\tvar psshbuf = new SSHBuffer({ buffer: pbuf });\n\twhile (!psshbuf.atEnd())\n\t\tprincipals.push(psshbuf.readString());\n\tif (principals.length === 0)\n\t\tprincipals = ['*'];\n\n\tcert.subjects = principals.map(function (pr) {\n\t\tif (type === 'user')\n\t\t\treturn (Identity.forUser(pr));\n\t\telse if (type === 'host')\n\t\t\treturn (Identity.forHost(pr));\n\t\tthrow (new Error('Unknown identity type ' + type));\n\t});\n\n\tcert.validFrom = int64ToDate(sshbuf.readInt64());\n\tcert.validUntil = int64ToDate(sshbuf.readInt64());\n\n\tcert.signatures.openssh.critical = sshbuf.readBuffer();\n\tcert.signatures.openssh.exts = sshbuf.readBuffer();\n\n\t/* reserved */\n\tsshbuf.readBuffer();\n\n\tvar signingKeyBuf = sshbuf.readBuffer();\n\tcert.issuerKey = rfc4253.read(signingKeyBuf);\n\n\t/*\n\t * OpenSSH certs don't give the identity of the issuer, just their\n\t * public key. So, we use an Identity that matches anything. The\n\t * isSignedBy() function will later tell you if the key matches.\n\t */\n\tcert.issuer = Identity.forHost('**');\n\n\tvar sigBuf = sshbuf.readBuffer();\n\tcert.signatures.openssh.signature =\n\t    Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');\n\n\tif (partial !== undefined) {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Certificate(cert));\n}\n\nfunction int64ToDate(buf) {\n\tvar i = buf.readUInt32BE(0) * 4294967296;\n\ti += buf.readUInt32BE(4);\n\tvar d = new Date();\n\td.setTime(i * 1000);\n\td.sourceInt64 = buf;\n\treturn (d);\n}\n\nfunction dateToInt64(date) {\n\tif (date.sourceInt64 !== undefined)\n\t\treturn (date.sourceInt64);\n\tvar i = Math.round(date.getTime() / 1000);\n\tvar upper = Math.floor(i / 4294967296);\n\tvar lower = Math.floor(i % 4294967296);\n\tvar buf = Buffer.alloc(8);\n\tbuf.writeUInt32BE(upper, 0);\n\tbuf.writeUInt32BE(lower, 4);\n\treturn (buf);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\treturn (false);\n\t}\n\tvar sig = cert.signatures.openssh;\n\tvar hashAlgo = undefined;\n\tif (key.type === 'rsa' || key.type === 'dsa')\n\t\thashAlgo = 'sha1';\n\tvar signer = key.createSign(hashAlgo);\n\tsigner.write(blob);\n\tsig.signature = signer.sign();\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.openssh === undefined)\n\t\tcert.signatures.openssh = {};\n\ttry {\n\t\tvar blob = toBuffer(cert, true);\n\t} catch (e) {\n\t\tdelete (cert.signatures.openssh);\n\t\tdone(e);\n\t\treturn;\n\t}\n\tvar sig = cert.signatures.openssh;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t/*\n\t\t\t * This will throw if the signature isn't of a\n\t\t\t * type/algo that can be used for SSH.\n\t\t\t */\n\t\t\tsignature.toBuffer('ssh');\n\t\t} catch (e) {\n\t\t\tdone(e);\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\n\tvar blob = toBuffer(cert);\n\tvar out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');\n\tif (options.comment)\n\t\tout = out + ' ' + options.comment;\n\treturn (out);\n}\n\n\nfunction toBuffer(cert, noSig) {\n\tassert.object(cert.signatures.openssh, 'signature for openssh format');\n\tvar sig = cert.signatures.openssh;\n\n\tif (sig.nonce === undefined)\n\t\tsig.nonce = crypto.randomBytes(16);\n\tvar buf = new SSHBuffer({});\n\tbuf.writeString(getCertType(cert.subjectKey));\n\tbuf.writeBuffer(sig.nonce);\n\n\tvar key = cert.subjectKey;\n\tvar algInfo = algs.info[key.type];\n\talgInfo.parts.forEach(function (part) {\n\t\tbuf.writePart(key.part[part]);\n\t});\n\n\tbuf.writeInt64(cert.serial);\n\n\tvar type = cert.subjects[0].type;\n\tassert.notStrictEqual(type, 'unknown');\n\tcert.subjects.forEach(function (id) {\n\t\tassert.strictEqual(id.type, type);\n\t});\n\ttype = TYPES[type];\n\tbuf.writeInt(type);\n\n\tif (sig.keyId === undefined) {\n\t\tsig.keyId = cert.subjects[0].type + '_' +\n\t\t    (cert.subjects[0].uid || cert.subjects[0].hostname);\n\t}\n\tbuf.writeString(sig.keyId);\n\n\tvar sub = new SSHBuffer({});\n\tcert.subjects.forEach(function (id) {\n\t\tif (type === TYPES.host)\n\t\t\tsub.writeString(id.hostname);\n\t\telse if (type === TYPES.user)\n\t\t\tsub.writeString(id.uid);\n\t});\n\tbuf.writeBuffer(sub.toBuffer());\n\n\tbuf.writeInt64(dateToInt64(cert.validFrom));\n\tbuf.writeInt64(dateToInt64(cert.validUntil));\n\n\tif (sig.critical === undefined)\n\t\tsig.critical = Buffer.alloc(0);\n\tbuf.writeBuffer(sig.critical);\n\n\tif (sig.exts === undefined)\n\t\tsig.exts = Buffer.alloc(0);\n\tbuf.writeBuffer(sig.exts);\n\n\t/* reserved */\n\tbuf.writeBuffer(Buffer.alloc(0));\n\n\tsub = rfc4253.write(cert.issuerKey);\n\tbuf.writeBuffer(sub);\n\n\tif (!noSig)\n\t\tbuf.writeBuffer(sig.signature.toBuffer('ssh'));\n\n\treturn (buf.toBuffer());\n}\n\nfunction getAlg(certType) {\n\tif (certType === 'ssh-rsa-cert-v01@openssh.com')\n\t\treturn ('rsa');\n\tif (certType === 'ssh-dss-cert-v01@openssh.com')\n\t\treturn ('dsa');\n\tif (certType.match(ECDSA_ALGO))\n\t\treturn ('ecdsa');\n\tif (certType === 'ssh-ed25519-cert-v01@openssh.com')\n\t\treturn ('ed25519');\n\tthrow (new Error('Unsupported cert type ' + certType));\n}\n\nfunction getCertType(key) {\n\tif (key.type === 'rsa')\n\t\treturn ('ssh-rsa-cert-v01@openssh.com');\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss-cert-v01@openssh.com');\n\tif (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com');\n\tif (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519-cert-v01@openssh.com');\n\tthrow (new Error('Unsupported key type ' + key.type));\n}\n"]}