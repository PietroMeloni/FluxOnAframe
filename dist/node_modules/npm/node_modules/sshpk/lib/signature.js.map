{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/lib/signature.js"],"names":["module","exports","Signature","assert","require","Buffer","algs","crypto","errs","utils","asn1","SSHBuffer","InvalidAlgorithmError","SignatureParseError","opts","object","arrayOfObject","parts","string","type","partLookup","i","length","part","name","hashAlgorithm","hashAlgo","curve","prototype","toBuffer","format","undefined","buf","stype","Error","writeString","writePart","sig","data","r","s","der","BerWriter","startSequence","mpNormalize","writeBuffer","Ber","Integer","endSequence","buffer","slice","concat","inner","sz","toString","optionalString","parse","from","toLowerCase","ok","parseOneNum","parseDSAasn1","parseDSA","parseECDSA","e","head","readString","msg","strictEqual","readPart","atEnd","push","BerReader","readSequence","d","readBuffer","split","isSignature","obj","ver","isCompatible","_sshpkApiVersion","_oldVersionDetect","func","hasOwnProperty"],"mappings":"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","file":"signature.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Signature;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar utils = require('./utils');\nvar asn1 = require('asn1');\nvar SSHBuffer = require('./ssh-buffer');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar SignatureParseError = errs.SignatureParseError;\n\nfunction Signature(opts) {\n\tassert.object(opts, 'options');\n\tassert.arrayOfObject(opts.parts, 'options.parts');\n\tassert.string(opts.type, 'options.type');\n\n\tvar partLookup = {};\n\tfor (var i = 0; i < opts.parts.length; ++i) {\n\t\tvar part = opts.parts[i];\n\t\tpartLookup[part.name] = part;\n\t}\n\n\tthis.type = opts.type;\n\tthis.hashAlgorithm = opts.hashAlgo;\n\tthis.curve = opts.curve;\n\tthis.parts = opts.parts;\n\tthis.part = partLookup;\n}\n\nSignature.prototype.toBuffer = function (format) {\n\tif (format === undefined)\n\t\tformat = 'asn1';\n\tassert.string(format, 'format');\n\n\tvar buf;\n\tvar stype = 'ssh-' + this.type;\n\n\tswitch (this.type) {\n\tcase 'rsa':\n\t\tswitch (this.hashAlgorithm) {\n\t\tcase 'sha256':\n\t\t\tstype = 'rsa-sha2-256';\n\t\t\tbreak;\n\t\tcase 'sha512':\n\t\t\tstype = 'rsa-sha2-512';\n\t\t\tbreak;\n\t\tcase 'sha1':\n\t\tcase undefined:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('SSH signature ' +\n\t\t\t    'format does not support hash ' +\n\t\t\t    'algorithm ' + this.hashAlgorithm));\n\t\t}\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'ed25519':\n\t\tif (format === 'ssh') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString(stype);\n\t\t\tbuf.writePart(this.part.sig);\n\t\t\treturn (buf.toBuffer());\n\t\t} else {\n\t\t\treturn (this.part.sig.data);\n\t\t}\n\t\tbreak;\n\n\tcase 'dsa':\n\tcase 'ecdsa':\n\t\tvar r, s;\n\t\tif (format === 'asn1') {\n\t\t\tvar der = new asn1.BerWriter();\n\t\t\tder.startSequence();\n\t\t\tr = utils.mpNormalize(this.part.r.data);\n\t\t\ts = utils.mpNormalize(this.part.s.data);\n\t\t\tder.writeBuffer(r, asn1.Ber.Integer);\n\t\t\tder.writeBuffer(s, asn1.Ber.Integer);\n\t\t\tder.endSequence();\n\t\t\treturn (der.buffer);\n\t\t} else if (format === 'ssh' && this.type === 'dsa') {\n\t\t\tbuf = new SSHBuffer({});\n\t\t\tbuf.writeString('ssh-dss');\n\t\t\tr = this.part.r.data;\n\t\t\tif (r.length > 20 && r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\ts = this.part.s.data;\n\t\t\tif (s.length > 20 && s[0] === 0x00)\n\t\t\t\ts = s.slice(1);\n\t\t\tif ((this.hashAlgorithm &&\n\t\t\t    this.hashAlgorithm !== 'sha1') ||\n\t\t\t    r.length + s.length !== 40) {\n\t\t\t\tthrow (new Error('OpenSSH only supports ' +\n\t\t\t\t    'DSA signatures with SHA1 hash'));\n\t\t\t}\n\t\t\tbuf.writeBuffer(Buffer.concat([r, s]));\n\t\t\treturn (buf.toBuffer());\n\t\t} else if (format === 'ssh' && this.type === 'ecdsa') {\n\t\t\tvar inner = new SSHBuffer({});\n\t\t\tr = this.part.r.data;\n\t\t\tinner.writeBuffer(r);\n\t\t\tinner.writePart(this.part.s);\n\n\t\t\tbuf = new SSHBuffer({});\n\t\t\t/* XXX: find a more proper way to do this? */\n\t\t\tvar curve;\n\t\t\tif (r[0] === 0x00)\n\t\t\t\tr = r.slice(1);\n\t\t\tvar sz = r.length * 8;\n\t\t\tif (sz === 256)\n\t\t\t\tcurve = 'nistp256';\n\t\t\telse if (sz === 384)\n\t\t\t\tcurve = 'nistp384';\n\t\t\telse if (sz === 528)\n\t\t\t\tcurve = 'nistp521';\n\t\t\tbuf.writeString('ecdsa-sha2-' + curve);\n\t\t\tbuf.writeBuffer(inner.toBuffer());\n\t\t\treturn (buf.toBuffer());\n\t\t}\n\t\tthrow (new Error('Invalid signature format'));\n\tdefault:\n\t\tthrow (new Error('Invalid signature data'));\n\t}\n};\n\nSignature.prototype.toString = function (format) {\n\tassert.optionalString(format, 'format');\n\treturn (this.toBuffer(format).toString('base64'));\n};\n\nSignature.parse = function (data, type, format) {\n\tif (typeof (data) === 'string')\n\t\tdata = Buffer.from(data, 'base64');\n\tassert.buffer(data, 'data');\n\tassert.string(format, 'format');\n\tassert.string(type, 'type');\n\n\tvar opts = {};\n\topts.type = type.toLowerCase();\n\topts.parts = [];\n\n\ttry {\n\t\tassert.ok(data.length > 0, 'signature must not be empty');\n\t\tswitch (opts.type) {\n\t\tcase 'rsa':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\t\tcase 'ed25519':\n\t\t\treturn (parseOneNum(data, type, format, opts));\n\n\t\tcase 'dsa':\n\t\tcase 'ecdsa':\n\t\t\tif (format === 'asn1')\n\t\t\t\treturn (parseDSAasn1(data, type, format, opts));\n\t\t\telse if (opts.type === 'dsa')\n\t\t\t\treturn (parseDSA(data, type, format, opts));\n\t\t\telse\n\t\t\t\treturn (parseECDSA(data, type, format, opts));\n\n\t\tdefault:\n\t\t\tthrow (new InvalidAlgorithmError(type));\n\t\t}\n\n\t} catch (e) {\n\t\tif (e instanceof InvalidAlgorithmError)\n\t\t\tthrow (e);\n\t\tthrow (new SignatureParseError(type, format, e));\n\t}\n};\n\nfunction parseOneNum(data, type, format, opts) {\n\tif (format === 'ssh') {\n\t\ttry {\n\t\t\tvar buf = new SSHBuffer({buffer: data});\n\t\t\tvar head = buf.readString();\n\t\t} catch (e) {\n\t\t\t/* fall through */\n\t\t}\n\t\tif (buf !== undefined) {\n\t\t\tvar msg = 'SSH signature does not match expected ' +\n\t\t\t    'type (expected ' + type + ', got ' + head + ')';\n\t\t\tswitch (head) {\n\t\t\tcase 'ssh-rsa':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha1';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-256':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha256';\n\t\t\t\tbreak;\n\t\t\tcase 'rsa-sha2-512':\n\t\t\t\tassert.strictEqual(type, 'rsa', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tcase 'ssh-ed25519':\n\t\t\t\tassert.strictEqual(type, 'ed25519', msg);\n\t\t\t\topts.hashAlgo = 'sha512';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow (new Error('Unknown SSH signature ' +\n\t\t\t\t    'type: ' + head));\n\t\t\t}\n\t\t\tvar sig = buf.readPart();\n\t\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\t\tsig.name = 'sig';\n\t\t\topts.parts.push(sig);\n\t\t\treturn (new Signature(opts));\n\t\t}\n\t}\n\topts.parts.push({name: 'sig', data: data});\n\treturn (new Signature(opts));\n}\n\nfunction parseDSAasn1(data, type, format, opts) {\n\tvar der = new asn1.BerReader(data);\n\tder.readSequence();\n\tvar r = der.readString(asn1.Ber.Integer, true);\n\tvar s = der.readString(asn1.Ber.Integer, true);\n\n\topts.parts.push({name: 'r', data: utils.mpNormalize(r)});\n\topts.parts.push({name: 's', data: utils.mpNormalize(s)});\n\n\treturn (new Signature(opts));\n}\n\nfunction parseDSA(data, type, format, opts) {\n\tif (data.length != 40) {\n\t\tvar buf = new SSHBuffer({buffer: data});\n\t\tvar d = buf.readBuffer();\n\t\tif (d.toString('ascii') === 'ssh-dss')\n\t\t\td = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\t\tassert.strictEqual(d.length, 40, 'invalid inner length');\n\t\tdata = d;\n\t}\n\topts.parts.push({name: 'r', data: data.slice(0, 20)});\n\topts.parts.push({name: 's', data: data.slice(20, 40)});\n\treturn (new Signature(opts));\n}\n\nfunction parseECDSA(data, type, format, opts) {\n\tvar buf = new SSHBuffer({buffer: data});\n\n\tvar r, s;\n\tvar inner = buf.readBuffer();\n\tvar stype = inner.toString('ascii');\n\tif (stype.slice(0, 6) === 'ecdsa-') {\n\t\tvar parts = stype.split('-');\n\t\tassert.strictEqual(parts[0], 'ecdsa');\n\t\tassert.strictEqual(parts[1], 'sha2');\n\t\topts.curve = parts[2];\n\t\tswitch (opts.curve) {\n\t\tcase 'nistp256':\n\t\t\topts.hashAlgo = 'sha256';\n\t\t\tbreak;\n\t\tcase 'nistp384':\n\t\t\topts.hashAlgo = 'sha384';\n\t\t\tbreak;\n\t\tcase 'nistp521':\n\t\t\topts.hashAlgo = 'sha512';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unsupported ECDSA curve: ' +\n\t\t\t    opts.curve));\n\t\t}\n\t\tinner = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'extra trailing bytes on outer');\n\t\tbuf = new SSHBuffer({buffer: inner});\n\t\tr = buf.readPart();\n\t} else {\n\t\tr = {data: inner};\n\t}\n\n\ts = buf.readPart();\n\tassert.ok(buf.atEnd(), 'extra trailing bytes');\n\n\tr.name = 'r';\n\ts.name = 's';\n\n\topts.parts.push(r);\n\topts.parts.push(s);\n\treturn (new Signature(opts));\n}\n\nSignature.isSignature = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Signature, ver));\n};\n\n/*\n * API versions for Signature:\n * [1,0] -- initial ver\n * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent\n *          hashAlgorithm property\n * [2,1] -- first tagged version\n */\nSignature.prototype._sshpkApiVersion = [2, 1];\n\nSignature._oldVersionDetect = function (obj) {\n\tassert.func(obj.toBuffer);\n\tif (obj.hasOwnProperty('hashAlgorithm'))\n\t\treturn ([2, 0]);\n\treturn ([1, 0]);\n};\n"]}