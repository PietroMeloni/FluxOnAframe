{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/lib/private-key.js"],"names":["module","exports","PrivateKey","assert","require","Buffer","algs","crypto","Fingerprint","Signature","errs","util","utils","dhe","generateECDSA","generateED25519","edCompat","nacl","e","Key","InvalidAlgorithmError","KeyParseError","KeyEncryptedError","formats","opts","object","call","_pubCache","undefined","inherits","prototype","toBuffer","format","options","string","optionalObject","write","hash","algo","toPublic","algInfo","info","type","pubParts","i","parts","length","p","push","part","source","comment","derive","newType","priv","pub","pair","k","data","slice","box","keyPair","fromSecretKey","Uint8Array","from","publicKey","name","mpNormalize","sign","fromSeed","Error","createVerify","hashAlgo","createSign","defaultHashAlgorithm","Signer","v","nm","err","toUpperCase","message","match","ok","oldSign","bind","key","curve","sig","parse","hashAlgorithm","buffer","filename","optionalString","read","isPrivateKey","obj","ver","isCompatible","generate","_sshpkApiVersion","_oldVersionDetect","func"],"mappings":"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","file":"private-key.js","sourcesContent":["// Copyright 2017 Joyent, Inc.\n\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar dhe = require('./dhe');\nvar generateECDSA = dhe.generateECDSA;\nvar generateED25519 = dhe.generateED25519;\nvar edCompat;\nvar nacl;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\nformats['dnssec'] = require('./formats/dnssec');\n\nfunction PrivateKey(opts) {\n\tassert.object(opts, 'options');\n\tKey.call(this, opts);\n\n\tthis._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\n\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pkcs1';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nPrivateKey.prototype.hash = function (algo) {\n\treturn (this.toPublic().hash(algo));\n};\n\nPrivateKey.prototype.toPublic = function () {\n\tif (this._pubCache)\n\t\treturn (this._pubCache);\n\n\tvar algInfo = algs.info[this.type];\n\tvar pubParts = [];\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = algInfo.parts[i];\n\t\tpubParts.push(this.part[p]);\n\t}\n\n\tthis._pubCache = new Key({\n\t\ttype: this.type,\n\t\tsource: this,\n\t\tparts: pubParts\n\t});\n\tif (this.comment)\n\t\tthis._pubCache.comment = this.comment;\n\treturn (this._pubCache);\n};\n\nPrivateKey.prototype.derive = function (newType) {\n\tassert.string(newType, 'type');\n\tvar priv, pub, pair;\n\n\tif (this.type === 'ed25519' && newType === 'curve25519') {\n\t\tif (nacl === undefined)\n\t\t\tnacl = require('tweetnacl');\n\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.box.keyPair.fromSecretKey(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t} else if (this.type === 'curve25519' && newType === 'ed25519') {\n\t\tif (nacl === undefined)\n\t\t\tnacl = require('tweetnacl');\n\n\t\tpriv = this.part.k.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\n\t\tpair = nacl.sign.keyPair.fromSeed(new Uint8Array(priv));\n\t\tpub = Buffer.from(pair.publicKey);\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'A', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'k', data: utils.mpNormalize(priv) }\n\t\t\t]\n\t\t}));\n\t}\n\tthrow (new Error('Key derivation not supported from ' + this.type +\n\t    ' to ' + newType));\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n\treturn (this.toPublic().createVerify(hashAlgo));\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Signer(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldSign = v.sign.bind(v);\n\tvar key = this.toBuffer('pkcs1');\n\tvar type = this.type;\n\tvar curve = this.curve;\n\tv.sign = function () {\n\t\tvar sig = oldSign(key);\n\t\tif (typeof (sig) === 'string')\n\t\t\tsig = Buffer.from(sig, 'binary');\n\t\tsig = Signature.parse(sig, type, 'asn1');\n\t\tsig.hashAlgorithm = hashAlgo;\n\t\tsig.curve = curve;\n\t\treturn (sig);\n\t};\n\treturn (v);\n};\n\nPrivateKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tassert.ok(k instanceof PrivateKey, 'key is not a private key');\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, PrivateKey, ver));\n};\n\nPrivateKey.generate = function (type, options) {\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.object(options, 'options');\n\n\tswitch (type) {\n\tcase 'ecdsa':\n\t\tif (options.curve === undefined)\n\t\t\toptions.curve = 'nistp256';\n\t\tassert.string(options.curve, 'options.curve');\n\t\treturn (generateECDSA(options.curve));\n\tcase 'ed25519':\n\t\treturn (generateED25519());\n\tdefault:\n\t\tthrow (new Error('Key generation not supported with key ' +\n\t\t    'type \"' + type + '\"'));\n\t}\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n * [1,5] -- changed ed25519 part names and format\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 5];\n\nPrivateKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toPublic);\n\tassert.func(obj.createSign);\n\tif (obj.derive)\n\t\treturn ([1, 3]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 2]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"]}