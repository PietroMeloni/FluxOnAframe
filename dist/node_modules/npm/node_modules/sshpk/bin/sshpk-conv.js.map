{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/bin/sshpk-conv"],"names":["dashdash","require","sshpk","fs","path","tty","readline","getPassword","getPass","options","names","type","help","main","module","parser","createParser","opts","parse","process","argv","e","console","error","message","exit","_args","length","trimRight","derive","private","inFile","stdin","inFileName","inFilePath","file","basename","accessSync","R_OK","createReadStream","name","outFile","stdout","out","identify","dirname","W_OK","createWriteStream","bufs","on","data","read","push","parseOpts","filename","processKey","buf","Buffer","concat","fmt","informat","f","parseKey","parsePrivateKey","key","err","pw","log","passphrase","comment","undefined","outformat","write","toBuffer","once","kind","PrivateKey","isPrivateKey","size","toUpperCase","curve","fingerprint","toString"],"mappings":"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","file":"sshpk-conv.js","sourcesContent":["\n// -*- mode: js -*-\n// vim: set filetype=javascript :\n// Copyright 2015 Joyent, Inc.\tAll rights reserved.\n\nvar dashdash = require('dashdash');\nvar sshpk = require('../lib/index');\nvar fs = require('fs');\nvar path = require('path');\nvar tty = require('tty');\nvar readline = require('readline');\nvar getPassword = require('getpass').getPass;\n\nvar options = [\n\t{\n\t\tnames: ['outformat', 't'],\n\t\ttype: 'string',\n\t\thelp: 'Output format'\n\t},\n\t{\n\t\tnames: ['informat', 'T'],\n\t\ttype: 'string',\n\t\thelp: 'Input format'\n\t},\n\t{\n\t\tnames: ['file', 'f'],\n\t\ttype: 'string',\n\t\thelp: 'Input file name (default stdin)'\n\t},\n\t{\n\t\tnames: ['out', 'o'],\n\t\ttype: 'string',\n\t\thelp: 'Output file name (default stdout)'\n\t},\n\t{\n\t\tnames: ['private', 'p'],\n\t\ttype: 'bool',\n\t\thelp: 'Produce a private key as output'\n\t},\n\t{\n\t\tnames: ['derive', 'd'],\n\t\ttype: 'string',\n\t\thelp: 'Output a new key derived from this one, with given algo'\n\t},\n\t{\n\t\tnames: ['identify', 'i'],\n\t\ttype: 'bool',\n\t\thelp: 'Print key metadata instead of converting'\n\t},\n\t{\n\t\tnames: ['comment', 'c'],\n\t\ttype: 'string',\n\t\thelp: 'Set key comment, if output format supports'\n\t},\n\t{\n\t\tnames: ['help', 'h'],\n\t\ttype: 'bool',\n\t\thelp: 'Shows this help text'\n\t}\n];\n\nif (require.main === module) {\n\tvar parser = dashdash.createParser({\n\t\toptions: options\n\t});\n\n\ttry {\n\t\tvar opts = parser.parse(process.argv);\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error: %s', e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tif (opts.help || opts._args.length > 1) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-conv: converts between SSH key formats\\n');\n\t\tconsole.error(help);\n\t\tconsole.error('\\navailable formats:');\n\t\tconsole.error('\t - pem, pkcs1\t  eg id_rsa');\n\t\tconsole.error('\t - ssh\t\t  eg id_rsa.pub');\n\t\tconsole.error('\t - pkcs8\t  format you want for openssl');\n\t\tconsole.error('\t - openssh\t  like output of ssh-keygen -o');\n\t\tconsole.error('\t - rfc4253\t  raw OpenSSH wire format');\n\t\tconsole.error('\t - dnssec\t  dnssec-keygen format');\n\t\tprocess.exit(1);\n\t}\n\n\t/*\n\t * Key derivation can only be done on private keys, so use of the -d\n\t * option necessarily implies -p.\n\t */\n\tif (opts.derive)\n\t\topts.private = true;\n\n\tvar inFile = process.stdin;\n\tvar inFileName = 'stdin';\n\n\tvar inFilePath;\n\tif (opts.file) {\n\t\tinFilePath = opts.file;\n\t} else if (opts._args.length === 1) {\n\t\tinFilePath = opts._args[0];\n\t}\n\n\tif (inFilePath)\n\t\tinFileName = path.basename(inFilePath);\n\n\ttry {\n\t\tif (inFilePath) {\n\t\t\tfs.accessSync(inFilePath, fs.R_OK);\n\t\t\tinFile = fs.createReadStream(inFilePath);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error opening input file' +\n\t\t     ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tvar outFile = process.stdout;\n\n\ttry {\n\t\tif (opts.out && !opts.identify) {\n\t\t\tfs.accessSync(path.dirname(opts.out), fs.W_OK);\n\t\t\toutFile = fs.createWriteStream(opts.out);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error opening output file' +\n\t\t    ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tvar bufs = [];\n\tinFile.on('readable', function () {\n\t\tvar data;\n\t\twhile ((data = inFile.read()))\n\t\t\tbufs.push(data);\n\t});\n\tvar parseOpts = {};\n\tparseOpts.filename = inFileName;\n\tinFile.on('end', function processKey() {\n\t\tvar buf = Buffer.concat(bufs);\n\t\tvar fmt = 'auto';\n\t\tif (opts.informat)\n\t\t\tfmt = opts.informat;\n\t\tvar f = sshpk.parseKey;\n\t\tif (opts.private)\n\t\t\tf = sshpk.parsePrivateKey;\n\t\ttry {\n\t\t\tvar key = f(buf, fmt, parseOpts);\n\t\t} catch (e) {\n\t\t\tif (e.name === 'KeyEncryptedError') {\n\t\t\t\tgetPassword(function (err, pw) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tconsole.log('sshpk-conv: ' +\n\t\t\t\t\t\t    err.name + ': ' +\n\t\t\t\t\t\t    err.message);\n\t\t\t\t\t\tprocess.exit(1);\n\t\t\t\t\t}\n\t\t\t\t\tparseOpts.passphrase = pw;\n\t\t\t\t\tprocessKey();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.error('sshpk-conv: ' +\n\t\t\t    e.name + ': ' + e.message);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (opts.derive)\n\t\t\tkey = key.derive(opts.derive);\n\n\t\tif (opts.comment)\n\t\t\tkey.comment = opts.comment;\n\n\t\tif (!opts.identify) {\n\t\t\tfmt = undefined;\n\t\t\tif (opts.outformat)\n\t\t\t\tfmt = opts.outformat;\n\t\t\toutFile.write(key.toBuffer(fmt));\n\t\t\tif (fmt === 'ssh' ||\n\t\t\t    (!opts.private && fmt === undefined))\n\t\t\t\toutFile.write('\\n');\n\t\t\toutFile.once('drain', function () {\n\t\t\t\tprocess.exit(0);\n\t\t\t});\n\t\t} else {\n\t\t\tvar kind = 'public';\n\t\t\tif (sshpk.PrivateKey.isPrivateKey(key))\n\t\t\t\tkind = 'private';\n\t\t\tconsole.log('%s: a %d bit %s %s key', inFileName,\n\t\t\t    key.size, key.type.toUpperCase(), kind);\n\t\t\tif (key.type === 'ecdsa')\n\t\t\t\tconsole.log('ECDSA curve: %s', key.curve);\n\t\t\tif (key.comment)\n\t\t\t\tconsole.log('Comment: %s', key.comment);\n\t\t\tconsole.log('Fingerprint:');\n\t\t\tconsole.log('  ' + key.fingerprint().toString());\n\t\t\tconsole.log('  ' + key.fingerprint('md5').toString());\n\t\t\tprocess.exit(0);\n\t\t}\n\t});\n}\n"]}