{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/sshpk/bin/sshpk-verify"],"names":["dashdash","require","sshpk","fs","path","Buffer","options","names","type","help","main","module","parser","createParser","opts","parse","process","argv","e","console","error","message","exit","_args","length","trimRight","identity","signature","keyData","readFileSync","key","parseKey","name","fmt","format","sigData","from","sig","parseSignature","hash","defaultHashAlgorithm","verifier","createVerify","verbose","size","inFile","stdin","inFileName","inFilePath","file","basename","accessSync","R_OK","createReadStream","pipe","on","ret","verify"],"mappings":"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","file":"sshpk-verify.js","sourcesContent":["\n// -*- mode: js -*-\n// vim: set filetype=javascript :\n// Copyright 2015 Joyent, Inc.  All rights reserved.\n\nvar dashdash = require('dashdash');\nvar sshpk = require('../lib/index');\nvar fs = require('fs');\nvar path = require('path');\nvar Buffer = require('safer-buffer').Buffer;\n\nvar options = [\n\t{\n\t\tnames: ['hash', 'H'],\n\t\ttype: 'string',\n\t\thelp: 'Hash algorithm (sha1, sha256, sha384, sha512)'\n\t},\n\t{\n\t\tnames: ['verbose', 'v'],\n\t\ttype: 'bool',\n\t\thelp: 'Display verbose info about key and hash used'\n\t},\n\t{\n\t\tnames: ['identity', 'i'],\n\t\ttype: 'string',\n\t\thelp: 'Path to (public) key to use'\n\t},\n\t{\n\t\tnames: ['file', 'f'],\n\t\ttype: 'string',\n\t\thelp: 'Input filename'\n\t},\n\t{\n\t\tnames: ['format', 't'],\n\t\ttype: 'string',\n\t\thelp: 'Signature format (asn1, ssh, raw)'\n\t},\n\t{\n\t\tnames: ['signature', 's'],\n\t\ttype: 'string',\n\t\thelp: 'base64-encoded signature data'\n\t},\n\t{\n\t\tnames: ['help', 'h'],\n\t\ttype: 'bool',\n\t\thelp: 'Shows this help text'\n\t}\n];\n\nif (require.main === module) {\n\tvar parser = dashdash.createParser({\n\t\toptions: options\n\t});\n\n\ttry {\n\t\tvar opts = parser.parse(process.argv);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error: %s', e.message);\n\t\tprocess.exit(3);\n\t}\n\n\tif (opts.help || opts._args.length > 1) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: sign data using an SSH key\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.identity) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -i or --identity option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.signature) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -s or --signature option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tvar keyData = fs.readFileSync(opts.identity);\n\n\tvar key;\n\ttry {\n\t\tkey = sshpk.parseKey(keyData);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error loading key \"' +\n\t\t    opts.identity + '\": ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar fmt = opts.format || 'asn1';\n\tvar sigData = Buffer.from(opts.signature, 'base64');\n\n\tvar sig;\n\ttry {\n\t\tsig = sshpk.parseSignature(sigData, key.type, fmt);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error parsing signature: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar hash = opts.hash || key.defaultHashAlgorithm();\n\n\tvar verifier;\n\ttry {\n\t\tverifier = key.createVerify(hash);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error creating verifier: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tif (opts.verbose) {\n\t\tconsole.error('sshpk-verify: using %s-%s with a %d bit key',\n\t\t    key.type, hash, key.size);\n\t}\n\n\tvar inFile = process.stdin;\n\tvar inFileName = 'stdin';\n\n\tvar inFilePath;\n\tif (opts.file) {\n\t\tinFilePath = opts.file;\n\t} else if (opts._args.length === 1) {\n\t\tinFilePath = opts._args[0];\n\t}\n\n\tif (inFilePath)\n\t\tinFileName = path.basename(inFilePath);\n\n\ttry {\n\t\tif (inFilePath) {\n\t\t\tfs.accessSync(inFilePath, fs.R_OK);\n\t\t\tinFile = fs.createReadStream(inFilePath);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error opening input file' +\n\t\t     ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tinFile.pipe(verifier);\n\tinFile.on('end', function () {\n\t\tvar ret;\n\t\ttry {\n\t\t\tret = verifier.verify(sig);\n\t\t} catch (e) {\n\t\t\tconsole.error('sshpk-verify: error verifying data: ' +\n\t\t\t    e.name + ': ' + e.message);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (ret) {\n\t\t\tconsole.error('OK');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconsole.error('NOT OK');\n\t\tprocess.exit(1);\n\t});\n}\n"]}