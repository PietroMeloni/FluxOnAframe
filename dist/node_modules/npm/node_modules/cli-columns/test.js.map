{"version":3,"sources":["../../../../../node_modules/npm/node_modules/cli-columns/test.js"],"names":["cols","width","expected","t","is","chalk","cyan","bgBlue","red","green","sort"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,mBAAK,8BAAL,EAAqC,aAAK;AACzC,KAAMA,OAAO,qBAAQ,CAAC,KAAD,EAAQ,CAAC,KAAD,EAAQ,KAAR,CAAR,EAAwB,CAAC,KAAD,EAAQ,KAAR,CAAxB,CAAR,EAAiD;AAC7DC,SAAO;AADsD,EAAjD,CAAb;;AAIA,KAAMC,WACL,UACA,OADA,GAEA,OAFA,GAGA,OAHA,GAIA,KALD;;AAOAC,GAAEC,EAAF,CAAKJ,IAAL,EAAWE,QAAX;AACA,CAbD;;AAeA,mBAAK,gCAAL,EAAuC,aAAK;AAC3C,KAAMF,OAAO,qBAAQ,CAAC,KAAD,EAAQ,CAAC,KAAD,EAAQ,KAAR,CAAR,EAAwB,CAAC,KAAD,EAAQ,KAAR,CAAxB,CAAR,EAAiD;AAC7DC,SAAO;AADsD,EAAjD,CAAb;;AAIA,KAAMC,WACL,sBACA,YAFD;;AAIAC,GAAEC,EAAF,CAAKJ,IAAL,EAAWE,QAAX;AACA,CAVD;;AAYA,mBAAK,2BAAL,EAAkC,aAAK;AACtC,KAAMF,OAAO,qBACZ,CACC,KADD,EACQ,KADR,EACe,KADf,EAECK,gBAAMC,IAAN,CAAW,KAAX,IAAoB,MAFrB,EAGC,SAASD,gBAAME,MAAN,CAAa,OAAb,CAHV,EAICF,gBAAMG,GAAN,CAAU,OAAV,CAJD,EAIqB,aAJrB,EAKC,QALD,EAKWH,gBAAMI,KAAN,CAAY,YAAZ,CALX,EAMC,SAND,EAMY,kBANZ,CADY,EASZ;AACCR,SAAO;AADR,EATY,CAAb;;AAcA,KAAMC,WACL,+EACA,sEADA,GAEA,wDAHD;;AAKAC,GAAEC,EAAF,CAAK,yBAAUJ,IAAV,CAAL,EAAsBE,QAAtB;AACA,CArBD;;AAuBA,mBAAK,4BAAL,EAAmC,aAAK;AACvC,KAAMF,OAAO,qBACZ,CACC,KADD,EACQ,KADR,EACe,KADf,EAECK,gBAAMC,IAAN,CAAW,KAAX,IAAoB,MAFrB,EAGC,SAASD,gBAAME,MAAN,CAAa,OAAb,CAHV,EAICF,gBAAMG,GAAN,CAAU,OAAV,CAJD,EAIqB,aAJrB,EAKC,QALD,EAKWH,gBAAMI,KAAN,CAAY,YAAZ,CALX,EAMC,SAND,EAMY,kBANZ,CADY,EASZ;AACCC,QAAM,KADP;AAECT,SAAO;AAFR,EATY,CAAb;;AAeA,KAAMC,WACL,yEACA,4EADA,GAEA,wDAHD;;AAKAC,GAAEC,EAAF,CAAK,yBAAUJ,IAAV,CAAL,EAAsBE,QAAtB;AACA,CAtBD","file":"test.js","sourcesContent":["import test from 'ava';\nimport chalk from 'chalk';\nimport stripAnsi from 'strip-ansi';\nimport columns from './index';\n\ntest('should print one column list', t => {\n\tconst cols = columns(['foo', ['bar', 'baz'], ['bar', 'qux']], {\n\t\twidth: 1\n\t});\n\n\tconst expected =\n\t\t'bar\\n' +\n\t\t'bar\\n' +\n\t\t'baz\\n' +\n\t\t'foo\\n' +\n\t\t'qux';\n\n\tt.is(cols, expected);\n});\n\ntest('should print three column list', t => {\n\tconst cols = columns(['foo', ['bar', 'baz'], ['bat', 'qux']], {\n\t\twidth: 16\n\t});\n\n\tconst expected =\n\t\t'bar  baz  qux  \\n' +\n\t\t'bat  foo  ';\n\n\tt.is(cols, expected);\n});\n\ntest('should print complex list', t => {\n\tconst cols = columns(\n\t\t[\n\t\t\t'foo', 'bar', 'baz',\n\t\t\tchalk.cyan('嶜憃撊') + ' 噾噿嚁',\n\t\t\t'blue' + chalk.bgBlue('berry'),\n\t\t\tchalk.red('apple'), 'pomegranate',\n\t\t\t'durian', chalk.green('star fruit'),\n\t\t\t'apricot', 'banana pineapple'\n\t\t],\n\t\t{\n\t\t\twidth: 80\n\t\t}\n\t);\n\n\tconst expected =\n\t\t'apple             bar               durian            star fruit        \\n' +\n\t\t'apricot           baz               foo               嶜憃撊 噾噿嚁     \\n' +\n\t\t'banana pineapple  blueberry         pomegranate       ';\n\n\tt.is(stripAnsi(cols), expected);\n});\n\ntest('should optionally not sort', t => {\n\tconst cols = columns(\n\t\t[\n\t\t\t'foo', 'bar', 'baz',\n\t\t\tchalk.cyan('嶜憃撊') + ' 噾噿嚁',\n\t\t\t'blue' + chalk.bgBlue('berry'),\n\t\t\tchalk.red('apple'), 'pomegranate',\n\t\t\t'durian', chalk.green('star fruit'),\n\t\t\t'apricot', 'banana pineapple'\n\t\t],\n\t\t{\n\t\t\tsort: false,\n\t\t\twidth: 80\n\t\t}\n\t);\n\n\tconst expected =\n\t\t'foo               嶜憃撊 噾噿嚁     pomegranate       apricot           \\n' +\n\t\t'bar               blueberry         durian            banana pineapple  \\n' +\n\t\t'baz               apple             star fruit        ';\n\n\tt.is(stripAnsi(cols), expected);\n});\n"]}