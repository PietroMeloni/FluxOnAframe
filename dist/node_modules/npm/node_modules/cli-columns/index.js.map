{"version":3,"sources":["../../../../../node_modules/npm/node_modules/cli-columns/index.js"],"names":["stringWidth","require","stripAnsi","concat","Array","prototype","defaults","character","newline","padding","sort","width","byPlainText","a","b","plainA","plainB","makeArray","makeList","count","apply","padCell","fullWidth","value","valueWidth","filler","join","toRows","rows","cell","i","length","push","toString","arr","columns","values","options","Object","assign","cells","filter","Boolean","map","String","termWidth","process","stdout","cellWidth","Math","max","columnCount","floor","rowCount","ceil","bind","reduce","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\n\nconst concat = Array.prototype.concat;\nconst defaults = {\n\tcharacter: ' ',\n\tnewline: '\\n',\n\tpadding: 2,\n\tsort: true,\n\twidth: 0\n};\n\nfunction byPlainText(a, b) {\n\tconst plainA = stripAnsi(a);\n\tconst plainB = stripAnsi(b);\n\n\tif (plainA === plainB) {\n\t\treturn 0;\n\t}\n\n\tif (plainA > plainB) {\n\t\treturn 1;\n\t}\n\n\treturn -1;\n}\n\nfunction makeArray() {\n\treturn [];\n}\n\nfunction makeList(count) {\n\treturn Array.apply(null, Array(count));\n}\n\nfunction padCell(fullWidth, character, value) {\n\tconst valueWidth = stringWidth(value);\n\tconst filler = makeList(fullWidth - valueWidth + 1);\n\n\treturn value + filler.join(character);\n}\n\nfunction toRows(rows, cell, i) {\n\trows[i % rows.length].push(cell);\n\n\treturn rows;\n}\n\nfunction toString(arr) {\n\treturn arr.join('');\n}\n\nfunction columns(values, options) {\n\tvalues = concat.apply([], values);\n\toptions = Object.assign({}, defaults, options);\n\n\tlet cells = values\n\t\t.filter(Boolean)\n\t\t.map(String);\n\n\tif (options.sort !== false) {\n\t\tcells = cells.sort(byPlainText);\n\t}\n\n\tconst termWidth = options.width || process.stdout.columns;\n\tconst cellWidth = Math.max.apply(null, cells.map(stringWidth)) + options.padding;\n\tconst columnCount = Math.floor(termWidth / cellWidth) || 1;\n\tconst rowCount = Math.ceil(cells.length / columnCount) || 1;\n\n\tif (columnCount === 1) {\n\t\treturn cells.join(options.newline);\n\t}\n\n\treturn cells\n\t\t.map(padCell.bind(null, cellWidth, options.character))\n\t\t.reduce(toRows, makeList(rowCount).map(makeArray))\n\t\t.map(toString)\n\t\t.join(options.newline);\n}\n\nmodule.exports = columns;\n"]}