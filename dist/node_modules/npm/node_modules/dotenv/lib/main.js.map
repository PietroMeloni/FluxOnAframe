{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","parse","src","obj","toString","split","forEach","line","keyValueArr","match","key","value","len","length","charAt","replace","trim","config","options","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","env","hasOwnProperty","e","error","module","exports","load"],"mappings":"AAAA;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA;;;;;AAKA,SAASE,KAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAMC,MAAM,EAAZ;;AAEA;AACAD,MAAIE,QAAJ,GAAeC,KAAf,CAAqB,IAArB,EAA2BC,OAA3B,CAAmC,UAAUC,IAAV,EAAgB;AACjD;AACA,QAAMC,cAAcD,KAAKE,KAAL,CAAW,iCAAX,CAApB;AACA;AACA,QAAID,eAAe,IAAnB,EAAyB;AACvB,UAAME,MAAMF,YAAY,CAAZ,CAAZ;;AAEA;AACA,UAAIG,QAAQH,YAAY,CAAZ,KAAkB,EAA9B;;AAEA;AACA,UAAMI,MAAMD,QAAQA,MAAME,MAAd,GAAuB,CAAnC;AACA,UAAID,MAAM,CAAN,IAAWD,MAAMG,MAAN,CAAa,CAAb,MAAoB,GAA/B,IAAsCH,MAAMG,MAAN,CAAaF,MAAM,CAAnB,MAA0B,GAApE,EAAyE;AACvED,gBAAQA,MAAMI,OAAN,CAAc,OAAd,EAAuB,IAAvB,CAAR;AACD;;AAED;AACAJ,cAAQA,MAAMI,OAAN,CAAc,gBAAd,EAAgC,EAAhC,EAAoCC,IAApC,EAAR;;AAEAb,UAAIO,GAAJ,IAAWC,KAAX;AACD;AACF,GArBD;;AAuBA,SAAOR,GAAP;AACD;;AAED;;;;;;;AAOA,SAASc,MAAT,CAAiBC,OAAjB,EAA0B;AACxB,MAAIC,aAAanB,KAAKoB,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,MAA5B,CAAjB;AACA,MAAIC,WAAW,MAAf;;AAEA,MAAIL,OAAJ,EAAa;AACX,QAAIA,QAAQlB,IAAZ,EAAkB;AAChBmB,mBAAaD,QAAQlB,IAArB;AACD;AACD,QAAIkB,QAAQK,QAAZ,EAAsB;AACpBA,iBAAWL,QAAQK,QAAnB;AACD;AACF;;AAED,MAAI;AACF;AACA,QAAMC,SAASvB,MAAMH,GAAG2B,YAAH,CAAgBN,UAAhB,EAA4B,EAAEI,kBAAF,EAA5B,CAAN,CAAf;;AAEAG,WAAOC,IAAP,CAAYH,MAAZ,EAAoBlB,OAApB,CAA4B,UAAUI,GAAV,EAAe;AACzC,UAAI,CAACW,QAAQO,GAAR,CAAYC,cAAZ,CAA2BnB,GAA3B,CAAL,EAAsC;AACpCW,gBAAQO,GAAR,CAAYlB,GAAZ,IAAmBc,OAAOd,GAAP,CAAnB;AACD;AACF,KAJD;;AAMA,WAAO,EAAEc,cAAF,EAAP;AACD,GAXD,CAWE,OAAOM,CAAP,EAAU;AACV,WAAO,EAAEC,OAAOD,CAAT,EAAP;AACD;AACF;;AAEDE,OAAOC,OAAP,CAAehB,MAAf,GAAwBA,MAAxB;AACAe,OAAOC,OAAP,CAAeC,IAAf,GAAsBjB,MAAtB;AACAe,OAAOC,OAAP,CAAehC,KAAf,GAAuBA,KAAvB","file":"main.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\n/*\n * Parses a string or buffer into an object\n * @param {(string|Buffer)} src - source to be parsed\n * @returns {Object} keys and values from src\n*/\nfunction parse (src) {\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$/)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || ''\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n')\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n      obj[key] = value\n    }\n  })\n\n  return obj\n}\n\n/*\n * Main entry point into dotenv. Allows configuration before loading .env\n * @param {Object} options - options for parsing .env file\n * @param {string} [options.path=.env] - path to .env file\n * @param {string} [options.encoding=utf8] - encoding of .env file\n * @returns {Object} parsed object or error\n*/\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n\n  if (options) {\n    if (options.path) {\n      dotenvPath = options.path\n    }\n    if (options.encoding) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.load = config\nmodule.exports.parse = parse\n"]}