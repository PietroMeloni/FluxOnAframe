{"version":3,"sources":["../../../../../node_modules/npm/node_modules/make-fetch-happen/cache.js"],"names":["cacache","require","fetch","pipe","ssri","through","to","url","stream","MAX_MEM_SIZE","cacheKey","req","parsed","parse","format","protocol","slashes","host","hostname","pathname","module","exports","path","opts","_path","_uid","uid","_gid","gid","Promise","key","get","info","then","hasContent","integrity","exists","metadata","matchDetails","reqHeaders","Headers","resHeaders","cacheIntegrity","addCacheHeaders","time","method","Response","headers","status","body","cachePath","memoize","size","PassThrough","realRead","_read","byDigest","emit","err","call","readOnce","Readable","read","push","data","resolve","response","fitInMemory","ckey","cacheOpts","algorithms","raw","reject","put","buf","bufSize","cacheTargetStream","cacheStream","chunk","enc","cb","highWaterMark","length","Buffer","concat","done","write","end","oldBody","newBody","once","reset","clear","Object","keys","forEach","k","rm","entry","cached","reqUrl","cacheUrl","vary","match","fieldsMatch","split","every","field","hash","set","encodeURIComponent","Date","toUTCString"],"mappings":"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","file":"cache.js","sourcesContent":["'use strict'\n\nconst cacache = require('cacache')\nconst fetch = require('node-fetch-npm')\nconst pipe = require('mississippi').pipe\nconst ssri = require('ssri')\nconst through = require('mississippi').through\nconst to = require('mississippi').to\nconst url = require('url')\nconst stream = require('stream')\n\nconst MAX_MEM_SIZE = 5 * 1024 * 1024 // 5MB\n\nfunction cacheKey (req) {\n  const parsed = url.parse(req.url)\n  return `make-fetch-happen:request-cache:${\n    url.format({\n      protocol: parsed.protocol,\n      slashes: parsed.slashes,\n      host: parsed.host,\n      hostname: parsed.hostname,\n      pathname: parsed.pathname\n    })\n  }`\n}\n\n// This is a cacache-based implementation of the Cache standard,\n// using node-fetch.\n// docs: https://developer.mozilla.org/en-US/docs/Web/API/Cache\n//\nmodule.exports = class Cache {\n  constructor (path, opts) {\n    this._path = path\n    this._uid = opts && opts.uid\n    this._gid = opts && opts.gid\n    this.Promise = (opts && opts.Promise) || Promise\n  }\n\n  // Returns a Promise that resolves to the response associated with the first\n  // matching request in the Cache object.\n  match (req, opts) {\n    opts = opts || {}\n    const key = cacheKey(req)\n    return cacache.get.info(this._path, key).then(info => {\n      return info && cacache.get.hasContent(\n        this._path, info.integrity, opts\n      ).then(exists => exists && info)\n    }).then(info => {\n      if (info && info.metadata && matchDetails(req, {\n        url: info.metadata.url,\n        reqHeaders: new fetch.Headers(info.metadata.reqHeaders),\n        resHeaders: new fetch.Headers(info.metadata.resHeaders),\n        cacheIntegrity: info.integrity,\n        integrity: opts && opts.integrity\n      })) {\n        const resHeaders = new fetch.Headers(info.metadata.resHeaders)\n        addCacheHeaders(resHeaders, this._path, key, info.integrity, info.time)\n        if (req.method === 'HEAD') {\n          return new fetch.Response(null, {\n            url: req.url,\n            headers: resHeaders,\n            status: 200\n          })\n        }\n        let body\n        const cachePath = this._path\n        // avoid opening cache file handles until a user actually tries to\n        // read from it.\n        if (opts.memoize !== false && info.size > MAX_MEM_SIZE) {\n          body = new stream.PassThrough()\n          const realRead = body._read\n          body._read = function (size) {\n            body._read = realRead\n            pipe(\n              cacache.get.stream.byDigest(cachePath, info.integrity, {\n                memoize: opts.memoize\n              }),\n              body,\n              err => body.emit(err))\n            return realRead.call(this, size)\n          }\n        } else {\n          let readOnce = false\n          // cacache is much faster at bulk reads\n          body = new stream.Readable({\n            read () {\n              if (readOnce) return this.push(null)\n              readOnce = true\n              cacache.get.byDigest(cachePath, info.integrity, {\n                memoize: opts.memoize\n              }).then(data => {\n                this.push(data)\n                this.push(null)\n              }, err => this.emit('error', err))\n            }\n          })\n        }\n        return this.Promise.resolve(new fetch.Response(body, {\n          url: req.url,\n          headers: resHeaders,\n          status: 200,\n          size: info.size\n        }))\n      }\n    })\n  }\n\n  // Takes both a request and its response and adds it to the given cache.\n  put (req, response, opts) {\n    opts = opts || {}\n    const size = response.headers.get('content-length')\n    const fitInMemory = !!size && opts.memoize !== false && size < MAX_MEM_SIZE\n    const ckey = cacheKey(req)\n    const cacheOpts = {\n      algorithms: opts.algorithms,\n      metadata: {\n        url: req.url,\n        reqHeaders: req.headers.raw(),\n        resHeaders: response.headers.raw()\n      },\n      uid: this._uid,\n      gid: this._gid,\n      size,\n      memoize: fitInMemory && opts.memoize\n    }\n    if (req.method === 'HEAD' || response.status === 304) {\n      // Update metadata without writing\n      return cacache.get.info(this._path, ckey).then(info => {\n        // Providing these will bypass content write\n        cacheOpts.integrity = info.integrity\n        addCacheHeaders(\n          response.headers, this._path, ckey, info.integrity, info.time\n        )\n        return new this.Promise((resolve, reject) => {\n          pipe(\n            cacache.get.stream.byDigest(this._path, info.integrity, cacheOpts),\n            cacache.put.stream(this._path, cacheKey(req), cacheOpts),\n            err => err ? reject(err) : resolve(response)\n          )\n        })\n      }).then(() => response)\n    }\n    let buf = []\n    let bufSize = 0\n    let cacheTargetStream = false\n    const cachePath = this._path\n    let cacheStream = to((chunk, enc, cb) => {\n      if (!cacheTargetStream) {\n        if (fitInMemory) {\n          cacheTargetStream =\n          to({highWaterMark: MAX_MEM_SIZE}, (chunk, enc, cb) => {\n            buf.push(chunk)\n            bufSize += chunk.length\n            cb()\n          }, done => {\n            cacache.put(\n              cachePath,\n              cacheKey(req),\n              Buffer.concat(buf, bufSize),\n              cacheOpts\n            ).then(\n              () => done(),\n              done\n            )\n          })\n        } else {\n          cacheTargetStream =\n          cacache.put.stream(cachePath, cacheKey(req), cacheOpts)\n        }\n      }\n      cacheTargetStream.write(chunk, enc, cb)\n    }, done => {\n      cacheTargetStream ? cacheTargetStream.end(done) : done()\n    })\n    const oldBody = response.body\n    const newBody = through({highWaterMark: fitInMemory && MAX_MEM_SIZE})\n    response.body = newBody\n    oldBody.once('error', err => newBody.emit('error', err))\n    newBody.once('error', err => oldBody.emit('error', err))\n    cacheStream.once('error', err => newBody.emit('error', err))\n    pipe(oldBody, to((chunk, enc, cb) => {\n      cacheStream.write(chunk, enc, () => {\n        newBody.write(chunk, enc, cb)\n      })\n    }, done => {\n      cacheStream.end(() => {\n        newBody.end(() => {\n          done()\n        })\n      })\n    }), err => err && newBody.emit('error', err))\n    return response\n  }\n\n  // Finds the Cache entry whose key is the request, and if found, deletes the\n  // Cache entry and returns a Promise that resolves to true. If no Cache entry\n  // is found, it returns false.\n  'delete' (req, opts) {\n    opts = opts || {}\n    if (typeof opts.memoize === 'object') {\n      if (opts.memoize.reset) {\n        opts.memoize.reset()\n      } else if (opts.memoize.clear) {\n        opts.memoize.clear()\n      } else {\n        Object.keys(opts.memoize).forEach(k => {\n          opts.memoize[k] = null\n        })\n      }\n    }\n    return cacache.rm.entry(\n      this._path,\n      cacheKey(req)\n    // TODO - true/false\n    ).then(() => false)\n  }\n}\n\nfunction matchDetails (req, cached) {\n  const reqUrl = url.parse(req.url)\n  const cacheUrl = url.parse(cached.url)\n  const vary = cached.resHeaders.get('Vary')\n  // https://tools.ietf.org/html/rfc7234#section-4.1\n  if (vary) {\n    if (vary.match(/\\*/)) {\n      return false\n    } else {\n      const fieldsMatch = vary.split(/\\s*,\\s*/).every(field => {\n        return cached.reqHeaders.get(field) === req.headers.get(field)\n      })\n      if (!fieldsMatch) {\n        return false\n      }\n    }\n  }\n  if (cached.integrity) {\n    return ssri.parse(cached.integrity).match(cached.cacheIntegrity)\n  }\n  reqUrl.hash = null\n  cacheUrl.hash = null\n  return url.format(reqUrl) === url.format(cacheUrl)\n}\n\nfunction addCacheHeaders (resHeaders, path, key, hash, time) {\n  resHeaders.set('X-Local-Cache', encodeURIComponent(path))\n  resHeaders.set('X-Local-Cache-Key', encodeURIComponent(key))\n  resHeaders.set('X-Local-Cache-Hash', encodeURIComponent(hash))\n  resHeaders.set('X-Local-Cache-Time', new Date(time).toUTCString())\n}\n"]}