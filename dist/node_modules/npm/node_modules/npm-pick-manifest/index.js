'use strict';

var npa = require('npm-package-arg');
var semver = require('semver');

module.exports = pickManifest;
function pickManifest(packument, wanted, opts) {
  opts = opts || {};
  var spec = npa.resolve(packument.name, wanted);
  var type = spec.type;
  if (type === 'version' || type === 'range') {
    wanted = semver.clean(wanted, true) || wanted;
  }
  var distTags = packument['dist-tags'] || {};
  var versions = Object.keys(packument.versions || {}).filter(function (v) {
    return semver.valid(v, true);
  });
  var undeprecated = versions.filter(function (v) {
    return !packument.versions[v].deprecated;
  });
  var err = void 0;

  if (!versions.length) {
    err = new Error('No valid versions available for ' + packument.name);
    err.code = 'ENOVERSIONS';
    err.name = packument.name;
    err.type = type;
    err.wanted = wanted;
    throw err;
  }

  var target = void 0;

  if (type === 'tag') {
    target = distTags[wanted];
  } else if (type === 'version') {
    target = wanted;
  } else if (type !== 'range') {
    throw new Error('Only tag, version, and range are supported');
  }

  var tagVersion = distTags[opts.defaultTag || 'latest'];

  if (!target && tagVersion && packument.versions[tagVersion] && semver.satisfies(tagVersion, wanted, true)) {
    target = tagVersion;
  }

  if (!target && !opts.includeDeprecated) {
    target = semver.maxSatisfying(undeprecated, wanted, true);
  }
  if (!target) {
    target = semver.maxSatisfying(versions, wanted, true);
  }

  if (!target && wanted === '*') {
    // This specific corner is meant for the case where
    // someone is using `*` as a selector, but all versions
    // are pre-releases, which don't match ranges at all.
    target = tagVersion;
  }

  var manifest = target && packument.versions[target];
  if (!manifest) {
    err = new Error('No matching version found for ' + packument.name + '@' + wanted);
    err.code = 'ETARGET';
    err.name = packument.name;
    err.type = type;
    err.wanted = wanted;
    err.versions = versions;
    err.distTags = distTags;
    err.defaultTag = opts.defaultTag;
    throw err;
  } else {
    return manifest;
  }
}
//# sourceMappingURL=index.js.map