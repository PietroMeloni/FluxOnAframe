{"version":3,"sources":["../../../../../node_modules/npm/node_modules/wrap-ansi/index.js"],"names":["stringWidth","require","stripAnsi","ESCAPES","END_CODE","ESCAPE_CODES","wrapAnsi","code","wordLengths","str","split","map","s","wrapWord","rows","word","cols","insideEscape","visible","length","i","x","indexOf","push","pop","exec","opts","options","pre","ret","escapeCode","lengths","words","undefined","rowLength","hard","wordWrap","r","trim","join","j","y","parseFloat","slice","module","exports","String","substr"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nvar stringWidth = require('string-width');\nvar stripAnsi = require('strip-ansi');\n\nvar ESCAPES = [\n\t'\\u001b',\n\t'\\u009b'\n];\n\nvar END_CODE = 39;\n\nvar ESCAPE_CODES = {\n\t0: 0,\n\t1: 22,\n\t2: 22,\n\t3: 23,\n\t4: 24,\n\t7: 27,\n\t8: 28,\n\t9: 29,\n\t30: 39,\n\t31: 39,\n\t32: 39,\n\t33: 39,\n\t34: 39,\n\t35: 39,\n\t36: 39,\n\t37: 39,\n\t90: 39,\n\t40: 49,\n\t41: 49,\n\t42: 49,\n\t43: 49,\n\t44: 49,\n\t45: 49,\n\t46: 49,\n\t47: 49\n};\n\nfunction wrapAnsi(code) {\n\treturn ESCAPES[0] + '[' + code + 'm';\n}\n\n// calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes.\nfunction wordLengths(str) {\n\treturn str.split(' ').map(function (s) {\n\t\treturn stringWidth(s);\n\t});\n}\n\n// wrap a long word across multiple rows.\n// ansi escape codes do not count towards length.\nfunction wrapWord(rows, word, cols) {\n\tvar insideEscape = false;\n\tvar visible = stripAnsi(rows[rows.length - 1]).length;\n\n\tfor (var i = 0; i < word.length; i++) {\n\t\tvar x = word[i];\n\n\t\trows[rows.length - 1] += x;\n\n\t\tif (ESCAPES.indexOf(x) !== -1) {\n\t\t\tinsideEscape = true;\n\t\t} else if (insideEscape && x === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (insideEscape) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible++;\n\n\t\tif (visible >= cols && i < word.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// it's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case.\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n}\n\n// the wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode.\n//\n// 'hard' will never allow a string to take up more\n// than cols characters.\n//\n// 'soft' allows long words to expand past the column length.\nfunction exec(str, cols, opts) {\n\tvar options = opts || {};\n\n\tvar pre = '';\n\tvar ret = '';\n\tvar escapeCode;\n\n\tvar lengths = wordLengths(str);\n\tvar words = str.split(' ');\n\tvar rows = [''];\n\n\tfor (var i = 0, word; (word = words[i]) !== undefined; i++) {\n\t\tvar rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (rowLength) {\n\t\t\trows[rows.length - 1] += ' ';\n\t\t\trowLength++;\n\t\t}\n\n\t\t// in 'hard' wrap mode, the length of a line is\n\t\t// never allowed to extend past 'cols'.\n\t\tif (lengths[i] > cols && options.hard) {\n\t\t\tif (rowLength) {\n\t\t\t\trows.push('');\n\t\t\t}\n\t\t\twrapWord(rows, word, cols);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[i] > cols && rowLength > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < cols) {\n\t\t\t\twrapWord(rows, word, cols);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tpre = rows.map(function (r) {\n\t\treturn r.trim();\n\t}).join('\\n');\n\n\tfor (var j = 0; j < pre.length; j++) {\n\t\tvar y = pre[j];\n\n\t\tret += y;\n\n\t\tif (ESCAPES.indexOf(y) !== -1) {\n\t\t\tvar code = parseFloat(/[0-9][^m]*/.exec(pre.slice(j, j + 4)));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t}\n\n\t\tif (escapeCode && ESCAPE_CODES[escapeCode]) {\n\t\t\tif (pre[j + 1] === '\\n') {\n\t\t\t\tret += wrapAnsi(ESCAPE_CODES[escapeCode]);\n\t\t\t} else if (y === '\\n') {\n\t\t\t\tret += wrapAnsi(escapeCode);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// for each line break, invoke the method separately.\nmodule.exports = function (str, cols, opts) {\n\treturn String(str).split('\\n').map(function (substr) {\n\t\treturn exec(substr, cols, opts);\n\t}).join('\\n');\n};\n"]}