'use strict';

var BB = require('bluebird');

var fs = require('fs');
var getStream = require('get-stream');
var mkdirp = BB.promisify(require('mkdirp'));
var npa = require('npm-package-arg');
var optCheck = require('./lib/util/opt-check.js');
var PassThrough = require('stream').PassThrough;
var path = require('path');
var rimraf = BB.promisify(require('rimraf'));
var withTarballStream = require('./lib/with-tarball-stream.js');

module.exports = tarball;
function tarball(spec, opts) {
  opts = optCheck(opts);
  spec = npa(spec, opts.where);
  return withTarballStream(spec, opts, function (stream) {
    return getStream.buffer(stream);
  });
}

module.exports.stream = tarballStream;
function tarballStream(spec, opts) {
  opts = optCheck(opts);
  spec = npa(spec, opts.where);
  var output = new PassThrough();
  var hasTouchedOutput = false;
  var lastError = null;
  withTarballStream(spec, opts, function (stream) {
    if (hasTouchedOutput && lastError) {
      throw lastError;
    } else if (hasTouchedOutput) {
      throw new Error('abort, abort!');
    } else {
      return new BB(function (resolve, reject) {
        stream.on('error', reject);
        output.on('error', reject);
        output.on('error', function () {
          hasTouchedOutput = true;
        });
        output.on('finish', resolve);
        stream.pipe(output);
        stream.once('data', function () {
          hasTouchedOutput = true;
        });
      }).catch(function (err) {
        lastError = err;
        throw err;
      });
    }
  }).catch(function (err) {
    return output.emit('error', err);
  });
  return output;
}

module.exports.toFile = tarballToFile;
function tarballToFile(spec, dest, opts) {
  opts = optCheck(opts);
  spec = npa(spec, opts.where);
  return mkdirp(path.dirname(dest)).then(function () {
    return withTarballStream(spec, opts, function (stream) {
      return rimraf(dest).then(function () {
        return new BB(function (resolve, reject) {
          var writer = fs.createWriteStream(dest);
          stream.on('error', reject);
          writer.on('error', reject);
          writer.on('close', resolve);
          stream.pipe(writer);
        });
      });
    });
  });
}
//# sourceMappingURL=tarball.js.map