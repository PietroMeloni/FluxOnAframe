'use strict';

var BB = require('bluebird');

var extractStream = require('./lib/extract-stream.js');
var fs = require('fs');
var mkdirp = BB.promisify(require('mkdirp'));
var npa = require('npm-package-arg');
var optCheck = require('./lib/util/opt-check.js');
var path = require('path');
var rimraf = BB.promisify(require('rimraf'));
var withTarballStream = require('./lib/with-tarball-stream.js');

var truncateAsync = BB.promisify(fs.truncate);
var readFileAsync = BB.promisify(fs.readFile);
var appendFileAsync = BB.promisify(fs.appendFile);

module.exports = extract;
function extract(spec, dest, opts) {
  opts = optCheck(opts);
  spec = npa(spec, opts.where);
  var startTime = Date.now();

  return withTarballStream(spec, opts, function (stream) {
    return tryExtract(spec, stream, dest, opts);
  }).then(function () {
    if (!opts.resolved) {
      var pjson = path.join(dest, 'package.json');
      return readFileAsync(pjson, 'utf8').then(function (str) {
        return truncateAsync(pjson).then(function () {
          return appendFileAsync(pjson, str.replace(/}\s*$/, '\n,"_resolved": ' + JSON.stringify(opts.resolved || '') + '\n,"_integrity": ' + JSON.stringify(opts.integrity || '') + '\n,"_from": ' + JSON.stringify(spec.toString()) + '\n}'));
        });
      });
    }
  }).then(function () {
    return opts.log.silly('extract', spec + ' extracted to ' + dest + ' (' + (Date.now() - startTime) + 'ms)');
  });
}

function tryExtract(spec, tarStream, dest, opts) {
  return new BB(function (resolve, reject) {
    tarStream.on('error', reject);
    setImmediate(resolve);
  }).then(function () {
    return rimraf(dest);
  }).then(function () {
    return mkdirp(dest);
  }).then(function () {
    return new BB(function (resolve, reject) {
      var xtractor = extractStream(spec, dest, opts);
      tarStream.on('error', reject);
      xtractor.on('error', reject);
      xtractor.on('close', resolve);
      tarStream.pipe(xtractor);
    });
  }).catch(function (err) {
    if (err.code === 'EINTEGRITY') {
      err.message = 'Verification failed while extracting ' + spec + ':\n' + err.message;
    }
    throw err;
  });
}
//# sourceMappingURL=extract.js.map