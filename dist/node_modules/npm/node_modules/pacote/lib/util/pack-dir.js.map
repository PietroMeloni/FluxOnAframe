{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pacote/lib/util/pack-dir.js"],"names":["BB","require","cacache","cacheKey","optCheck","packlist","pipe","promisify","tar","module","exports","packDir","manifest","label","dir","target","opts","packer","dirPacker","resolve","mkPacker","cache","then","cacher","put","stream","on","emit","i","all","path","c","cwd","gzip","portable","prefix","files"],"mappings":"AAAA;;AAEA,IAAMA,KAAKC,QAAQ,UAAR,CAAX;;AAEA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,WAAWF,QAAQ,aAAR,CAAjB;AACA,IAAMG,WAAWH,QAAQ,aAAR,CAAjB;AACA,IAAMI,WAAWJ,QAAQ,cAAR,CAAjB;AACA,IAAMK,OAAON,GAAGO,SAAH,CAAaN,QAAQ,aAAR,EAAuBK,IAApC,CAAb;AACA,IAAME,MAAMP,QAAQ,KAAR,CAAZ;;AAEAQ,OAAOC,OAAP,GAAiBC,OAAjB;AACA,SAASA,OAAT,CAAkBC,QAAlB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,MAAxC,EAAgDC,IAAhD,EAAsD;AACpDA,SAAOZ,SAASY,IAAT,CAAP;;AAEA,MAAMC,SAASD,KAAKE,SAAL,GACXlB,GAAGmB,OAAH,CAAWH,KAAKE,SAAL,CAAeN,QAAf,EAAyBE,GAAzB,CAAX,CADW,GAEXM,SAASN,GAAT,CAFJ;;AAIA,MAAI,CAACE,KAAKK,KAAV,EAAiB;AACf,WAAOJ,OAAOK,IAAP,CAAY;AAAA,aAAUhB,KAAKW,MAAL,EAAaF,MAAb,CAAV;AAAA,KAAZ,CAAP;AACD,GAFD,MAEO;AACL,QAAMQ,SAASrB,QAAQsB,GAAR,CAAYC,MAAZ,CACbT,KAAKK,KADQ,EACDlB,SAAS,YAAT,EAAuBU,KAAvB,CADC,EAC8BG,IAD9B,EAEbU,EAFa,CAEV,WAFU,EAEG,aAAK;AACrBX,aAAOY,IAAP,CAAY,WAAZ,EAAyBC,CAAzB;AACD,KAJc,CAAf;AAKA,WAAOX,OAAOK,IAAP,CAAY;AAAA,aAAUtB,GAAG6B,GAAH,CAAO,CAClCvB,KAAKW,MAAL,EAAaM,MAAb,CADkC,EAElCjB,KAAKW,MAAL,EAAaF,MAAb,CAFkC,CAAP,CAAV;AAAA,KAAZ,CAAP;AAID;AACF;;AAED,SAASK,QAAT,CAAmBN,GAAnB,EAAwB;AACtB,SAAOT,SAAS,EAACyB,MAAMhB,GAAP,EAAT,EAAsBQ,IAAtB,CAA2B,iBAAS;AACzC,WAAOd,IAAIuB,CAAJ,CAAM;AACXC,WAAKlB,GADM;AAEXmB,YAAM,IAFK;AAGXC,gBAAU,IAHC;AAIXC,cAAQ;AAJG,KAAN,EAKJC,KALI,CAAP;AAMD,GAPM,CAAP;AAQD","file":"pack-dir.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cacache = require('cacache')\nconst cacheKey = require('./cache-key')\nconst optCheck = require('./opt-check')\nconst packlist = require('npm-packlist')\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst tar = require('tar')\n\nmodule.exports = packDir\nfunction packDir (manifest, label, dir, target, opts) {\n  opts = optCheck(opts)\n\n  const packer = opts.dirPacker\n    ? BB.resolve(opts.dirPacker(manifest, dir))\n    : mkPacker(dir)\n\n  if (!opts.cache) {\n    return packer.then(packer => pipe(packer, target))\n  } else {\n    const cacher = cacache.put.stream(\n      opts.cache, cacheKey('packed-dir', label), opts\n    ).on('integrity', i => {\n      target.emit('integrity', i)\n    })\n    return packer.then(packer => BB.all([\n      pipe(packer, cacher),\n      pipe(packer, target)\n    ]))\n  }\n}\n\nfunction mkPacker (dir) {\n  return packlist({path: dir}).then(files => {\n    return tar.c({\n      cwd: dir,\n      gzip: true,\n      portable: true,\n      prefix: 'package/'\n    }, files)\n  })\n}\n"]}