{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pacote/lib/util/git.js"],"names":["BB","require","cp","execFileAsync","promisify","execFile","multiArgs","finished","LRU","optCheck","osenv","path","pinflight","promiseRetry","uniqueFilename","which","semver","GOOD_ENV_VARS","Set","GIT_TRANSIENT_ERRORS","join","GIT_TRANSIENT_ERROR_RE","RegExp","shouldRetry","error","test","GIT_","GITENV","gitEnv","tmpDir","tmpdir","tmpName","GIT_ASKPASS","GIT_TEMPLATE_DIR","Object","keys","process","env","forEach","has","k","startsWith","GITPATH","sync","e","module","exports","clone","fullClone","repo","committish","target","opts","gitArgs","platform","push","execGit","cwd","then","updateSubmodules","headSha","shallow","shallowClone","branch","localRepo","spread","stdout","trim","CARET_BRACES","REVS","max","maxAge","revs","cached","get","resolve","spawnGit","split","reduce","line","length","sha","ref","match","endsWith","type","refType","doc","refs","shas","valid","versions","clean","err","message","stderr","HEAD","v","latest","set","_exec","gitOpts","checkGit","retry","number","log","silly","gitPath","mkOpts","catch","_spawn","child","spawn","on","d","_gitOpts","uid","isNaN","gid","assign","Error","code","reject","REFS_TAGS","REFS_HEADS","indexOf"],"mappings":"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","file":"git.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cp = require('child_process')\nconst execFileAsync = BB.promisify(cp.execFile, {\n  multiArgs: true\n})\nconst finished = require('./finished')\nconst LRU = require('lru-cache')\nconst optCheck = require('./opt-check')\nconst osenv = require('osenv')\nconst path = require('path')\nconst pinflight = require('promise-inflight')\nconst promiseRetry = require('promise-retry')\nconst uniqueFilename = require('unique-filename')\nconst which = BB.promisify(require('which'))\nconst semver = require('semver')\n\nconst GOOD_ENV_VARS = new Set([\n  'GIT_ASKPASS',\n  'GIT_EXEC_PATH',\n  'GIT_PROXY_COMMAND',\n  'GIT_SSH',\n  'GIT_SSH_COMMAND',\n  'GIT_SSL_CAINFO',\n  'GIT_SSL_NO_VERIFY'\n])\n\nconst GIT_TRANSIENT_ERRORS = [\n  'remote error: Internal Server Error',\n  'The remote end hung up unexpectedly',\n  'Connection timed out',\n  'Operation timed out',\n  'Failed to connect to .* Timed out',\n  'Connection reset by peer',\n  'SSL_ERROR_SYSCALL',\n  'The requested URL returned error: 503'\n].join('|')\n\nconst GIT_TRANSIENT_ERROR_RE = new RegExp(GIT_TRANSIENT_ERRORS)\n\nfunction shouldRetry (error) {\n  return GIT_TRANSIENT_ERROR_RE.test(error)\n}\n\nconst GIT_ = 'GIT_'\nlet GITENV\nfunction gitEnv () {\n  if (GITENV) { return GITENV }\n  const tmpDir = path.join(osenv.tmpdir(), 'pacote-git-template-tmp')\n  const tmpName = uniqueFilename(tmpDir, 'git-clone')\n  GITENV = {\n    GIT_ASKPASS: 'echo',\n    GIT_TEMPLATE_DIR: tmpName\n  }\n  Object.keys(process.env).forEach(k => {\n    if (GOOD_ENV_VARS.has(k) || !k.startsWith(GIT_)) {\n      GITENV[k] = process.env[k]\n    }\n  })\n  return GITENV\n}\n\nlet GITPATH\ntry {\n  GITPATH = which.sync('git')\n} catch (e) {}\n\nmodule.exports.clone = fullClone\nfunction fullClone (repo, committish, target, opts) {\n  opts = optCheck(opts)\n  const gitArgs = ['clone', '--mirror', '-q', repo, path.join(target, '.git')]\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true')\n  }\n  return execGit(gitArgs, {cwd: target}).then(() => {\n    return execGit(['init'], {cwd: target})\n  }).then(() => {\n    return execGit(['checkout', committish || 'HEAD'], {cwd: target})\n  }).then(() => {\n    return updateSubmodules(target, opts)\n  }).then(() => headSha(target, opts))\n}\n\nmodule.exports.shallow = shallowClone\nfunction shallowClone (repo, branch, target, opts) {\n  opts = optCheck(opts)\n  const gitArgs = ['clone', '--depth=1', '-q']\n  if (branch) {\n    gitArgs.push('-b', branch)\n  }\n  gitArgs.push(repo, target)\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true')\n  }\n  return execGit(gitArgs, {\n    cwd: target\n  }, opts).then(() => {\n    return updateSubmodules(target, opts)\n  }).then(() => headSha(target, opts))\n}\n\nfunction updateSubmodules (localRepo, opts) {\n  const gitArgs = ['submodule', 'update', '-q', '--init', '--recursive']\n  return execGit(gitArgs, {\n    cwd: localRepo\n  }, opts)\n}\n\nfunction headSha (repo, opts) {\n  opts = optCheck(opts)\n  return execGit(['rev-parse', '--revs-only', 'HEAD'], {cwd: repo}, opts).spread(stdout => {\n    return stdout.trim()\n  })\n}\n\nconst CARET_BRACES = '^{}'\nconst REVS = new LRU({\n  max: 100,\n  maxAge: 5 * 60 * 1000\n})\nmodule.exports.revs = revs\nfunction revs (repo, opts) {\n  opts = optCheck(opts)\n  const cached = REVS.get(repo)\n  if (cached) {\n    return BB.resolve(cached)\n  }\n  return pinflight(`ls-remote:${repo}`, () => {\n    return spawnGit(['ls-remote', '-h', '-t', repo], {\n      env: gitEnv()\n    }, opts).then((stdout) => {\n      return stdout.split('\\n').reduce((revs, line) => {\n        const split = line.split(/\\s+/, 2)\n        if (split.length < 2) { return revs }\n        const sha = split[0].trim()\n        const ref = split[1].trim().match(/(?:refs\\/[^/]+\\/)?(.*)/)[1]\n        if (!ref) { return revs } // ???\n        if (ref.endsWith(CARET_BRACES)) { return revs } // refs/tags/x^{} crap\n        const type = refType(line)\n        const doc = {sha, ref, type}\n\n        revs.refs[ref] = doc\n        // We can check out shallow clones on specific SHAs if we have a ref\n        if (revs.shas[sha]) {\n          revs.shas[sha].push(ref)\n        } else {\n          revs.shas[sha] = [ref]\n        }\n\n        if (type === 'tag') {\n          const match = ref.match(/v?(\\d+\\.\\d+\\.\\d+(?:[-+].+)?)$/)\n          if (match && semver.valid(match[1], true)) {\n            revs.versions[semver.clean(match[1], true)] = doc\n          }\n        }\n\n        return revs\n      }, {versions: {}, 'dist-tags': {}, refs: {}, shas: {}})\n    }, err => {\n      err.message = `Error while executing:\\n${GITPATH} ls-remote -h -t ${repo}\\n\\n${err.stderr}\\n${err.message}`\n      throw err\n    }).then(revs => {\n      if (revs.refs.HEAD) {\n        const HEAD = revs.refs.HEAD\n        Object.keys(revs.versions).forEach(v => {\n          if (v.sha === HEAD.sha) {\n            revs['dist-tags'].HEAD = v\n            if (!revs.refs.latest) {\n              revs['dist-tags'].latest = revs.refs.HEAD\n            }\n          }\n        })\n      }\n      REVS.set(repo, revs)\n      return revs\n    })\n  })\n}\n\nmodule.exports._exec = execGit\nfunction execGit (gitArgs, gitOpts, opts) {\n  opts = optCheck(opts)\n  return checkGit().then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number)\n      }\n      return execFileAsync(gitPath, gitArgs, mkOpts(gitOpts, opts)).catch((err) => {\n        if (shouldRetry(err)) {\n          retry(err)\n        } else {\n          throw err\n        }\n      })\n    }, opts.retry)\n  })\n}\n\nmodule.exports._spawn = spawnGit\nfunction spawnGit (gitArgs, gitOpts, opts) {\n  opts = optCheck(opts)\n  return checkGit().then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number)\n      }\n      const child = cp.spawn(gitPath, gitArgs, mkOpts(gitOpts, opts))\n\n      let stdout = ''\n      let stderr = ''\n      child.stdout.on('data', d => { stdout += d })\n      child.stderr.on('data', d => { stderr += d })\n\n      return finished(child, true).catch(err => {\n        if (shouldRetry(stderr)) {\n          retry(err)\n        } else {\n          err.stderr = stderr\n          throw err\n        }\n      }).then(() => {\n        return stdout\n      })\n    }, opts.retry)\n  })\n}\n\nfunction mkOpts (_gitOpts, opts) {\n  const gitOpts = {\n    env: gitEnv()\n  }\n  if (+opts.uid && !isNaN(opts.uid)) {\n    gitOpts.uid = +opts.uid\n  }\n  if (+opts.gid && !isNaN(opts.gid)) {\n    gitOpts.gid = +opts.gid\n  }\n  Object.assign(gitOpts, _gitOpts)\n  return gitOpts\n}\n\nfunction checkGit () {\n  if (!GITPATH) {\n    const err = new Error('No git binary found in $PATH')\n    err.code = 'ENOGIT'\n    return BB.reject(err)\n  } else {\n    return BB.resolve(GITPATH)\n  }\n}\n\nconst REFS_TAGS = 'refs/tags/'\nconst REFS_HEADS = 'refs/heads/'\nconst HEAD = 'HEAD'\nfunction refType (ref) {\n  return ref.indexOf(REFS_TAGS) !== -1\n    ? 'tag'\n    : ref.indexOf(REFS_HEADS) !== -1\n      ? 'branch'\n      : ref.endsWith(HEAD)\n        ? 'head'\n        : 'other'\n}\n"]}