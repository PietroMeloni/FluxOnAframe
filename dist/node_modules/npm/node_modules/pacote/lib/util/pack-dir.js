'use strict';

var BB = require('bluebird');

var cacache = require('cacache');
var cacheKey = require('./cache-key');
var optCheck = require('./opt-check');
var packlist = require('npm-packlist');
var pipe = BB.promisify(require('mississippi').pipe);
var tar = require('tar');

module.exports = packDir;
function packDir(manifest, label, dir, target, opts) {
  opts = optCheck(opts);

  var packer = opts.dirPacker ? BB.resolve(opts.dirPacker(manifest, dir)) : mkPacker(dir);

  if (!opts.cache) {
    return packer.then(function (packer) {
      return pipe(packer, target);
    });
  } else {
    var cacher = cacache.put.stream(opts.cache, cacheKey('packed-dir', label), opts).on('integrity', function (i) {
      target.emit('integrity', i);
    });
    return packer.then(function (packer) {
      return BB.all([pipe(packer, cacher), pipe(packer, target)]);
    });
  }
}

function mkPacker(dir) {
  return packlist({ path: dir }).then(function (files) {
    return tar.c({
      cwd: dir,
      gzip: true,
      portable: true,
      prefix: 'package/'
    }, files);
  });
}
//# sourceMappingURL=pack-dir.js.map