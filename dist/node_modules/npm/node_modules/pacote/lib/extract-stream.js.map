{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/pacote/lib/extract-stream.js"],"names":["Minipass","require","path","tar","module","exports","extractStream","_computeMode","computeMode","Transformer","spec","opts","str","data","replaced","replace","JSON","stringify","resolved","integrity","toString","fileMode","optMode","umask","pkgJsonTransform","entry","transformed","dest","sawIgnores","Set","x","cwd","filter","name","header","type","match","strip","onwarn","log","warn","msg","uid","gid","transform","onentry","toLowerCase","mode","fmode","dmode","base","basename","add","npmignore","has"],"mappings":"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","file":"extract-stream.js","sourcesContent":["'use strict'\n\nconst Minipass = require('minipass')\nconst path = require('path')\nconst tar = require('tar')\n\nmodule.exports = extractStream\nmodule.exports._computeMode = computeMode\n\nclass Transformer extends Minipass {\n  constructor (spec, opts) {\n    super()\n    this.spec = spec\n    this.opts = opts\n    this.str = ''\n  }\n  write (data) {\n    this.str += data\n    return true\n  }\n  end () {\n    const replaced = this.str.replace(\n      /}\\s*$/,\n      `\\n,\"_resolved\": ${\n        JSON.stringify(this.opts.resolved || '')\n      }\\n,\"_integrity\": ${\n        JSON.stringify(this.opts.integrity || '')\n      }\\n,\"_from\": ${\n        JSON.stringify(this.spec.toString())\n      }\\n}`\n    )\n    super.write(replaced)\n    return super.end()\n  }\n}\n\nfunction computeMode (fileMode, optMode, umask) {\n  return (fileMode | optMode) & ~(umask || 0)\n}\n\nfunction pkgJsonTransform (spec, opts) {\n  return entry => {\n    if (entry.path === 'package.json') {\n      const transformed = new Transformer(spec, opts)\n      return transformed\n    }\n  }\n}\n\nfunction extractStream (spec, dest, opts) {\n  opts = opts || {}\n  const sawIgnores = new Set()\n  return tar.x({\n    cwd: dest,\n    filter: (name, entry) => !entry.header.type.match(/^.*link$/i),\n    strip: 1,\n    onwarn: msg => opts.log && opts.log.warn('tar', msg),\n    uid: opts.uid,\n    gid: opts.gid,\n    transform: opts.resolved && pkgJsonTransform(spec, opts),\n    onentry (entry) {\n      if (entry.type.toLowerCase() === 'file') {\n        entry.mode = computeMode(entry.mode, opts.fmode, opts.umask)\n      } else if (entry.type.toLowerCase() === 'directory') {\n        entry.mode = computeMode(entry.mode, opts.dmode, opts.umask)\n      } else {\n        entry.mode = computeMode(entry.mode, 0, opts.umask)\n      }\n\n      // Note: This mirrors logic in the fs read operations that are\n      // employed during tarball creation, in the fstream-npm module.\n      // It is duplicated here to handle tarballs that are created\n      // using other means, such as system tar or git archive.\n      if (entry.type.toLowerCase() === 'file') {\n        const base = path.basename(entry.path)\n        if (base === '.npmignore') {\n          sawIgnores.add(entry.path)\n        } else if (base === '.gitignore') {\n          const npmignore = entry.path.replace(/\\.gitignore$/, '.npmignore')\n          if (!sawIgnores.has(npmignore)) {\n            // Rename, may be clobbered later.\n            entry.path = npmignore\n          }\n        }\n      }\n    }\n  })\n}\n"]}