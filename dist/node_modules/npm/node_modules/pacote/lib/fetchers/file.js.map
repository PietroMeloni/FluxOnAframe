{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pacote/lib/fetchers/file.js"],"names":["BB","require","cacache","Fetcher","fs","pipe","promisify","through","readFileAsync","readFile","statAsync","stat","MAX_BULK_SIZE","fetchFile","module","exports","Object","create","impl","manifest","spec","opts","resolve","tarball","src","_resolved","fetchSpec","stream","then","emit","size","cache","put","data","integrity","info","write","end","cacheWriter","createReadStream","on","d","err","fromManifest"],"mappings":"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","file":"file.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cacache = require('cacache')\nconst Fetcher = require('../fetch')\nconst fs = require('fs')\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst through = require('mississippi').through\n\nconst readFileAsync = BB.promisify(fs.readFile)\nconst statAsync = BB.promisify(fs.stat)\n\nconst MAX_BULK_SIZE = 2 * 1024 * 1024 // 2MB\n\n// `file` packages refer to local tarball files.\nconst fetchFile = module.exports = Object.create(null)\n\nFetcher.impl(fetchFile, {\n  manifest (spec, opts) {\n    // We can't do much here. `finalizeManifest` will take care of\n    // calling `tarball` to fill out all the necessary details.\n    return BB.resolve(null)\n  },\n\n  // All the heavy lifting for `file` packages is done here.\n  // They're never cached. We just read straight out of the file.\n  // TODO - maybe they *should* be cached?\n  tarball (spec, opts) {\n    const src = spec._resolved || spec.fetchSpec\n    const stream = through()\n    statAsync(src).then(stat => {\n      if (spec._resolved) { stream.emit('manifest', spec) }\n      if (stat.size <= MAX_BULK_SIZE) {\n        // YAY LET'S DO THING IN BULK\n        return readFileAsync(src).then(data => {\n          if (opts.cache) {\n            return cacache.put(\n              opts.cache, `pacote:tarball:file:${src}`, data, {\n                integrity: opts.integrity\n              }\n            ).then(integrity => ({data, integrity}))\n          } else {\n            return {data}\n          }\n        }).then(info => {\n          if (info.integrity) { stream.emit('integrity', info.integrity) }\n          stream.write(info.data, () => {\n            stream.end()\n          })\n        })\n      } else {\n        let integrity\n        const cacheWriter = !opts.cache\n          ? BB.resolve(null)\n          : (pipe(\n            fs.createReadStream(src),\n            cacache.put.stream(opts.cache, `pacote:tarball:${src}`, {\n              integrity: opts.integrity\n            }).on('integrity', d => { integrity = d })\n          ))\n        return cacheWriter.then(() => {\n          if (integrity) { stream.emit('integrity', integrity) }\n          return pipe(fs.createReadStream(src), stream)\n        })\n      }\n    }, err => stream.emit('error', err))\n    return stream\n  },\n\n  fromManifest (manifest, spec, opts) {\n    return this.tarball(manifest || spec, opts)\n  }\n})\n"]}