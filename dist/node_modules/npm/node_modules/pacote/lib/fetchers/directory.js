'use strict';

var BB = require('bluebird');

var Fetcher = require('../fetch');
var glob = BB.promisify(require('glob'));
var packDir = require('../util/pack-dir');
var path = require('path');
var pipe = BB.promisify(require('mississippi').pipe);
var through = require('mississippi').through;

var readFileAsync = BB.promisify(require('fs').readFile);

var fetchDirectory = module.exports = Object.create(null);

Fetcher.impl(fetchDirectory, {
  // `directory` manifests come from the actual manifest/lockfile data.
  manifest: function manifest(spec, opts) {
    var pkgPath = path.join(spec.fetchSpec, 'package.json');
    var srPath = path.join(spec.fetchSpec, 'npm-shrinkwrap.json');
    return BB.join(readFileAsync(pkgPath).then(JSON.parse).catch({ code: 'ENOENT' }, function (err) {
      err.code = 'ENOPACKAGEJSON';
      throw err;
    }), readFileAsync(srPath).then(JSON.parse).catch({ code: 'ENOENT' }, function () {
      return null;
    }), function (pkg, sr) {
      pkg._shrinkwrap = sr;
      pkg._hasShrinkwrap = !!sr;
      pkg._resolved = spec.fetchSpec;
      pkg._integrity = false; // Don't auto-calculate integrity
      pkg._shasum = false; // Don't auto-calculate shasum either
      return pkg;
    }).then(function (pkg) {
      if (!pkg.bin && pkg.directories && pkg.directories.bin) {
        var dirBin = pkg.directories.bin;
        return glob(path.join(spec.fetchSpec, dirBin, '/**'), { nodir: true }).then(function (matches) {
          matches.forEach(function (filePath) {
            var relative = path.relative(spec.fetchSpec, filePath);
            if (relative && relative[0] !== '.') {
              if (!pkg.bin) {
                pkg.bin = {};
              }
              pkg.bin[path.basename(relative)] = relative;
            }
          });
        }).then(function () {
          return pkg;
        });
      } else {
        return pkg;
      }
    });
  },


  // As of npm@5, the npm installer doesn't pack + install directories: it just
  // creates symlinks. This code is here because `npm pack` still needs the
  // ability to create a tarball from a local directory.
  tarball: function tarball(spec, opts) {
    var _this = this;

    var stream = through();
    this.manifest(spec, opts).then(function (mani) {
      return pipe(_this.fromManifest(mani, spec, opts), stream);
    }).catch(function (err) {
      return stream.emit('error', err);
    });
    return stream;
  },


  // `directory` tarballs are generated in a very similar way to git tarballs.
  fromManifest: function fromManifest(manifest, spec, opts) {
    var stream = through();
    packDir(manifest, manifest._resolved, manifest._resolved, stream, opts).catch(function (err) {
      stream.emit('error', err);
    });
    return stream;
  }
});
//# sourceMappingURL=directory.js.map