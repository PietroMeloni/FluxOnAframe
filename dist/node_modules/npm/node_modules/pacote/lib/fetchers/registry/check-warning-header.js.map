{"version":3,"sources":["../../../../../../../../node_modules/npm/node_modules/pacote/lib/fetchers/registry/check-warning-header.js"],"names":["LRU","require","WARNING_REGEXP","BAD_HOSTS","max","module","exports","checkWarnings","res","registry","opts","headers","has","warnings","raw","forEach","match","w","code","host","message","date","Date","set","log","warn"],"mappings":"AAAA;;AAEA,IAAMA,MAAMC,QAAQ,WAAR,CAAZ;;AAEA,IAAMC,iBAAiB,0CAAvB;AACA,IAAMC,YAAY,IAAIH,GAAJ,CAAQ,EAAEI,KAAK,EAAP,EAAR,CAAlB;;AAEAC,OAAOC,OAAP,GAAiBC,aAAjB;AACA,SAASA,aAAT,CAAwBC,GAAxB,EAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIF,IAAIG,OAAJ,CAAYC,GAAZ,CAAgB,SAAhB,KAA8B,CAACT,UAAUS,GAAV,CAAcH,QAAd,CAAnC,EAA4D;AAC1D,QAAMI,WAAW,EAAjB;AACAL,QAAIG,OAAJ,CAAYG,GAAZ,GAAkB,SAAlB,EAA6BC,OAA7B,CAAqC,aAAK;AACxC,UAAMC,QAAQC,EAAED,KAAF,CAAQd,cAAR,CAAd;AACA,UAAIc,KAAJ,EAAW;AACTH,iBAASG,MAAM,CAAN,CAAT,IAAqB;AACnBE,gBAAMF,MAAM,CAAN,CADa;AAEnBG,gBAAMH,MAAM,CAAN,CAFa;AAGnBI,mBAASJ,MAAM,CAAN,CAHU;AAInBK,gBAAM,IAAIC,IAAJ,CAASN,MAAM,CAAN,CAAT;AAJa,SAArB;AAMD;AACF,KAVD;AAWAb,cAAUoB,GAAV,CAAcd,QAAd,EAAwB,IAAxB;AACA,QAAII,SAAS,KAAT,CAAJ,EAAqB;AACnB,UAAIA,SAAS,KAAT,EAAgBO,OAAhB,CAAwBJ,KAAxB,CAA8B,WAA9B,CAAJ,EAAgD;AAC9CN,aAAKc,GAAL,CAASC,IAAT,CAAc,UAAd,6BAAmDhB,QAAnD;AACD,OAFD,MAEO;AACLC,aAAKc,GAAL,CAASC,IAAT,CAAc,UAAd,8BAAoDhB,QAApD,UAAiEI,SAAS,KAAT,EAAgBO,OAAjF;AACD;AACF;AACD,QAAIP,SAAS,KAAT,CAAJ,EAAqB;AACnB;AACAH,WAAKc,GAAL,CAASC,IAAT,CACE,UADF,qCAEmChB,QAFnC;AAID;AACF;AACF","file":"check-warning-header.js","sourcesContent":["'use strict'\n\nconst LRU = require('lru-cache')\n\nconst WARNING_REGEXP = /^\\s*(\\d{3})\\s+(\\S+)\\s+\"(.*)\"\\s+\"([^\"]+)\"/\nconst BAD_HOSTS = new LRU({ max: 50 })\n\nmodule.exports = checkWarnings\nfunction checkWarnings (res, registry, opts) {\n  if (res.headers.has('warning') && !BAD_HOSTS.has(registry)) {\n    const warnings = {}\n    res.headers.raw()['warning'].forEach(w => {\n      const match = w.match(WARNING_REGEXP)\n      if (match) {\n        warnings[match[1]] = {\n          code: match[1],\n          host: match[2],\n          message: match[3],\n          date: new Date(match[4])\n        }\n      }\n    })\n    BAD_HOSTS.set(registry, true)\n    if (warnings['199']) {\n      if (warnings['199'].message.match(/ENOTFOUND/)) {\n        opts.log.warn('registry', `Using stale data from ${registry} because the host is inaccessible -- are you offline?`)\n      } else {\n        opts.log.warn('registry', `Unexpected warning for ${registry}: ${warnings['199'].message}`)\n      }\n    }\n    if (warnings['111']) {\n      // 111 Revalidation failed -- we're using stale data\n      opts.log.warn(\n        'registry',\n        `Using stale package data from ${registry} due to a request error during revalidation.`\n      )\n    }\n  }\n}\n"]}