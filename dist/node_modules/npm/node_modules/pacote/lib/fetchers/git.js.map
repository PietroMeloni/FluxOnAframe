{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pacote/lib/fetchers/git.js"],"names":["BB","require","cacache","cacheKey","Fetcher","git","mkdirp","promisify","pickManifest","optCheck","osenv","packDir","PassThrough","path","pipe","rimraf","uniqueFilename","fetchGit","module","exports","Object","create","impl","manifest","spec","opts","hosted","getDefaultRepresentation","hostedManifest","plainManifest","fetchSpec","tarball","stream","then","emit","fromManifest","on","i","err","streamError","e","cacheName","_uniqueResolved","_resolved","cacheStream","cache","get","code","withTmp","cloneRepo","_repo","_ref","_rawRef","tmp","saveSpec","replace","HEAD","catch","resolve","Error","https","sshurl","repo","rawRef","gitCommittish","gitRange","name","ref","resolved","sha","_spec","_integrity","_shasum","match","url","isSemver","revs","versions","remoteRefs","refs","shas","cb","tmpPrefix","tmpDir","join","tmpdir","tmpName","disposer","using","SHALLOW_HOSTS","Set","resolvedRef","has","type","shallow","clone"],"mappings":"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","file":"git.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cacache = require('cacache')\nconst cacheKey = require('../util/cache-key')\nconst Fetcher = require('../fetch')\nconst git = require('../util/git')\nconst mkdirp = BB.promisify(require('mkdirp'))\nconst pickManifest = require('npm-pick-manifest')\nconst optCheck = require('../util/opt-check')\nconst osenv = require('osenv')\nconst packDir = require('../util/pack-dir')\nconst PassThrough = require('stream').PassThrough\nconst path = require('path')\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst rimraf = BB.promisify(require('rimraf'))\nconst uniqueFilename = require('unique-filename')\n\n// `git` dependencies are fetched from git repositories and packed up.\nconst fetchGit = module.exports = Object.create(null)\n\nFetcher.impl(fetchGit, {\n  manifest (spec, opts) {\n    opts = optCheck(opts)\n    if (spec.hosted && spec.hosted.getDefaultRepresentation() === 'shortcut') {\n      return hostedManifest(spec, opts)\n    } else {\n      // If it's not a shortcut, don't do fallbacks.\n      return plainManifest(spec.fetchSpec, spec, opts)\n    }\n  },\n\n  tarball (spec, opts) {\n    opts = optCheck(opts)\n    const stream = new PassThrough()\n    this.manifest(spec, opts).then(manifest => {\n      stream.emit('manifest', manifest)\n      return pipe(\n        this.fromManifest(\n          manifest, spec, opts\n        ).on('integrity', i => stream.emit('integrity', i)), stream\n      )\n    }, err => stream.emit('error', err))\n    return stream\n  },\n\n  fromManifest (manifest, spec, opts) {\n    opts = optCheck(opts)\n    let streamError\n    const stream = new PassThrough().on('error', e => { streamError = e })\n    const cacheName = manifest._uniqueResolved || manifest._resolved || ''\n    const cacheStream = (\n      opts.cache &&\n      cacache.get.stream(\n        opts.cache, cacheKey('packed-dir', cacheName), opts\n      ).on('integrity', i => stream.emit('integrity', i))\n    )\n    cacheStream.pipe(stream)\n    cacheStream.on('error', err => {\n      if (err.code !== 'ENOENT') {\n        return stream.emit('error', err)\n      } else {\n        stream.emit('reset')\n        return withTmp(opts, tmp => {\n          if (streamError) { throw streamError }\n          return cloneRepo(\n            spec, manifest._repo, manifest._ref, manifest._rawRef, tmp, opts\n          ).then(HEAD => {\n            if (streamError) { throw streamError }\n            manifest._resolved = spec.saveSpec.replace(/(:?#.*)?$/, `#${HEAD}`)\n            manifest._uniqueResolved = manifest._resolved\n            return packDir(manifest, manifest._uniqueResolved, tmp, stream, opts)\n          })\n        }).catch(err => stream.emit('error', err))\n      }\n    })\n    return stream\n  }\n})\n\nfunction hostedManifest (spec, opts) {\n  return BB.resolve(null).then(() => {\n    if (!spec.hosted.git()) {\n      throw new Error(`No git url for ${spec}`)\n    }\n    return plainManifest(spec.hosted.git(), spec, opts)\n  }).catch(err => {\n    if (!spec.hosted.https()) {\n      throw err\n    }\n    return plainManifest(spec.hosted.https(), spec, opts)\n  }).catch(err => {\n    if (!spec.hosted.sshurl()) {\n      throw err\n    }\n    return plainManifest(spec.hosted.sshurl(), spec, opts)\n  })\n}\n\nfunction plainManifest (repo, spec, opts) {\n  const rawRef = spec.gitCommittish || spec.gitRange\n  return resolve(\n    repo, spec, spec.name, opts\n  ).then(ref => {\n    if (ref) {\n      const resolved = spec.saveSpec.replace(/(?:#.*)?$/, `#${ref.sha}`)\n      return {\n        _repo: repo,\n        _resolved: resolved,\n        _spec: spec,\n        _ref: ref,\n        _rawRef: spec.gitCommittish || spec.gitRange,\n        _uniqueResolved: resolved,\n        _integrity: false,\n        _shasum: false\n      }\n    } else {\n      // We're SOL and need a full clone :(\n      //\n      // If we're confident enough that `rawRef` is a commit SHA,\n      // then we can at least get `finalize-manifest` to cache its result.\n      const resolved = spec.saveSpec.replace(/(?:#.*)?$/, rawRef ? `#${rawRef}` : '')\n      return {\n        _repo: repo,\n        _rawRef: rawRef,\n        _resolved: rawRef && rawRef.match(/^[a-f0-9]{40}$/) && resolved,\n        _uniqueResolved: rawRef && rawRef.match(/^[a-f0-9]{40}$/) && resolved,\n        _integrity: false,\n        _shasum: false\n      }\n    }\n  })\n}\n\nfunction resolve (url, spec, name, opts) {\n  const isSemver = !!spec.gitRange\n  return git.revs(url, opts).then(remoteRefs => {\n    return isSemver\n      ? pickManifest({\n        versions: remoteRefs.versions,\n        'dist-tags': remoteRefs['dist-tags'],\n        name: name\n      }, spec.gitRange, opts)\n      : remoteRefs\n        ? BB.resolve(\n          remoteRefs.refs[spec.gitCommittish] || remoteRefs.refs[remoteRefs.shas[spec.gitCommittish]]\n        )\n        : null\n  })\n}\n\nfunction withTmp (opts, cb) {\n  if (opts.cache) {\n    // cacache has a special facility for working in a tmp dir\n    return cacache.tmp.withTmp(opts.cache, {tmpPrefix: 'git-clone'}, cb)\n  } else {\n    const tmpDir = path.join(osenv.tmpdir(), 'pacote-git-tmp')\n    const tmpName = uniqueFilename(tmpDir, 'git-clone')\n    const tmp = mkdirp(tmpName).then(() => tmpName).disposer(rimraf)\n    return BB.using(tmp, cb)\n  }\n}\n\n// Only certain whitelisted hosted gits support shadow cloning\nconst SHALLOW_HOSTS = new Set(['github', 'gist', 'gitlab', 'bitbucket'])\nfunction cloneRepo (spec, repo, resolvedRef, rawRef, tmp, opts) {\n  const ref = resolvedRef ? resolvedRef.ref : rawRef\n  if (resolvedRef && spec.hosted && SHALLOW_HOSTS.has(spec.hosted.type)) {\n    return git.shallow(repo, ref, tmp, opts)\n  } else {\n    return git.clone(repo, ref, tmp, opts)\n  }\n}\n"]}