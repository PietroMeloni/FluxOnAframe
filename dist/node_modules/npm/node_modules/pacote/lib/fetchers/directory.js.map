{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/pacote/lib/fetchers/directory.js"],"names":["BB","require","Fetcher","glob","promisify","packDir","path","pipe","through","readFileAsync","readFile","fetchDirectory","module","exports","Object","create","impl","manifest","spec","opts","pkgPath","join","fetchSpec","srPath","then","JSON","parse","catch","code","err","pkg","sr","_shrinkwrap","_hasShrinkwrap","_resolved","_integrity","_shasum","bin","directories","dirBin","nodir","matches","forEach","relative","filePath","basename","tarball","stream","fromManifest","mani","emit"],"mappings":"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","file":"directory.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst Fetcher = require('../fetch')\nconst glob = BB.promisify(require('glob'))\nconst packDir = require('../util/pack-dir')\nconst path = require('path')\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst through = require('mississippi').through\n\nconst readFileAsync = BB.promisify(require('fs').readFile)\n\nconst fetchDirectory = module.exports = Object.create(null)\n\nFetcher.impl(fetchDirectory, {\n  // `directory` manifests come from the actual manifest/lockfile data.\n  manifest (spec, opts) {\n    const pkgPath = path.join(spec.fetchSpec, 'package.json')\n    const srPath = path.join(spec.fetchSpec, 'npm-shrinkwrap.json')\n    return BB.join(\n      readFileAsync(pkgPath).then(JSON.parse).catch({code: 'ENOENT'}, err => {\n        err.code = 'ENOPACKAGEJSON'\n        throw err\n      }),\n      readFileAsync(srPath).then(JSON.parse).catch({code: 'ENOENT'}, () => null),\n      (pkg, sr) => {\n        pkg._shrinkwrap = sr\n        pkg._hasShrinkwrap = !!sr\n        pkg._resolved = spec.fetchSpec\n        pkg._integrity = false // Don't auto-calculate integrity\n        pkg._shasum = false // Don't auto-calculate shasum either\n        return pkg\n      }\n    ).then(pkg => {\n      if (!pkg.bin && pkg.directories && pkg.directories.bin) {\n        const dirBin = pkg.directories.bin\n        return glob(path.join(spec.fetchSpec, dirBin, '/**'), {nodir: true}).then(matches => {\n          matches.forEach(filePath => {\n            const relative = path.relative(spec.fetchSpec, filePath)\n            if (relative && relative[0] !== '.') {\n              if (!pkg.bin) { pkg.bin = {} }\n              pkg.bin[path.basename(relative)] = relative\n            }\n          })\n        }).then(() => pkg)\n      } else {\n        return pkg\n      }\n    })\n  },\n\n  // As of npm@5, the npm installer doesn't pack + install directories: it just\n  // creates symlinks. This code is here because `npm pack` still needs the\n  // ability to create a tarball from a local directory.\n  tarball (spec, opts) {\n    const stream = through()\n    this.manifest(spec, opts).then(mani => {\n      return pipe(this.fromManifest(mani, spec, opts), stream)\n    }).catch(err => stream.emit('error', err))\n    return stream\n  },\n\n  // `directory` tarballs are generated in a very similar way to git tarballs.\n  fromManifest (manifest, spec, opts) {\n    const stream = through()\n    packDir(manifest, manifest._resolved, manifest._resolved, stream, opts).catch(err => {\n      stream.emit('error', err)\n    })\n    return stream\n  }\n})\n"]}