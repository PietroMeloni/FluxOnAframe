{"version":3,"sources":["../../../../../node_modules/npm/node_modules/pacote/extract.js"],"names":["BB","require","extractStream","fs","mkdirp","promisify","npa","optCheck","path","rimraf","withTarballStream","truncateAsync","truncate","readFileAsync","readFile","appendFileAsync","appendFile","module","exports","extract","spec","dest","opts","where","startTime","Date","now","tryExtract","stream","then","resolved","pjson","join","str","replace","JSON","stringify","integrity","toString","log","silly","tarStream","resolve","reject","on","setImmediate","xtractor","pipe","catch","err","code","message"],"mappings":"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","file":"extract.js","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst extractStream = require('./lib/extract-stream.js')\nconst fs = require('fs')\nconst mkdirp = BB.promisify(require('mkdirp'))\nconst npa = require('npm-package-arg')\nconst optCheck = require('./lib/util/opt-check.js')\nconst path = require('path')\nconst rimraf = BB.promisify(require('rimraf'))\nconst withTarballStream = require('./lib/with-tarball-stream.js')\n\nconst truncateAsync = BB.promisify(fs.truncate)\nconst readFileAsync = BB.promisify(fs.readFile)\nconst appendFileAsync = BB.promisify(fs.appendFile)\n\nmodule.exports = extract\nfunction extract (spec, dest, opts) {\n  opts = optCheck(opts)\n  spec = npa(spec, opts.where)\n  const startTime = Date.now()\n\n  return withTarballStream(spec, opts, stream => {\n    return tryExtract(spec, stream, dest, opts)\n  })\n    .then(() => {\n      if (!opts.resolved) {\n        const pjson = path.join(dest, 'package.json')\n        return readFileAsync(pjson, 'utf8')\n          .then(str => truncateAsync(pjson)\n            .then(() => appendFileAsync(pjson, str.replace(\n              /}\\s*$/,\n              `\\n,\"_resolved\": ${\n                JSON.stringify(opts.resolved || '')\n              }\\n,\"_integrity\": ${\n                JSON.stringify(opts.integrity || '')\n              }\\n,\"_from\": ${\n                JSON.stringify(spec.toString())\n              }\\n}`\n            ))))\n      }\n    })\n    .then(() => opts.log.silly(\n      'extract',\n      `${spec} extracted to ${dest} (${Date.now() - startTime}ms)`\n    ))\n}\n\nfunction tryExtract (spec, tarStream, dest, opts) {\n  return new BB((resolve, reject) => {\n    tarStream.on('error', reject)\n    setImmediate(resolve)\n  })\n    .then(() => rimraf(dest))\n    .then(() => mkdirp(dest))\n    .then(() => new BB((resolve, reject) => {\n      const xtractor = extractStream(spec, dest, opts)\n      tarStream.on('error', reject)\n      xtractor.on('error', reject)\n      xtractor.on('close', resolve)\n      tarStream.pipe(xtractor)\n    }))\n    .catch(err => {\n      if (err.code === 'EINTEGRITY') {\n        err.message = `Verification failed while extracting ${spec}:\\n${err.message}`\n      }\n      throw err\n    })\n}\n"]}