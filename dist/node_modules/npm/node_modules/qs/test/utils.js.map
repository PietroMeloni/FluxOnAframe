{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/qs/test/utils.js"],"names":["test","require","utils","t","deepEqual","merge","a","oneMerged","foo","first","twoMerged","second","sandwiched","nestedArrays","end"],"mappings":"AAAA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,QAAQD,QAAQ,cAAR,CAAZ;;AAEAD,KAAK,SAAL,EAAgB,UAAUG,CAAV,EAAa;AACzBA,MAAEC,SAAF,CAAYF,MAAMG,KAAN,CAAY,EAAEC,GAAG,GAAL,EAAZ,EAAwB,EAAEA,GAAG,GAAL,EAAxB,CAAZ,EAAiD,EAAEA,GAAG,CAAC,GAAD,EAAM,GAAN,CAAL,EAAjD,EAAoE,sCAApE;;AAEA,QAAIC,YAAYL,MAAMG,KAAN,CAAY,EAAEG,KAAK,KAAP,EAAZ,EAA4B,EAAEA,KAAK,EAAEC,OAAO,KAAT,EAAP,EAA5B,CAAhB;AACAN,MAAEC,SAAF,CAAYG,SAAZ,EAAuB,EAAEC,KAAK,CAAC,KAAD,EAAQ,EAAEC,OAAO,KAAT,EAAR,CAAP,EAAvB,EAA2D,iDAA3D;;AAEA,QAAIC,YAAYR,MAAMG,KAAN,CAAY,EAAEG,KAAK,CAAC,KAAD,EAAQ,EAAEC,OAAO,KAAT,EAAR,CAAP,EAAZ,EAAgD,EAAED,KAAK,EAAEG,QAAQ,KAAV,EAAP,EAAhD,CAAhB;AACAR,MAAEC,SAAF,CAAYM,SAAZ,EAAuB,EAAEF,KAAK,EAAE,GAAG,KAAL,EAAY,GAAG,EAAEC,OAAO,KAAT,EAAf,EAAiCE,QAAQ,KAAzC,EAAP,EAAvB,EAAkF,mDAAlF;;AAEA,QAAIC,aAAaV,MAAMG,KAAN,CAAY,EAAEG,KAAK,CAAC,KAAD,EAAQ,EAAEC,OAAO,KAAT,EAAgBE,QAAQ,KAAxB,EAAR,CAAP,EAAZ,EAA+D,EAAEH,KAAK,KAAP,EAA/D,CAAjB;AACAL,MAAEC,SAAF,CAAYQ,UAAZ,EAAwB,EAAEJ,KAAK,CAAC,KAAD,EAAQ,EAAEC,OAAO,KAAT,EAAgBE,QAAQ,KAAxB,EAAR,EAAyC,KAAzC,CAAP,EAAxB,EAAkF,8DAAlF;;AAEA,QAAIE,eAAeX,MAAMG,KAAN,CAAY,EAAEG,KAAK,CAAC,KAAD,CAAP,EAAZ,EAA8B,EAAEA,KAAK,CAAC,KAAD,EAAQ,OAAR,CAAP,EAA9B,CAAnB;AACAL,MAAEC,SAAF,CAAYS,YAAZ,EAA0B,EAAEL,KAAK,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAP,EAA1B;;AAEAL,MAAEW,GAAF;AACH,CAhBD","file":"utils.js","sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar utils = require('../lib/utils');\n\ntest('merge()', function (t) {\n    t.deepEqual(utils.merge({ a: 'b' }, { a: 'c' }), { a: ['b', 'c'] }, 'merges two objects with the same key');\n\n    var oneMerged = utils.merge({ foo: 'bar' }, { foo: { first: '123' } });\n    t.deepEqual(oneMerged, { foo: ['bar', { first: '123' }] }, 'merges a standalone and an object into an array');\n\n    var twoMerged = utils.merge({ foo: ['bar', { first: '123' }] }, { foo: { second: '456' } });\n    t.deepEqual(twoMerged, { foo: { 0: 'bar', 1: { first: '123' }, second: '456' } }, 'merges a standalone and two objects into an array');\n\n    var sandwiched = utils.merge({ foo: ['bar', { first: '123', second: '456' }] }, { foo: 'baz' });\n    t.deepEqual(sandwiched, { foo: ['bar', { first: '123', second: '456' }, 'baz'] }, 'merges an object sandwiched by two standalones into an array');\n\n    var nestedArrays = utils.merge({ foo: ['baz'] }, { foo: ['bar', 'xyzzy'] });\n    t.deepEqual(nestedArrays, { foo: ['baz', 'bar', 'xyzzy'] });\n\n    t.end();\n});\n"]}