'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var types = require('./types.js');
var MiniPass = require('minipass');

var SLURP = Symbol('slurp');
module.exports = function (_MiniPass) {
  _inherits(ReadEntry, _MiniPass);

  function ReadEntry(header, ex, gex) {
    _classCallCheck(this, ReadEntry);

    var _this = _possibleConstructorReturn(this, (ReadEntry.__proto__ || Object.getPrototypeOf(ReadEntry)).call(this));

    _this.extended = ex;
    _this.globalExtended = gex;
    _this.header = header;
    _this.startBlockSize = 512 * Math.ceil(header.size / 512);
    _this.blockRemain = _this.startBlockSize;
    _this.remain = header.size;
    _this.type = header.type;
    _this.meta = false;
    _this.ignore = false;
    switch (_this.type) {
      case 'File':
      case 'OldFile':
      case 'Link':
      case 'SymbolicLink':
      case 'CharacterDevice':
      case 'BlockDevice':
      case 'Directory':
      case 'FIFO':
      case 'ContiguousFile':
      case 'GNUDumpDir':
        break;

      case 'NextFileHasLongLinkpath':
      case 'NextFileHasLongPath':
      case 'OldGnuLongPath':
      case 'GlobalExtendedHeader':
      case 'ExtendedHeader':
      case 'OldExtendedHeader':
        _this.meta = true;
        break;

      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'
      // it may be worth doing the same, but with a warning.
      default:
        _this.ignore = true;
    }

    _this.path = header.path;
    _this.mode = header.mode;
    if (_this.mode) _this.mode = _this.mode & 4095;
    _this.uid = header.uid;
    _this.gid = header.gid;
    _this.uname = header.uname;
    _this.gname = header.gname;
    _this.size = header.size;
    _this.mtime = header.mtime;
    _this.atime = header.atime;
    _this.ctime = header.ctime;
    _this.linkpath = header.linkpath;
    _this.uname = header.uname;
    _this.gname = header.gname;

    if (ex) _this[SLURP](ex);
    if (gex) _this[SLURP](gex, true);
    return _this;
  }

  _createClass(ReadEntry, [{
    key: 'write',
    value: function write(data) {
      var writeLen = data.length;
      if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');

      var r = this.remain;
      var br = this.blockRemain;
      this.remain = Math.max(0, r - writeLen);
      this.blockRemain = Math.max(0, br - writeLen);
      if (this.ignore) return true;

      if (r >= writeLen) return _get(ReadEntry.prototype.__proto__ || Object.getPrototypeOf(ReadEntry.prototype), 'write', this).call(this, data);

      // r < writeLen
      return _get(ReadEntry.prototype.__proto__ || Object.getPrototypeOf(ReadEntry.prototype), 'write', this).call(this, data.slice(0, r));
    }
  }, {
    key: SLURP,
    value: function value(ex, global) {
      for (var k in ex) {
        // we slurp in everything except for the path attribute in
        // a global extended header, because that's weird.
        if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = ex[k];
      }
    }
  }]);

  return ReadEntry;
}(MiniPass);
//# sourceMappingURL=read-entry.js.map