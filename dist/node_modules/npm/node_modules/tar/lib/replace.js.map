{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/tar/lib/replace.js"],"names":["Buffer","require","hlo","Pack","Parse","fs","fsm","t","path","Header","r","module","exports","opt_","files","cb","opt","file","TypeError","gzip","Array","isArray","length","from","sync","replaceSync","replace","p","Sync","threw","fd","position","openSync","er","code","st","fstatSync","headBuf","alloc","POSITION","size","bufPos","bytes","readSync","Error","h","cksumValid","entryBlockSize","Math","ceil","mtimeCache","set","mtime","streamSync","closeSync","stream","WriteStreamSync","start","pipe","addFilesSync","getPos","cb_","pos","close","onread","read","promise","Promise","resolve","reject","on","flag","onopen","open","fstat","WriteStream","addFilesAsync","then","forEach","charAt","cwd","substr","noResume","onentry","add","entry","end","shift"],"mappings":"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","file":"replace.js","sourcesContent":["'use strict'\nconst Buffer = require('./buffer.js')\n\n// tar -r\nconst hlo = require('./high-level-opt.js')\nconst Pack = require('./pack.js')\nconst Parse = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst t = require('./list.js')\nconst path = require('path')\n\n// starting at the head of the file, read a Header\n// If the checksum is invalid, that's our position to start writing\n// If it is, jump forward by the specified size (round up to 512)\n// and try again.\n// Write the new Pack stream starting there.\n\nconst Header = require('./header.js')\n\nconst r = module.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file)\n    throw new TypeError('file is required')\n\n  if (opt.gzip)\n    throw new TypeError('cannot append to compressed archives')\n\n  if (!files || !Array.isArray(files) || !files.length)\n    throw new TypeError('no files or directories specified')\n\n  files = Array.from(files)\n\n  return opt.sync ? replaceSync(opt, files)\n    : replace(opt, files, cb)\n}\n\nconst replaceSync = (opt, files) => {\n  const p = new Pack.Sync(opt)\n\n  let threw = true\n  let fd\n  let position\n\n  try {\n    try {\n      fd = fs.openSync(opt.file, 'r+')\n    } catch (er) {\n      if (er.code === 'ENOENT')\n        fd = fs.openSync(opt.file, 'w+')\n      else\n        throw er\n    }\n\n    const st = fs.fstatSync(fd)\n    const headBuf = Buffer.alloc(512)\n\n    POSITION: for (position = 0; position < st.size; position += 512) {\n      for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {\n        bytes = fs.readSync(\n          fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos\n        )\n\n        if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b)\n          throw new Error('cannot append to compressed archives')\n\n        if (!bytes)\n          break POSITION\n      }\n\n      let h = new Header(headBuf)\n      if (!h.cksumValid)\n        break\n      let entryBlockSize = 512 * Math.ceil(h.size / 512)\n      if (position + entryBlockSize + 512 > st.size)\n        break\n      // the 512 for the header we just parsed will be added as well\n      // also jump ahead all the blocks for the body\n      position += entryBlockSize\n      if (opt.mtimeCache)\n        opt.mtimeCache.set(h.path, h.mtime)\n    }\n    threw = false\n\n    streamSync(opt, p, position, fd, files)\n  } finally {\n    if (threw)\n      try { fs.closeSync(fd) } catch (er) {}\n  }\n}\n\nconst streamSync = (opt, p, position, fd, files) => {\n  const stream = new fsm.WriteStreamSync(opt.file, {\n    fd: fd,\n    start: position\n  })\n  p.pipe(stream)\n  addFilesSync(p, files)\n}\n\nconst replace = (opt, files, cb) => {\n  files = Array.from(files)\n  const p = new Pack(opt)\n\n  const getPos = (fd, size, cb_) => {\n    const cb = (er, pos) => {\n      if (er)\n        fs.close(fd, _ => cb_(er))\n      else\n        cb_(null, pos)\n    }\n\n    let position = 0\n    if (size === 0)\n      return cb(null, 0)\n\n    let bufPos = 0\n    const headBuf = Buffer.alloc(512)\n    const onread = (er, bytes) => {\n      if (er)\n        return cb(er)\n      bufPos += bytes\n      if (bufPos < 512 && bytes)\n        return fs.read(\n          fd, headBuf, bufPos, headBuf.length - bufPos,\n          position + bufPos, onread\n        )\n\n      if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b)\n        return cb(new Error('cannot append to compressed archives'))\n\n      // truncated header\n      if (bufPos < 512)\n        return cb(null, position)\n\n      const h = new Header(headBuf)\n      if (!h.cksumValid)\n        return cb(null, position)\n\n      const entryBlockSize = 512 * Math.ceil(h.size / 512)\n      if (position + entryBlockSize + 512 > size)\n        return cb(null, position)\n\n      position += entryBlockSize + 512\n      if (position >= size)\n        return cb(null, position)\n\n      if (opt.mtimeCache)\n        opt.mtimeCache.set(h.path, h.mtime)\n      bufPos = 0\n      fs.read(fd, headBuf, 0, 512, position, onread)\n    }\n    fs.read(fd, headBuf, 0, 512, position, onread)\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    p.on('error', reject)\n    let flag = 'r+'\n    const onopen = (er, fd) => {\n      if (er && er.code === 'ENOENT' && flag === 'r+') {\n        flag = 'w+'\n        return fs.open(opt.file, flag, onopen)\n      }\n\n      if (er)\n        return reject(er)\n\n      fs.fstat(fd, (er, st) => {\n        if (er)\n          return reject(er)\n        getPos(fd, st.size, (er, position) => {\n          if (er)\n            return reject(er)\n          const stream = new fsm.WriteStream(opt.file, {\n            fd: fd,\n            start: position\n          })\n          p.pipe(stream)\n          stream.on('error', reject)\n          stream.on('close', resolve)\n          addFilesAsync(p, files)\n        })\n      })\n    }\n    fs.open(opt.file, flag, onopen)\n  })\n\n  return cb ? promise.then(cb, cb) : promise\n}\n\nconst addFilesSync = (p, files) => {\n  files.forEach(file => {\n    if (file.charAt(0) === '@')\n      t({\n        file: path.resolve(p.cwd, file.substr(1)),\n        sync: true,\n        noResume: true,\n        onentry: entry => p.add(entry)\n      })\n    else\n      p.add(file)\n  })\n  p.end()\n}\n\nconst addFilesAsync = (p, files) => {\n  while (files.length) {\n    const file = files.shift()\n    if (file.charAt(0) === '@')\n      return t({\n        file: path.resolve(p.cwd, file.substr(1)),\n        noResume: true,\n        onentry: entry => p.add(entry)\n      }).then(_ => addFilesAsync(p, files))\n    else\n      p.add(file)\n  }\n  p.end()\n}\n"]}