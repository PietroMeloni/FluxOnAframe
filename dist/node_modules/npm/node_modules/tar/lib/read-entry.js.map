{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/tar/lib/read-entry.js"],"names":["types","require","MiniPass","SLURP","Symbol","module","exports","header","ex","gex","extended","globalExtended","startBlockSize","Math","ceil","size","blockRemain","remain","type","meta","ignore","path","mode","uid","gid","uname","gname","mtime","atime","ctime","linkpath","data","writeLen","length","Error","r","br","max","slice","global","k","undefined"],"mappings":"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","file":"read-entry.js","sourcesContent":["'use strict'\nconst types = require('./types.js')\nconst MiniPass = require('minipass')\n\nconst SLURP = Symbol('slurp')\nmodule.exports = class ReadEntry extends MiniPass {\n  constructor (header, ex, gex) {\n    super()\n    this.extended = ex\n    this.globalExtended = gex\n    this.header = header\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\n    this.blockRemain = this.startBlockSize\n    this.remain = header.size\n    this.type = header.type\n    this.meta = false\n    this.ignore = false\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true\n        break\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        this.ignore = true\n    }\n\n    this.path = header.path\n    this.mode = header.mode\n    if (this.mode)\n      this.mode = this.mode & 0o7777\n    this.uid = header.uid\n    this.gid = header.gid\n    this.uname = header.uname\n    this.gname = header.gname\n    this.size = header.size\n    this.mtime = header.mtime\n    this.atime = header.atime\n    this.ctime = header.ctime\n    this.linkpath = header.linkpath\n    this.uname = header.uname\n    this.gname = header.gname\n\n    if (ex) this[SLURP](ex)\n    if (gex) this[SLURP](gex, true)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n\n    const r = this.remain\n    const br = this.blockRemain\n    this.remain = Math.max(0, r - writeLen)\n    this.blockRemain = Math.max(0, br - writeLen)\n    if (this.ignore)\n      return true\n\n    if (r >= writeLen)\n      return super.write(data)\n\n    // r < writeLen\n    return super.write(data.slice(0, r))\n  }\n\n  [SLURP] (ex, global) {\n    for (let k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path'))\n        this[k] = ex[k]\n    }\n  }\n}\n"]}