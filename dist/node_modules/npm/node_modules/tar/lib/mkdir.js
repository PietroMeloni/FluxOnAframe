'use strict';
// wrapper around mkdirp for tar's needs.

// TODO: This should probably be a class, not functionally
// passing around state in a gazillion args.

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
var chownr = require('chownr');

var SymlinkError = function (_Error) {
  _inherits(SymlinkError, _Error);

  function SymlinkError(symlink, path) {
    _classCallCheck(this, SymlinkError);

    var _this = _possibleConstructorReturn(this, (SymlinkError.__proto__ || Object.getPrototypeOf(SymlinkError)).call(this, 'Cannot extract through symbolic link'));

    _this.path = path;
    _this.symlink = symlink;
    return _this;
  }

  _createClass(SymlinkError, [{
    key: 'name',
    get: function get() {
      return 'SylinkError';
    }
  }]);

  return SymlinkError;
}(Error);

var CwdError = function (_Error2) {
  _inherits(CwdError, _Error2);

  function CwdError(path, code) {
    _classCallCheck(this, CwdError);

    var _this2 = _possibleConstructorReturn(this, (CwdError.__proto__ || Object.getPrototypeOf(CwdError)).call(this, code + ': Cannot cd into \'' + path + '\''));

    _this2.path = path;
    _this2.code = code;
    return _this2;
  }

  _createClass(CwdError, [{
    key: 'name',
    get: function get() {
      return 'CwdError';
    }
  }]);

  return CwdError;
}(Error);

var mkdir = module.exports = function (dir, opt, cb) {
  // if there's any overlap between mask and mode,
  // then we'll need an explicit chmod
  var umask = opt.umask;
  var mode = opt.mode | 448;
  var needChmod = (mode & umask) !== 0;

  var uid = opt.uid;
  var gid = opt.gid;
  var doChown = typeof uid === 'number' && typeof gid === 'number' && (uid !== opt.processUid || gid !== opt.processGid);

  var preserve = opt.preserve;
  var unlink = opt.unlink;
  var cache = opt.cache;
  var cwd = opt.cwd;

  var done = function done(er, created) {
    if (er) cb(er);else {
      cache.set(dir, true);
      if (created && doChown) chownr(created, uid, gid, function (er) {
        return done(er);
      });else if (needChmod) fs.chmod(dir, mode, cb);else cb();
    }
  };

  if (cache && cache.get(dir) === true) return done();

  if (dir === cwd) return fs.lstat(dir, function (er, st) {
    if (er || !st.isDirectory()) er = new CwdError(dir, er && er.code || 'ENOTDIR');
    done(er);
  });

  if (preserve) return mkdirp(dir, mode, done);

  var sub = path.relative(cwd, dir);
  var parts = sub.split(/\/|\\/);
  mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done);
};

var mkdir_ = function mkdir_(base, parts, mode, cache, unlink, cwd, created, cb) {
  if (!parts.length) return cb(null, created);
  var p = parts.shift();
  var part = base + '/' + p;
  if (cache.get(part)) return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
  fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
};

var onmkdir = function onmkdir(part, parts, mode, cache, unlink, cwd, created, cb) {
  return function (er) {
    if (er) {
      if (er.path && path.dirname(er.path) === cwd && (er.code === 'ENOTDIR' || er.code === 'ENOENT')) return cb(new CwdError(cwd, er.code));

      fs.lstat(part, function (statEr, st) {
        if (statEr) cb(statEr);else if (st.isDirectory()) mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);else if (unlink) fs.unlink(part, function (er) {
          if (er) return cb(er);
          fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
        });else if (st.isSymbolicLink()) return cb(new SymlinkError(part, part + '/' + parts.join('/')));else cb(er);
      });
    } else {
      created = created || part;
      mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    }
  };
};

var mkdirSync = module.exports.sync = function (dir, opt) {
  // if there's any overlap between mask and mode,
  // then we'll need an explicit chmod
  var umask = opt.umask;
  var mode = opt.mode | 448;
  var needChmod = (mode & umask) !== 0;

  var uid = opt.uid;
  var gid = opt.gid;
  var doChown = typeof uid === 'number' && typeof gid === 'number' && (uid !== opt.processUid || gid !== opt.processGid);

  var preserve = opt.preserve;
  var unlink = opt.unlink;
  var cache = opt.cache;
  var cwd = opt.cwd;

  var done = function done(created) {
    cache.set(dir, true);
    if (created && doChown) chownr.sync(created, uid, gid);
    if (needChmod) fs.chmodSync(dir, mode);
  };

  if (cache && cache.get(dir) === true) return done();

  if (dir === cwd) {
    var ok = false;
    var code = 'ENOTDIR';
    try {
      ok = fs.lstatSync(dir).isDirectory();
    } catch (er) {
      code = er.code;
    } finally {
      if (!ok) throw new CwdError(dir, code);
    }
    done();
    return;
  }

  if (preserve) return done(mkdirp.sync(dir, mode));

  var sub = path.relative(cwd, dir);
  var parts = sub.split(/\/|\\/);
  var created = null;
  for (var p = parts.shift(), part = cwd; p && (part += '/' + p); p = parts.shift()) {

    if (cache.get(part)) continue;

    try {
      fs.mkdirSync(part, mode);
      created = created || part;
      cache.set(part, true);
    } catch (er) {
      if (er.path && path.dirname(er.path) === cwd && (er.code === 'ENOTDIR' || er.code === 'ENOENT')) return new CwdError(cwd, er.code);

      var st = fs.lstatSync(part);
      if (st.isDirectory()) {
        cache.set(part, true);
        continue;
      } else if (unlink) {
        fs.unlinkSync(part);
        fs.mkdirSync(part, mode);
        created = created || part;
        cache.set(part, true);
        continue;
      } else if (st.isSymbolicLink()) return new SymlinkError(part, part + '/' + parts.join('/'));
    }
  }

  return done(created);
};
//# sourceMappingURL=mkdir.js.map