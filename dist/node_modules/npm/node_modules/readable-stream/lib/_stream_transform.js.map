{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/readable-stream/lib/_stream_transform.js"],"names":["module","exports","Transform","Duplex","require","util","inherits","afterTransform","er","data","ts","_transformState","transforming","cb","writecb","emit","Error","writechunk","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","options","call","bind","needTransform","writeencoding","sync","transform","_transform","flush","_flush","on","prefinish","_this","done","prototype","chunk","encoding","_write","n","_destroy","err","_this2","err2","stream","_writableState"],"mappings":"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","file":"_stream_transform.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}"]}