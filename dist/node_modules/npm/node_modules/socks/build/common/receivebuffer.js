"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var ReceiveBuffer = function () {
    function ReceiveBuffer() {
        var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4096;

        _classCallCheck(this, ReceiveBuffer);

        this._buffer = Buffer.allocUnsafe(size);
        this._offset = 0;
        this._originalSize = size;
    }

    _createClass(ReceiveBuffer, [{
        key: "append",
        value: function append(data) {
            if (!Buffer.isBuffer(data)) {
                throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');
            }
            if (this._offset + data.length >= this._buffer.length) {
                var tmp = this._buffer;
                this._buffer = Buffer.allocUnsafe(Math.max(this._buffer.length + this._originalSize, this._buffer.length + data.length));
                tmp.copy(this._buffer);
            }
            data.copy(this._buffer, this._offset);
            return this._offset += data.length;
        }
    }, {
        key: "peek",
        value: function peek(length) {
            if (length > this._offset) {
                throw new Error('Attempted to read beyond the bounds of the managed internal data.');
            }
            return this._buffer.slice(0, length);
        }
    }, {
        key: "get",
        value: function get(length) {
            if (length > this._offset) {
                throw new Error('Attempted to read beyond the bounds of the managed internal data.');
            }
            var value = Buffer.allocUnsafe(length);
            this._buffer.slice(0, length).copy(value);
            this._buffer.copyWithin(0, length, length + this._offset - length);
            this._offset -= length;
            return value;
        }
    }, {
        key: "length",
        get: function get() {
            return this._offset;
        }
    }]);

    return ReceiveBuffer;
}();

exports.ReceiveBuffer = ReceiveBuffer;
//# sourceMappingURL=receivebuffer.js.map
//# sourceMappingURL=receivebuffer.js.map