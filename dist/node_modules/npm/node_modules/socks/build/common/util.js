"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Error wrapper for SocksClient
 */

var SocksClientError = function (_Error) {
    _inherits(SocksClientError, _Error);

    function SocksClientError(message, options) {
        _classCallCheck(this, SocksClientError);

        var _this = _possibleConstructorReturn(this, (SocksClientError.__proto__ || Object.getPrototypeOf(SocksClientError)).call(this, message));

        _this.options = options;
        return _this;
    }

    return SocksClientError;
}(Error);

exports.SocksClientError = SocksClientError;
/**
 * Shuffles a given array.
 * @param array The array to shuffle.
 */
function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var _ref = [array[j], array[i]];
        array[i] = _ref[0];
        array[j] = _ref[1];
    }
}
exports.shuffleArray = shuffleArray;
//# sourceMappingURL=util.js.map
//# sourceMappingURL=util.js.map