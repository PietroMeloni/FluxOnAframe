{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-fetch-npm/src/request.js"],"names":["url","require","Headers","Body","clone","extractContentType","getTotalBytes","PARSED_URL","Symbol","Request","input","init","parsedURL","href","parse","method","body","TypeError","inputBody","call","timeout","size","toUpperCase","redirect","headers","contentType","has","append","follow","undefined","compress","counter","agent","Object","defineProperty","toStringTag","value","writable","enumerable","configurable","format","mixIn","prototype","exports","module","getNodeRequestOptions","request","set","protocol","hostname","test","contentLengthValue","totalBytes","String","assign","raw"],"mappings":"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","file":"request.js","sourcesContent":["'use strict'\n\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nconst url = require('url')\nconst Headers = require('./headers.js')\nconst Body = require('./body.js')\nconst clone = Body.clone\nconst extractContentType = Body.extractContentType\nconst getTotalBytes = Body.getTotalBytes\n\nconst PARSED_URL = Symbol('url')\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n  constructor (input, init) {\n    if (!init) init = {}\n    let parsedURL\n\n    // normalize input\n    if (!(input instanceof Request)) {\n      if (input && input.href) {\n        // in order to support Node.js' Url objects; though WHATWG's URL objects\n        // will fall into this branch also (since their `toString()` will return\n        // `href` property anyway)\n        parsedURL = url.parse(input.href)\n      } else {\n        // coerce input to a string before attempting to parse\n        parsedURL = url.parse(`${input}`)\n      }\n      input = {}\n    } else {\n      parsedURL = url.parse(input.url)\n    }\n\n    let method = init.method || input.method || 'GET'\n\n    if ((init.body != null || (input instanceof Request && input.body !== null)) &&\n      (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body')\n    }\n\n    let inputBody = init.body != null\n      ? init.body\n      : input instanceof Request && input.body !== null\n        ? clone(input)\n        : null\n\n    Body.call(this, inputBody, {\n      timeout: init.timeout || input.timeout || 0,\n      size: init.size || input.size || 0\n    })\n\n    // fetch spec options\n    this.method = method.toUpperCase()\n    this.redirect = init.redirect || input.redirect || 'follow'\n    this.headers = new Headers(init.headers || input.headers || {})\n\n    if (init.body != null) {\n      const contentType = extractContentType(this)\n      if (contentType !== null && !this.headers.has('Content-Type')) {\n        this.headers.append('Content-Type', contentType)\n      }\n    }\n\n    // server only options\n    this.follow = init.follow !== undefined\n      ? init.follow : input.follow !== undefined\n      ? input.follow : 20\n    this.compress = init.compress !== undefined\n      ? init.compress : input.compress !== undefined\n      ? input.compress : true\n    this.counter = init.counter || input.counter || 0\n    this.agent = init.agent || input.agent\n\n    this[PARSED_URL] = parsedURL\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Request',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    })\n  }\n\n  get url () {\n    return url.format(this[PARSED_URL])\n  }\n\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n  clone () {\n    return new Request(this)\n  }\n}\n\nBody.mixIn(Request.prototype)\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n  value: 'RequestPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nexports = module.exports = Request\n\nexports.getNodeRequestOptions = function getNodeRequestOptions (request) {\n  const parsedURL = request[PARSED_URL]\n  const headers = new Headers(request.headers)\n\n  // fetch step 3\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*')\n  }\n\n  // Basic fetch\n  if (!parsedURL.protocol || !parsedURL.hostname) {\n    throw new TypeError('Only absolute URLs are supported')\n  }\n\n  if (!/^https?:$/.test(parsedURL.protocol)) {\n    throw new TypeError('Only HTTP(S) protocols are supported')\n  }\n\n  // HTTP-network-or-cache fetch steps 5-9\n  let contentLengthValue = null\n  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n    contentLengthValue = '0'\n  }\n  if (request.body != null) {\n    const totalBytes = getTotalBytes(request)\n    if (typeof totalBytes === 'number') {\n      contentLengthValue = String(totalBytes)\n    }\n  }\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue)\n  }\n\n  // HTTP-network-or-cache fetch step 12\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)')\n  }\n\n  // HTTP-network-or-cache fetch step 16\n  if (request.compress) {\n    headers.set('Accept-Encoding', 'gzip,deflate')\n  }\n  if (!headers.has('Connection') && !request.agent) {\n    headers.set('Connection', 'close')\n  }\n\n  // HTTP-network fetch step 4\n  // chunked encoding is handled by Node.js\n\n  return Object.assign({}, parsedURL, {\n    method: request.method,\n    headers: headers.raw(),\n    agent: request.agent\n  })\n}\n"]}