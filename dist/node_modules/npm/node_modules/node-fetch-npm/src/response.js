'use strict';

/**
 * response.js
 *
 * Response class provides content decoding
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var STATUS_CODES = require('http').STATUS_CODES;
var Headers = require('./headers.js');
var Body = require('./body.js');
var _clone = Body.clone;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */

var Response = function () {
  function Response(body, opts) {
    _classCallCheck(this, Response);

    if (!opts) opts = {};
    Body.call(this, body, opts);

    this.url = opts.url;
    this.status = opts.status || 200;
    this.statusText = opts.statusText || STATUS_CODES[this.status];

    this.headers = new Headers(opts.headers);

    Object.defineProperty(this, Symbol.toStringTag, {
      value: 'Response',
      writable: false,
      enumerable: false,
      configurable: true
    });
  }

  /**
   * Convenience property representing if the request ended normally
   */


  _createClass(Response, [{
    key: 'clone',


    /**
     * Clone this response
     *
     * @return  Response
     */
    value: function clone() {
      return new Response(_clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok
      });
    }
  }, {
    key: 'ok',
    get: function get() {
      return this.status >= 200 && this.status < 300;
    }
  }]);

  return Response;
}();

Body.mixIn(Response.prototype);

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  value: 'ResponsePrototype',
  writable: false,
  enumerable: false,
  configurable: true
});
module.exports = Response;
//# sourceMappingURL=response.js.map