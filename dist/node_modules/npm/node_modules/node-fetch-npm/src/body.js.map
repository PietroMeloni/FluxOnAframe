{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-fetch-npm/src/body.js"],"names":["Buffer","require","Blob","BUFFER","convert","parseJson","FetchError","Stream","PassThrough","DISTURBED","Symbol","exports","module","Body","body","opts","size","timeout","isBuffer","String","prototype","bodyUsed","arrayBuffer","consumeBody","call","then","buf","buffer","slice","byteOffset","byteLength","blob","ct","headers","get","Object","assign","type","toLowerCase","json","toString","text","textConverted","convertBody","mixIn","proto","getOwnPropertyNames","name","desc","getOwnPropertyDescriptor","defineProperty","Promise","reject","Error","url","resolve","alloc","from","accum","accumBytes","abort","resTimeout","setTimeout","on","err","message","chunk","length","push","clearTimeout","concat","charset","res","str","exec","pop","clone","instance","p1","p2","getBoundary","pipe","extractContentType","getTotalBytes","getLengthSync","_lengthRetrievers","hasKnownLength","writeToStream","dest","end","write","global"],"mappings":"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","file":"body.js","sourcesContent":["'use strict'\n\n/**\n * body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nconst Buffer = require('safe-buffer').Buffer\n\nconst Blob = require('./blob.js')\nconst BUFFER = Blob.BUFFER\nconst convert = require('encoding').convert\nconst parseJson = require('json-parse-better-errors')\nconst FetchError = require('./fetch-error.js')\nconst Stream = require('stream')\n\nconst PassThrough = Stream.PassThrough\nconst DISTURBED = Symbol('disturbed')\n\n/**\n * Body class\n *\n * Cannot use ES6 class because Body must be called with .call().\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexports = module.exports = Body\n\nfunction Body (body, opts) {\n  if (!opts) opts = {}\n  const size = opts.size == null ? 0 : opts.size\n  const timeout = opts.timeout == null ? 0 : opts.timeout\n  if (body == null) {\n    // body is undefined or null\n    body = null\n  } else if (typeof body === 'string') {\n    // body is string\n  } else if (body instanceof Blob) {\n    // body is blob\n  } else if (Buffer.isBuffer(body)) {\n    // body is buffer\n  } else if (body instanceof Stream) {\n    // body is stream\n  } else {\n    // none of the above\n    // coerce to string\n    body = String(body)\n  }\n  this.body = body\n  this[DISTURBED] = false\n  this.size = size\n  this.timeout = timeout\n}\n\nBody.prototype = {\n  get bodyUsed () {\n    return this[DISTURBED]\n  },\n\n  /**\n   * Decode response as ArrayBuffer\n   *\n   * @return  Promise\n   */\n  arrayBuffer () {\n    return consumeBody.call(this).then(buf => buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength))\n  },\n\n  /**\n   * Return raw response as Blob\n   *\n   * @return Promise\n   */\n  blob () {\n    let ct = (this.headers && this.headers.get('content-type')) || ''\n    return consumeBody.call(this).then(buf => Object.assign(\n      // Prevent copying\n      new Blob([], {\n        type: ct.toLowerCase()\n      }),\n      {\n        [BUFFER]: buf\n      }\n    ))\n  },\n\n  /**\n   * Decode response as json\n   *\n   * @return  Promise\n   */\n  json () {\n    return consumeBody.call(this).then(buffer => parseJson(buffer.toString()))\n  },\n\n  /**\n   * Decode response as text\n   *\n   * @return  Promise\n   */\n  text () {\n    return consumeBody.call(this).then(buffer => buffer.toString())\n  },\n\n  /**\n   * Decode response as buffer (non-spec api)\n   *\n   * @return  Promise\n   */\n  buffer () {\n    return consumeBody.call(this)\n  },\n\n  /**\n   * Decode response as text, while automatically detecting the encoding and\n   * trying to decode to UTF-8 (non-spec api)\n   *\n   * @return  Promise\n   */\n  textConverted () {\n    return consumeBody.call(this).then(buffer => convertBody(buffer, this.headers))\n  }\n\n}\n\nBody.mixIn = function (proto) {\n  for (const name of Object.getOwnPropertyNames(Body.prototype)) {\n    // istanbul ignore else: future proof\n    if (!(name in proto)) {\n      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name)\n      Object.defineProperty(proto, name, desc)\n    }\n  }\n}\n\n/**\n * Decode buffers into utf-8 string\n *\n * @return  Promise\n */\nfunction consumeBody (body) {\n  if (this[DISTURBED]) {\n    return Body.Promise.reject(new Error(`body used already for: ${this.url}`))\n  }\n\n  this[DISTURBED] = true\n\n  // body is null\n  if (this.body === null) {\n    return Body.Promise.resolve(Buffer.alloc(0))\n  }\n\n  // body is string\n  if (typeof this.body === 'string') {\n    return Body.Promise.resolve(Buffer.from(this.body))\n  }\n\n  // body is blob\n  if (this.body instanceof Blob) {\n    return Body.Promise.resolve(this.body[BUFFER])\n  }\n\n  // body is buffer\n  if (Buffer.isBuffer(this.body)) {\n    return Body.Promise.resolve(this.body)\n  }\n\n  // istanbul ignore if: should never happen\n  if (!(this.body instanceof Stream)) {\n    return Body.Promise.resolve(Buffer.alloc(0))\n  }\n\n  // body is stream\n  // get ready to actually consume the body\n  let accum = []\n  let accumBytes = 0\n  let abort = false\n\n  return new Body.Promise((resolve, reject) => {\n    let resTimeout\n\n    // allow timeout on slow response body\n    if (this.timeout) {\n      resTimeout = setTimeout(() => {\n        abort = true\n        reject(new FetchError(`Response timeout while trying to fetch ${this.url} (over ${this.timeout}ms)`, 'body-timeout'))\n      }, this.timeout)\n    }\n\n    // handle stream error, such as incorrect content-encoding\n    this.body.on('error', err => {\n      reject(new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, 'system', err))\n    })\n\n    this.body.on('data', chunk => {\n      if (abort || chunk === null) {\n        return\n      }\n\n      if (this.size && accumBytes + chunk.length > this.size) {\n        abort = true\n        reject(new FetchError(`content size at ${this.url} over limit: ${this.size}`, 'max-size'))\n        return\n      }\n\n      accumBytes += chunk.length\n      accum.push(chunk)\n    })\n\n    this.body.on('end', () => {\n      if (abort) {\n        return\n      }\n\n      clearTimeout(resTimeout)\n      resolve(Buffer.concat(accum))\n    })\n  })\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody (buffer, headers) {\n  const ct = headers.get('content-type')\n  let charset = 'utf-8'\n  let res, str\n\n  // header\n  if (ct) {\n    res = /charset=([^;]*)/i.exec(ct)\n  }\n\n  // no charset in content type, peek at response body for at most 1024 bytes\n  str = buffer.slice(0, 1024).toString()\n\n  // html5\n  if (!res && str) {\n    res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str)\n  }\n\n  // html4\n  if (!res && str) {\n    res = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str)\n\n    if (res) {\n      res = /charset=(.*)/i.exec(res.pop())\n    }\n  }\n\n  // xml\n  if (!res && str) {\n    res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str)\n  }\n\n  // found charset\n  if (res) {\n    charset = res.pop()\n\n    // prevent decode issues when sites use incorrect encoding\n    // ref: https://hsivonen.fi/encoding-menu/\n    if (charset === 'gb2312' || charset === 'gbk') {\n      charset = 'gb18030'\n    }\n  }\n\n  // turn raw buffers into a single utf-8 buffer\n  return convert(\n    buffer\n    , 'UTF-8'\n    , charset\n  ).toString()\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nexports.clone = function clone (instance) {\n  let p1, p2\n  let body = instance.body\n\n  // don't allow cloning a used body\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used')\n  }\n\n  // check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n  if ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n    // tee instance body\n    p1 = new PassThrough()\n    p2 = new PassThrough()\n    body.pipe(p1)\n    body.pipe(p2)\n    // set instance body to teed body and return the other teed body\n    instance.body = p1\n    body = p2\n  }\n\n  return body\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present and non-null.\n *\n * @param   Mixed  instance  Response or Request instance\n */\nexports.extractContentType = function extractContentType (instance) {\n  const body = instance.body\n\n  // istanbul ignore if: Currently, because of a guard in Request, body\n  // can never be null. Included here for completeness.\n  if (body === null) {\n    // body is null\n    return null\n  } else if (typeof body === 'string') {\n    // body is string\n    return 'text/plain;charset=UTF-8'\n  } else if (body instanceof Blob) {\n    // body is blob\n    return body.type || null\n  } else if (Buffer.isBuffer(body)) {\n    // body is buffer\n    return null\n  } else if (typeof body.getBoundary === 'function') {\n    // detect form data input from form-data module\n    return `multipart/form-data;boundary=${body.getBoundary()}`\n  } else {\n    // body is stream\n    // can't really do much about this\n    return null\n  }\n}\n\nexports.getTotalBytes = function getTotalBytes (instance) {\n  const body = instance.body\n\n  // istanbul ignore if: included for completion\n  if (body === null) {\n    // body is null\n    return 0\n  } else if (typeof body === 'string') {\n    // body is string\n    return Buffer.byteLength(body)\n  } else if (body instanceof Blob) {\n    // body is blob\n    return body.size\n  } else if (Buffer.isBuffer(body)) {\n    // body is buffer\n    return body.length\n  } else if (body && typeof body.getLengthSync === 'function') {\n    // detect form data input from form-data module\n    if ((\n      // 1.x\n      body._lengthRetrievers &&\n      body._lengthRetrievers.length === 0\n    ) || (\n      // 2.x\n      body.hasKnownLength && body.hasKnownLength()\n    )) {\n      return body.getLengthSync()\n    }\n    return null\n  } else {\n    // body is stream\n    // can't really do much about this\n    return null\n  }\n}\n\nexports.writeToStream = function writeToStream (dest, instance) {\n  const body = instance.body\n\n  if (body === null) {\n    // body is null\n    dest.end()\n  } else if (typeof body === 'string') {\n    // body is string\n    dest.write(body)\n    dest.end()\n  } else if (body instanceof Blob) {\n    // body is blob\n    dest.write(body[BUFFER])\n    dest.end()\n  } else if (Buffer.isBuffer(body)) {\n    // body is buffer\n    dest.write(body)\n    dest.end()\n  } else {\n    // body is stream\n    body.pipe(dest)\n  }\n}\n\n// expose Promise\nBody.Promise = global.Promise\n"]}