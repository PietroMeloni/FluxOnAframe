{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/node-fetch-npm/src/index.js"],"names":["url","require","http","https","zlib","PassThrough","Body","writeToStream","Response","Headers","Request","getNodeRequestOptions","FetchError","isURL","exports","module","fetch","uri","opts","Promise","Error","resolve","reject","request","options","send","protocol","headers","host","req","reqTimeout","timeout","once","setTimeout","abort","on","clearTimeout","err","message","isRedirect","res","statusCode","redirect","counter","follow","location","resolvedUrl","redirectURL","test","parse","hostname","delete","method","body","Object","keys","name","Array","isArray","val","append","has","set","get","pipe","responseOptions","status","statusText","statusMessage","size","codings","compress","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","raw","chunk","createInflate","createInflateRaw","code","global"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * index.js\n *\n * a request API compatible with window.fetch\n */\n\nconst url = require('url')\nconst http = require('http')\nconst https = require('https')\nconst zlib = require('zlib')\nconst PassThrough = require('stream').PassThrough\n\nconst Body = require('./body.js')\nconst writeToStream = Body.writeToStream\nconst Response = require('./response')\nconst Headers = require('./headers')\nconst Request = require('./request')\nconst getNodeRequestOptions = Request.getNodeRequestOptions\nconst FetchError = require('./fetch-error')\nconst isURL = /^https?:/\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nexports = module.exports = fetch\nfunction fetch (uri, opts) {\n  // allow custom promise\n  if (!fetch.Promise) {\n    throw new Error('native promise missing, set fetch.Promise to your favorite alternative')\n  }\n\n  Body.Promise = fetch.Promise\n\n  // wrap http.request into fetch\n  return new fetch.Promise((resolve, reject) => {\n    // build request object\n    const request = new Request(uri, opts)\n    const options = getNodeRequestOptions(request)\n\n    const send = (options.protocol === 'https:' ? https : http).request\n\n    // http.request only support string as host header, this hack make custom host header possible\n    if (options.headers.host) {\n      options.headers.host = options.headers.host[0]\n    }\n\n    // send request\n    const req = send(options)\n    let reqTimeout\n\n    if (request.timeout) {\n      req.once('socket', socket => {\n        reqTimeout = setTimeout(() => {\n          req.abort()\n          reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'))\n        }, request.timeout)\n      })\n    }\n\n    req.on('error', err => {\n      clearTimeout(reqTimeout)\n      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err))\n    })\n\n    req.on('response', res => {\n      clearTimeout(reqTimeout)\n\n      // handle redirect\n      if (fetch.isRedirect(res.statusCode) && request.redirect !== 'manual') {\n        if (request.redirect === 'error') {\n          reject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'))\n          return\n        }\n\n        if (request.counter >= request.follow) {\n          reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'))\n          return\n        }\n\n        if (!res.headers.location) {\n          reject(new FetchError(`redirect location header missing at: ${request.url}`, 'invalid-redirect'))\n          return\n        }\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of request:\n        // https://github.com/request/request/blob/b12a6245/lib/redirect.js#L134-L138\n        const resolvedUrl = url.resolve(request.url, res.headers.location)\n        let redirectURL = ''\n        if (!isURL.test(res.headers.location)) {\n          redirectURL = url.parse(resolvedUrl)\n        } else {\n          redirectURL = url.parse(res.headers.location)\n        }\n        if (url.parse(request.url).hostname !== redirectURL.hostname) {\n          request.headers.delete('authorization')\n        }\n\n        // per fetch spec, for POST request with 301/302 response, or any request with 303 response, use GET when following redirect\n        if (res.statusCode === 303 ||\n          ((res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST')) {\n          request.method = 'GET'\n          request.body = null\n          request.headers.delete('content-length')\n        }\n\n        request.counter++\n\n        resolve(fetch(resolvedUrl, request))\n        return\n      }\n\n      // normalize location header for manual redirect mode\n      const headers = new Headers()\n      for (const name of Object.keys(res.headers)) {\n        if (Array.isArray(res.headers[name])) {\n          for (const val of res.headers[name]) {\n            headers.append(name, val)\n          }\n        } else {\n          headers.append(name, res.headers[name])\n        }\n      }\n      if (request.redirect === 'manual' && headers.has('location')) {\n        headers.set('location', url.resolve(request.url, headers.get('location')))\n      }\n\n      // prepare response\n      let body = res.pipe(new PassThrough())\n      const responseOptions = {\n        url: request.url,\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: headers,\n        size: request.size,\n        timeout: request.timeout\n      }\n\n      // HTTP-network fetch step 16.1.2\n      const codings = headers.get('Content-Encoding')\n\n      // HTTP-network fetch step 16.1.3: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n        resolve(new Response(body, responseOptions))\n        return\n      }\n\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      }\n\n      // for gzip\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = body.pipe(zlib.createGunzip(zlibOptions))\n        resolve(new Response(body, responseOptions))\n        return\n      }\n\n      // for deflate\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = res.pipe(new PassThrough())\n        raw.once('data', chunk => {\n          // see http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = body.pipe(zlib.createInflate(zlibOptions))\n          } else {\n            body = body.pipe(zlib.createInflateRaw(zlibOptions))\n          }\n          resolve(new Response(body, responseOptions))\n        })\n        return\n      }\n\n      // otherwise, use response as-is\n      resolve(new Response(body, responseOptions))\n    })\n\n    writeToStream(req, request)\n  })\n};\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = code => code === 301 || code === 302 || code === 303 || code === 307 || code === 308\n\n// expose Promise\nfetch.Promise = global.Promise\nexports.Headers = Headers\nexports.Request = Request\nexports.Response = Response\nexports.FetchError = FetchError\n"]}