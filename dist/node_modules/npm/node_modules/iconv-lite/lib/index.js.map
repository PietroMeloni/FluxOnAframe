{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/iconv-lite/lib/index.js"],"names":["Buffer","require","bomHandling","iconv","module","exports","encodings","defaultCharUnicode","defaultCharSingleByte","encode","str","encoding","options","encoder","getEncoder","res","write","trail","end","length","concat","decode","buf","skipDecodeWarning","console","error","from","decoder","getDecoder","encodingExists","enc","getCodec","e","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecOptions","codec","codecDef","key","encodingName","type","Error","toLowerCase","replace","bomAware","addBOM","PrependBOM","stripBOM","StripBOM","nodeVer","process","versions","node","nodeVerArr","split","map","Number"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"]}