{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/iconv-lite/encodings/utf16.js"],"names":["Buffer","require","exports","utf16be","Utf16BECodec","prototype","encoder","Utf16BEEncoder","decoder","Utf16BEDecoder","bomAware","write","str","buf","from","i","length","tmp","end","overflowByte","buf2","alloc","j","slice","toString","utf16","Utf16Codec","codecOptions","iconv","Utf16Encoder","Utf16Decoder","options","codec","addBOM","undefined","getEncoder","initialBytes","initialBytesLen","push","concat","encoding","detectEncoding","defaultEncoding","getDecoder","res","trail","enc","asciiCharsLE","asciiCharsBE","_len","Math","min"],"mappings":"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","file":"utf16.js","sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n"]}