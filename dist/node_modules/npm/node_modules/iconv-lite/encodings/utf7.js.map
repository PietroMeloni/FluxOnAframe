{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/iconv-lite/encodings/utf7.js"],"names":["Buffer","require","exports","utf7","Utf7Codec","unicode11utf7","codecOptions","iconv","prototype","encoder","Utf7Encoder","decoder","Utf7Decoder","bomAware","nonDirectChars","options","codec","write","str","from","replace","chunk","encode","toString","bind","end","inBase64","base64Accum","base64Regex","base64Chars","i","test","String","fromCharCode","plusChar","charCodeAt","minusChar","andChar","buf","res","lastI","length","decode","slice","b64str","canBeDecoded","utf7imap","Utf7IMAPCodec","Utf7IMAPEncoder","Utf7IMAPDecoder","alloc","base64AccumIdx","bufIdx","uChar","base64IMAPChars"],"mappings":"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","file":"utf7.js","sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"]}