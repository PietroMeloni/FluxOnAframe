{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/iconv-lite/encodings/sbcs-codec.js"],"names":["Buffer","require","exports","_sbcs","SBCSCodec","codecOptions","iconv","Error","chars","length","type","asciiString","i","String","fromCharCode","decodeBuf","from","encodeBuf","alloc","defaultCharSingleByte","charCodeAt","prototype","encoder","SBCSEncoder","decoder","SBCSDecoder","options","codec","write","str","buf","end","newBuf","idx1","idx2","toString"],"mappings":"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","file":"sbcs-codec.js","sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = new Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = new Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n"]}