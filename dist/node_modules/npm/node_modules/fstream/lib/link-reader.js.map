{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fstream/lib/link-reader.js"],"names":["module","exports","LinkReader","fs","require","inherits","Reader","props","self","Error","type","Link","SymbolicLink","call","prototype","_stat","currentStat","readlink","_path","er","linkpath","error","emit","_read","_paused","_ended"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEAA,OAAOC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,KAAKC,QAAQ,aAAR,CAAT;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,SAASF,QAAQ,aAAR,CAAb;;AAEAC,SAASH,UAAT,EAAqBI,MAArB;;AAEA,SAASJ,UAAT,CAAqBK,KAArB,EAA4B;AAC1B,MAAIC,OAAO,IAAX;AACA,MAAI,EAAEA,gBAAgBN,UAAlB,CAAJ,EAAmC;AACjC,UAAM,IAAIO,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,MAAI,EAAGF,MAAMG,IAAN,KAAe,MAAf,IAAyBH,MAAMI,IAAhC,IACHJ,MAAMG,IAAN,KAAe,cAAf,IAAiCH,MAAMK,YADtC,CAAJ,EAC0D;AACxD,UAAM,IAAIH,KAAJ,CAAU,mBAAmBF,MAAMG,IAAnC,CAAN;AACD;;AAEDJ,SAAOO,IAAP,CAAYL,IAAZ,EAAkBD,KAAlB;AACD;;AAED;AACA;AACA;AACA;AACAL,WAAWY,SAAX,CAAqBC,KAArB,GAA6B,UAAUC,WAAV,EAAuB;AAClD,MAAIR,OAAO,IAAX;AACAL,KAAGc,QAAH,CAAYT,KAAKU,KAAjB,EAAwB,UAAUC,EAAV,EAAcC,QAAd,EAAwB;AAC9C,QAAID,EAAJ,EAAQ,OAAOX,KAAKa,KAAL,CAAWF,EAAX,CAAP;AACRX,SAAKY,QAAL,GAAgBZ,KAAKD,KAAL,CAAWa,QAAX,GAAsBA,QAAtC;AACAZ,SAAKc,IAAL,CAAU,UAAV,EAAsBF,QAAtB;AACAd,WAAOQ,SAAP,CAAiBC,KAAjB,CAAuBF,IAAvB,CAA4BL,IAA5B,EAAkCQ,WAAlC;AACD,GALD;AAMD,CARD;;AAUAd,WAAWY,SAAX,CAAqBS,KAArB,GAA6B,YAAY;AACvC,MAAIf,OAAO,IAAX;AACA,MAAIA,KAAKgB,OAAT,EAAkB;AAClB;AACA;AACA,MAAI,CAAChB,KAAKiB,MAAV,EAAkB;AAChBjB,SAAKc,IAAL,CAAU,KAAV;AACAd,SAAKc,IAAL,CAAU,OAAV;AACAd,SAAKiB,MAAL,GAAc,IAAd;AACD;AACF,CAVD","file":"link-reader.js","sourcesContent":["// Basically just a wrapper around an fs.readlink\n//\n// XXX: Enhance this to support the Link type, by keeping\n// a lookup table of {<dev+inode>:<path>}, so that hardlinks\n// can be preserved in tarballs.\n\nmodule.exports = LinkReader\n\nvar fs = require('graceful-fs')\nvar inherits = require('inherits')\nvar Reader = require('./reader.js')\n\ninherits(LinkReader, Reader)\n\nfunction LinkReader (props) {\n  var self = this\n  if (!(self instanceof LinkReader)) {\n    throw new Error('LinkReader must be called as constructor.')\n  }\n\n  if (!((props.type === 'Link' && props.Link) ||\n    (props.type === 'SymbolicLink' && props.SymbolicLink))) {\n    throw new Error('Non-link type ' + props.type)\n  }\n\n  Reader.call(self, props)\n}\n\n// When piping a LinkReader into a LinkWriter, we have to\n// already have the linkpath property set, so that has to\n// happen *before* the \"ready\" event, which means we need to\n// override the _stat method.\nLinkReader.prototype._stat = function (currentStat) {\n  var self = this\n  fs.readlink(self._path, function (er, linkpath) {\n    if (er) return self.error(er)\n    self.linkpath = self.props.linkpath = linkpath\n    self.emit('linkpath', linkpath)\n    Reader.prototype._stat.call(self, currentStat)\n  })\n}\n\nLinkReader.prototype._read = function () {\n  var self = this\n  if (self._paused) return\n  // basically just a no-op, since we got all the info we need\n  // from the _stat method\n  if (!self._ended) {\n    self.emit('end')\n    self.emit('close')\n    self._ended = true\n  }\n}\n"]}