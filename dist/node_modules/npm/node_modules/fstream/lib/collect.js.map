{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/fstream/lib/collect.js"],"names":["module","exports","collect","stream","_collected","_paused","on","bind","pause","save","buf","b","Buffer","isBuffer","length","push","saveEntry","entryBuffer","e","proxyPause","p","pipe","orig","dest","unblockEntry","entry","resume","add","emit","removeListener","forEach"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAkBC,MAAlB,EAA0B;AACxB,MAAIA,OAAOC,UAAX,EAAuB;;AAEvB,MAAID,OAAOE,OAAX,EAAoB,OAAOF,OAAOG,EAAP,CAAU,QAAV,EAAoBJ,QAAQK,IAAR,CAAa,IAAb,EAAmBJ,MAAnB,CAApB,CAAP;;AAEpBA,SAAOC,UAAP,GAAoB,IAApB;AACAD,SAAOK,KAAP;;AAEAL,SAAOG,EAAP,CAAU,MAAV,EAAkBG,IAAlB;AACAN,SAAOG,EAAP,CAAU,KAAV,EAAiBG,IAAjB;AACA,MAAIC,MAAM,EAAV;AACA,WAASD,IAAT,CAAeE,CAAf,EAAkB;AAChB,QAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2BA,IAAI,IAAIC,MAAJ,CAAWD,CAAX,CAAJ;AAC3B,QAAIC,OAAOC,QAAP,CAAgBF,CAAhB,KAAsB,CAACA,EAAEG,MAA7B,EAAqC;AACrCJ,QAAIK,IAAJ,CAASJ,CAAT;AACD;;AAEDR,SAAOG,EAAP,CAAU,OAAV,EAAmBU,SAAnB;AACA,MAAIC,cAAc,EAAlB;AACA,WAASD,SAAT,CAAoBE,CAApB,EAAuB;AACrBhB,YAAQgB,CAAR;AACAD,gBAAYF,IAAZ,CAAiBG,CAAjB;AACD;;AAEDf,SAAOG,EAAP,CAAU,OAAV,EAAmBa,UAAnB;AACA,WAASA,UAAT,CAAqBC,CAArB,EAAwB;AACtBA,MAAEZ,KAAF;AACD;;AAED;AACA;AACA;AACAL,SAAOkB,IAAP,GAAe,UAAUC,IAAV,EAAgB;AAC7B,WAAO,UAAUC,IAAV,EAAgB;AACrB;;AAEA;AACA;AACA,UAAIL,IAAI,CAAR,CACC,CAAC,SAASM,YAAT,GAAyB;AACzB,YAAIC,QAAQR,YAAYC,GAAZ,CAAZ;AACA;AACA,YAAI,CAACO,KAAL,EAAY,OAAOC,QAAP;AACZD,cAAMnB,EAAN,CAAS,KAAT,EAAgBkB,YAAhB;AACA,YAAID,IAAJ,EAAUA,KAAKI,GAAL,CAASF,KAAT,EAAV,KACKtB,OAAOyB,IAAP,CAAY,OAAZ,EAAqBH,KAArB;AACN,OAPA;;AASD,eAASC,MAAT,GAAmB;AACjBvB,eAAO0B,cAAP,CAAsB,OAAtB,EAA+Bb,SAA/B;AACAb,eAAO0B,cAAP,CAAsB,MAAtB,EAA8BpB,IAA9B;AACAN,eAAO0B,cAAP,CAAsB,KAAtB,EAA6BpB,IAA7B;;AAEAN,eAAOkB,IAAP,GAAcC,IAAd;AACA,YAAIC,IAAJ,EAAUpB,OAAOkB,IAAP,CAAYE,IAAZ;;AAEVb,YAAIoB,OAAJ,CAAY,UAAUnB,CAAV,EAAa;AACvB,cAAIA,CAAJ,EAAOR,OAAOyB,IAAP,CAAY,MAAZ,EAAoBjB,CAApB,EAAP,KACKR,OAAOyB,IAAP,CAAY,KAAZ;AACN,SAHD;;AAKAzB,eAAOuB,MAAP;AACD;;AAED,aAAOH,IAAP;AACD,KAhCD;AAiCD,GAlCa,CAkCXpB,OAAOkB,IAlCI,CAAd;AAmCD","file":"collect.js","sourcesContent":["module.exports = collect\n\nfunction collect (stream) {\n  if (stream._collected) return\n\n  if (stream._paused) return stream.on('resume', collect.bind(null, stream))\n\n  stream._collected = true\n  stream.pause()\n\n  stream.on('data', save)\n  stream.on('end', save)\n  var buf = []\n  function save (b) {\n    if (typeof b === 'string') b = new Buffer(b)\n    if (Buffer.isBuffer(b) && !b.length) return\n    buf.push(b)\n  }\n\n  stream.on('entry', saveEntry)\n  var entryBuffer = []\n  function saveEntry (e) {\n    collect(e)\n    entryBuffer.push(e)\n  }\n\n  stream.on('proxy', proxyPause)\n  function proxyPause (p) {\n    p.pause()\n  }\n\n  // replace the pipe method with a new version that will\n  // unlock the buffered stuff.  if you just call .pipe()\n  // without a destination, then it'll re-play the events.\n  stream.pipe = (function (orig) {\n    return function (dest) {\n      // console.error(' === open the pipes', dest && dest.path)\n\n      // let the entries flow through one at a time.\n      // Once they're all done, then we can resume completely.\n      var e = 0\n      ;(function unblockEntry () {\n        var entry = entryBuffer[e++]\n        // console.error(\" ==== unblock entry\", entry && entry.path)\n        if (!entry) return resume()\n        entry.on('end', unblockEntry)\n        if (dest) dest.add(entry)\n        else stream.emit('entry', entry)\n      })()\n\n      function resume () {\n        stream.removeListener('entry', saveEntry)\n        stream.removeListener('data', save)\n        stream.removeListener('end', save)\n\n        stream.pipe = orig\n        if (dest) stream.pipe(dest)\n\n        buf.forEach(function (b) {\n          if (b) stream.emit('data', b)\n          else stream.emit('end')\n        })\n\n        stream.resume()\n      }\n\n      return dest\n    }\n  })(stream.pipe)\n}\n"]}