{"version":3,"sources":["../../../../../node_modules/npm/node_modules/aws4/aws4.js"],"names":["aws4","exports","url","require","querystring","crypto","lru","credentialsCache","hmac","key","string","encoding","createHmac","update","digest","hash","createHash","encodeRfc3986","urlEncodedString","replace","c","charCodeAt","toString","toUpperCase","RequestSigner","request","credentials","parse","headers","hostParts","matchHost","hostname","host","Host","defaultCredentials","service","region","method","body","createHost","port","isCodeCommitGit","prototype","match","slice","reverse","isSingleRegion","indexOf","prepareRequest","parsePath","query","signQuery","parsedPath","sessionToken","datetime","getDateTime","accessKeyId","credentialString","signedHeaders","doNotModifyHeaders","Buffer","byteLength","Authorization","authorization","sign","signature","authHeader","path","formatPath","date","Date","toISOString","getDate","substr","join","cacheKey","secretAccessKey","kDate","kRegion","kService","kCredentials","get","set","stringToSign","canonicalString","pathStr","queryStr","normalizePath","decodePath","doNotEncodePath","decodeSlashesInPath","firstValOnly","bodyHash","stringify","Object","keys","sort","reduce","obj","Array","isArray","split","piece","pop","decodeURIComponent","push","encodeURIComponent","canonicalHeaders","trimAll","header","trim","a","b","toLowerCase","map","env","process","AWS_ACCESS_KEY_ID","AWS_ACCESS_KEY","AWS_SECRET_ACCESS_KEY","AWS_SECRET_KEY","AWS_SESSION_TOKEN","queryIx","test"],"mappings":"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","file":"aws4.js","sourcesContent":["var aws4 = exports,\n    url = require('url'),\n    querystring = require('querystring'),\n    crypto = require('crypto'),\n    lru = require('./lru'),\n    credentialsCache = lru(1000)\n\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\nfunction hmac(key, string, encoding) {\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)\n}\n\nfunction hash(string, encoding) {\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n\n  if (typeof request === 'string') request = url.parse(request)\n\n  var headers = request.headers = (request.headers || {}),\n      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host)\n\n  this.request = request\n  this.credentials = credentials || this.defaultCredentials()\n\n  this.service = request.service || hostParts[0] || ''\n  this.region = request.region || hostParts[1] || 'us-east-1'\n\n  // SES uses a different domain from the service name\n  if (this.service === 'email') this.service = 'ses'\n\n  if (!request.method && request.body)\n    request.method = 'POST'\n\n  if (!headers.Host && !headers.host) {\n    headers.Host = request.hostname || request.host || this.createHost()\n\n    // If a port is specified explicitly, use it as is\n    if (request.port)\n      headers.Host += ':' + request.port\n  }\n  if (!request.hostname && !request.host)\n    request.hostname = headers.Host || headers.host\n\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'\n}\n\nRequestSigner.prototype.matchHost = function(host) {\n  var match = (host || '').match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/)\n  var hostParts = (match || []).slice(1, 3)\n\n  // ES's hostParts are sometimes the other way round, if the value that is expected\n  // to be region equals ‘es’ switch them back\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n  if (hostParts[1] === 'es')\n    hostParts = hostParts.reverse()\n\n  return hostParts\n}\n\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n  // Special case for S3 and SimpleDB in us-east-1\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true\n\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']\n    .indexOf(this.service) >= 0\n}\n\nRequestSigner.prototype.createHost = function() {\n  var region = this.isSingleRegion() ? '' :\n        (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,\n      service = this.service === 'ses' ? 'email' : this.service\n  return service + region + '.amazonaws.com'\n}\n\nRequestSigner.prototype.prepareRequest = function() {\n  this.parsePath()\n\n  var request = this.request, headers = request.headers, query\n\n  if (request.signQuery) {\n\n    this.parsedPath.query = query = this.parsedPath.query || {}\n\n    if (this.credentials.sessionToken)\n      query['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n    if (this.service === 's3' && !query['X-Amz-Expires'])\n      query['X-Amz-Expires'] = 86400\n\n    if (query['X-Amz-Date'])\n      this.datetime = query['X-Amz-Date']\n    else\n      query['X-Amz-Date'] = this.getDateTime()\n\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()\n    query['X-Amz-SignedHeaders'] = this.signedHeaders()\n\n  } else {\n\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n      if (request.body && !headers['Content-Type'] && !headers['content-type'])\n        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n\n      if (request.body && !headers['Content-Length'] && !headers['content-length'])\n        headers['Content-Length'] = Buffer.byteLength(request.body)\n\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])\n        headers['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])\n        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')\n\n      if (headers['X-Amz-Date'] || headers['x-amz-date'])\n        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']\n      else\n        headers['X-Amz-Date'] = this.getDateTime()\n    }\n\n    delete headers.Authorization\n    delete headers.authorization\n  }\n}\n\nRequestSigner.prototype.sign = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  if (this.request.signQuery) {\n    this.parsedPath.query['X-Amz-Signature'] = this.signature()\n  } else {\n    this.request.headers.Authorization = this.authHeader()\n  }\n\n  this.request.path = this.formatPath()\n\n  return this.request\n}\n\nRequestSigner.prototype.getDateTime = function() {\n  if (!this.datetime) {\n    var headers = this.request.headers,\n      date = new Date(headers.Date || headers.date || new Date)\n\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n\n    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)\n  }\n  return this.datetime\n}\n\nRequestSigner.prototype.getDate = function() {\n  return this.getDateTime().substr(0, 8)\n}\n\nRequestSigner.prototype.authHeader = function() {\n  return [\n    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),\n    'SignedHeaders=' + this.signedHeaders(),\n    'Signature=' + this.signature(),\n  ].join(', ')\n}\n\nRequestSigner.prototype.signature = function() {\n  var date = this.getDate(),\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\n      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)\n  if (!kCredentials) {\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)\n    kRegion = hmac(kDate, this.region)\n    kService = hmac(kRegion, this.service)\n    kCredentials = hmac(kService, 'aws4_request')\n    credentialsCache.set(cacheKey, kCredentials)\n  }\n  return hmac(kCredentials, this.stringToSign(), 'hex')\n}\n\nRequestSigner.prototype.stringToSign = function() {\n  return [\n    'AWS4-HMAC-SHA256',\n    this.getDateTime(),\n    this.credentialString(),\n    hash(this.canonicalString(), 'hex'),\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalString = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  var pathStr = this.parsedPath.path,\n      query = this.parsedPath.query,\n      headers = this.request.headers,\n      queryStr = '',\n      normalizePath = this.service !== 's3',\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\n      decodeSlashesInPath = this.service === 's3',\n      firstValOnly = this.service === 's3',\n      bodyHash\n\n  if (this.service === 's3' && this.request.signQuery) {\n    bodyHash = 'UNSIGNED-PAYLOAD'\n  } else if (this.isCodeCommitGit) {\n    bodyHash = ''\n  } else {\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||\n      hash(this.request.body || '', 'hex')\n  }\n\n  if (query) {\n    queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function(obj, key) {\n      if (!key) return obj\n      obj[key] = !Array.isArray(query[key]) ? query[key] :\n        (firstValOnly ? query[key][0] : query[key].slice().sort())\n      return obj\n    }, {})))\n  }\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\n    pathStr = pathStr.split('/').reduce(function(path, piece) {\n      if (normalizePath && piece === '..') {\n        path.pop()\n      } else if (!normalizePath || piece !== '.') {\n        if (decodePath) piece = decodeURIComponent(piece)\n        path.push(encodeRfc3986(encodeURIComponent(piece)))\n      }\n      return path\n    }, []).join('/')\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\n  }\n\n  return [\n    this.request.method || 'GET',\n    pathStr,\n    queryStr,\n    this.canonicalHeaders() + '\\n',\n    this.signedHeaders(),\n    bodyHash,\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalHeaders = function() {\n  var headers = this.request.headers\n  function trimAll(header) {\n    return header.toString().trim().replace(/\\s+/g, ' ')\n  }\n  return Object.keys(headers)\n    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })\n    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })\n    .join('\\n')\n}\n\nRequestSigner.prototype.signedHeaders = function() {\n  return Object.keys(this.request.headers)\n    .map(function(key) { return key.toLowerCase() })\n    .sort()\n    .join(';')\n}\n\nRequestSigner.prototype.credentialString = function() {\n  return [\n    this.getDate(),\n    this.region,\n    this.service,\n    'aws4_request',\n  ].join('/')\n}\n\nRequestSigner.prototype.defaultCredentials = function() {\n  var env = process.env\n  return {\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n    sessionToken: env.AWS_SESSION_TOKEN,\n  }\n}\n\nRequestSigner.prototype.parsePath = function() {\n  var path = this.request.path || '/',\n      queryIx = path.indexOf('?'),\n      query = null\n\n  if (queryIx >= 0) {\n    query = querystring.parse(path.slice(queryIx + 1))\n    path = path.slice(0, queryIx)\n  }\n\n  // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n  if (/[^0-9A-Za-z!'()*\\-._~%/]/.test(path)) {\n    path = path.split('/').map(function(piece) {\n      return encodeURIComponent(decodeURIComponent(piece))\n    }).join('/')\n  }\n\n  this.parsedPath = {\n    path: path,\n    query: query,\n  }\n}\n\nRequestSigner.prototype.formatPath = function() {\n  var path = this.parsedPath.path,\n      query = this.parsedPath.query\n\n  if (!query) return path\n\n  // Services don't support empty query string keys\n  if (query[''] != null) delete query['']\n\n  return path + '?' + encodeRfc3986(querystring.stringify(query))\n}\n\naws4.RequestSigner = RequestSigner\n\naws4.sign = function(request, credentials) {\n  return new RequestSigner(request, credentials).sign()\n}\n"]}