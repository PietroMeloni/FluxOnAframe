{"version":3,"sources":["../../../../../../../node_modules/npm/node_modules/retry/test/integration/test-retry-operation.js"],"names":["common","require","assert","fake","create","retry","dir","lib","testReset","error","Error","operation","attempts","finalCallback","callback","expectAnytime","expectedFinishes","finishes","fn","attempt","currentAttempt","equal","strictEqual","mainError","reset","testErrors","error2","_errors","push","deepEqual","errors","testMainErrorReturnsMostFrequentError","testMainErrorReturnsLastErrorOnEqualCount","testAttempt","Function","timeoutOpts","timeout","cb","_fn","_operationTimeout","_operationTimeoutCb","testRetry","testRetryForever","retries","forever","testRetryForeverNoRetries","delay","minTimeout","maxTimeout","startTime","Date","getTime","endTime","minTime","maxTime","testStop","stop","testMaxRetryTime","maxRetryTime","longAsyncFunction","wait","setTimeout","curTime","fail"],"mappings":"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","file":"test-retry-operation.js","sourcesContent":["var common = require('../common');\nvar assert = common.assert;\nvar fake = common.fake.create();\nvar retry = require(common.dir.lib + '/retry');\n\n(function testReset() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var expectedFinishes = 1;\n  var finishes         = 0;\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (operation.retry(error)) {\n        return;\n      }\n\n      finishes++\n      assert.equal(expectedFinishes, finishes);\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n\n      if (finishes < 2) {\n        attempts = 0;\n        expectedFinishes++;\n        operation.reset();\n        fn()\n      } else {\n        finalCallback();\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testErrors() {\n  var operation = retry.operation();\n\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n  operation._errors.push(error);\n  operation._errors.push(error2);\n\n  assert.deepEqual(operation.errors(), [error, error2]);\n})();\n\n(function testMainErrorReturnsMostFrequentError() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n  operation._errors.push(error2);\n  operation._errors.push(error);\n\n  assert.strictEqual(operation.mainError(), error);\n})();\n\n(function testMainErrorReturnsLastErrorOnEqualCount() {\n  var operation = retry.operation();\n  var error = new Error('some error');\n  var error2 = new Error('some other error');\n\n  operation._errors.push(error);\n  operation._errors.push(error2);\n\n  assert.strictEqual(operation.mainError(), error2);\n})();\n\n(function testAttempt() {\n  var operation = retry.operation();\n  var fn = new Function();\n\n  var timeoutOpts = {\n    timeout: 1,\n    cb: function() {}\n  };\n  operation.attempt(fn, timeoutOpts);\n\n  assert.strictEqual(fn, operation._fn);\n  assert.strictEqual(timeoutOpts.timeout, operation._operationTimeout);\n  assert.strictEqual(timeoutOpts.cb, operation._operationTimeoutCb);\n})();\n\n(function testRetry() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForever() {\n  var error = new Error('some error');\n  var operation = retry.operation({ retries: 3, forever: true });\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (attempts !== 6 && operation.retry(error)) {\n        return;\n      }\n\n      assert.strictEqual(attempts, 6);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testRetryForeverNoRetries() {\n  var error = new Error('some error');\n  var delay = 50\n  var operation = retry.operation({\n    retries: null,\n    forever: true,\n    minTimeout: delay,\n    maxTimeout: delay\n  });\n\n  var attempts = 0;\n  var startTime = new Date().getTime();\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n      if (attempts !== 4 && operation.retry(error)) {\n        return;\n      }\n\n      var endTime = new Date().getTime();\n      var minTime = startTime + (delay * 3);\n      var maxTime = minTime + 20 // add a little headroom for code execution time\n      assert(endTime >= minTime)\n      assert(endTime < maxTime)\n      assert.strictEqual(attempts, 4);\n      assert.strictEqual(operation.attempts(), attempts);\n      assert.strictEqual(operation.mainError(), error);\n      finalCallback();\n    });\n  };\n\n  fn();\n})();\n\n(function testStop() {\n  var error = new Error('some error');\n  var operation = retry.operation([1, 2, 3]);\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var fn = function() {\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts === 2) {\n        operation.stop();\n\n        assert.strictEqual(attempts, 2);\n        assert.strictEqual(operation.attempts(), attempts);\n        assert.strictEqual(operation.mainError(), error);\n        finalCallback();\n      }\n\n      if (operation.retry(error)) {\n        return;\n      }\n    });\n  };\n\n  fn();\n})();\n\n(function testMaxRetryTime() {\n  var error = new Error('some error');\n  var maxRetryTime = 30;\n  var operation = retry.operation({\n      minTimeout: 1,\n      maxRetryTime: maxRetryTime\n  });\n  var attempts = 0;\n\n  var finalCallback = fake.callback('finalCallback');\n  fake.expectAnytime(finalCallback);\n\n  var longAsyncFunction = function (wait, callback){\n    setTimeout(callback, wait);\n  };\n\n  var fn = function() {\n    var startTime = new Date().getTime();\n    operation.attempt(function(currentAttempt) {\n      attempts++;\n      assert.equal(currentAttempt, attempts);\n\n      if (attempts !== 2) {\n        if (operation.retry(error)) {\n            return;\n        }\n      } else {\n        var curTime = new Date().getTime();\n        longAsyncFunction(maxRetryTime - (curTime - startTime - 1), function(){\n          if (operation.retry(error)) {\n            assert.fail('timeout should be occurred');\n            return;\n          }\n\n          assert.strictEqual(operation.mainError(), error);\n          finalCallback();\n        });\n      }\n    });\n  };\n\n  fn();\n})();\n"]}