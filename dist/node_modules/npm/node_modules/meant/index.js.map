{"version":3,"sources":["../../../../../node_modules/npm/node_modules/meant/index.js"],"names":["levenshteinD","s1","s2","d","i","length","split","forEach","c2","j","c1","Math","min","meant","scmd","commands","bestSimilarity","cmd","item","push","sort","a","b","Number","Object","keys","key","module","exports"],"mappings":";;AAAA,SAASA,YAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AAC7B,MAAIC,IAAI,EAAR;AACA,MAAIC,IAAI,CAAR;;AAEA,OAAKA,IAAI,CAAT,EAAYA,KAAKH,GAAGI,MAApB,EAA4BD,GAA5B;AAAiCD,MAAEC,CAAF,IAAO,CAACA,CAAD,CAAP;AAAjC,GACA,KAAKA,IAAI,CAAT,EAAYA,KAAKF,GAAGG,MAApB,EAA4BD,GAA5B;AAAiCD,MAAE,CAAF,EAAKC,CAAL,IAAUA,CAAV;AAAjC,GAEAF,GAAGI,KAAH,CAAS,EAAT,EAAaC,OAAb,CAAqB,UAAUC,EAAV,EAAcC,CAAd,EAAiB;AACpCR,OAAGK,KAAH,CAAS,EAAT,EAAaC,OAAb,CAAqB,UAAUG,EAAV,EAAcN,CAAd,EAAiB;AACpC,UAAIM,OAAOF,EAAX,EAAe;AACbL,UAAEC,IAAI,CAAN,EAASK,IAAI,CAAb,IAAkBN,EAAEC,CAAF,EAAKK,CAAL,CAAlB;AACA;AACD;AACDN,QAAEC,IAAI,CAAN,EAASK,IAAI,CAAb,IAAkBE,KAAKC,GAAL,CAChBT,EAAEC,CAAF,EAAKK,IAAI,CAAT,IAAc,CADE,EAEhBN,EAAEC,IAAI,CAAN,EAASK,CAAT,IAAc,CAFE,EAGhBN,EAAEC,CAAF,EAAKK,CAAL,IAAU,CAHM,CAAlB;AAKD,KAVD;AAWD,GAZD;;AAcA,SAAON,EAAEF,GAAGI,MAAL,EAAaH,GAAGG,MAAhB,CAAP;AACD;;AAED,SAASQ,KAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;AAC9B,MAAIZ,IAAI,EAAR;AACA,MAAIa,iBAAiB,EAArB;;AAEAD,WAASR,OAAT,CAAiB,UAAUU,GAAV,EAAeb,CAAf,EAAkB;AACjC,QAAIc,OAAO,EAAX;AACAA,SAAKlB,aAAac,IAAb,EAAmBG,GAAnB,CAAL,IAAgCb,CAAhC;AACAD,MAAEgB,IAAF,CAAOD,IAAP;AACD,GAJD;;AAMAf,IAAEiB,IAAF,CAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACrB,WAAOC,OAAOC,OAAOC,IAAP,CAAYJ,CAAZ,EAAe,CAAf,CAAP,IAA4BE,OAAOC,OAAOC,IAAP,CAAYH,CAAZ,EAAe,CAAf,CAAP,CAAnC;AACD,GAFD;;AAIAnB,IAAEI,OAAF,CAAU,UAAUW,IAAV,EAAgB;AACxB,QAAIQ,MAAMH,OAAOC,OAAOC,IAAP,CAAYP,IAAZ,EAAkB,CAAlB,CAAP,CAAV;AACA,QAAIJ,KAAKT,MAAL,GAAc,CAAd,IAAmBqB,GAAvB,EAA4B;AAC1BV,qBAAeG,IAAf,CAAoBJ,SAASG,KAAKQ,GAAL,CAAT,CAApB;AACD;AACF,GALD;;AAOA,SAAOV,cAAP;AACD;;AAEDW,OAAOC,OAAP,GAAiBf,KAAjB","file":"index.js","sourcesContent":["function levenshteinD (s1, s2) {\n  var d = []\n  var i = 0\n\n  for (i = 0; i <= s1.length; i++) d[i] = [i]\n  for (i = 0; i <= s2.length; i++) d[0][i] = i\n\n  s2.split('').forEach(function (c2, j) {\n    s1.split('').forEach(function (c1, i) {\n      if (c1 === c2) {\n        d[i + 1][j + 1] = d[i][j]\n        return\n      }\n      d[i + 1][j + 1] = Math.min(\n        d[i][j + 1] + 1,\n        d[i + 1][j] + 1,\n        d[i][j] + 1\n      )\n    })\n  })\n\n  return d[s1.length][s2.length]\n}\n\nfunction meant (scmd, commands) {\n  var d = []\n  var bestSimilarity = []\n\n  commands.forEach(function (cmd, i) {\n    var item = {}\n    item[levenshteinD(scmd, cmd)] = i\n    d.push(item)\n  })\n\n  d.sort(function (a, b) {\n    return Number(Object.keys(a)[0]) - Number(Object.keys(b)[0])\n  })\n\n  d.forEach(function (item) {\n    var key = Number(Object.keys(item)[0])\n    if (scmd.length / 2 >= key) {\n      bestSimilarity.push(commands[item[key]])\n    }\n  })\n\n  return bestSimilarity\n}\n\nmodule.exports = meant\n"]}