{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/dashdash/lib/dashdash.js"],"names":["assert","require","format","fs","path","DEBUG","debug","console","warn","renderTemplate","s","d","replace","match","key","hasOwnProperty","shallowCopy","obj","copy","Object","keys","forEach","k","space","n","i","makeIndent","arg","deflen","name","undefined","fail","textwrap","width","words","trim","split","lines","line","w","newLength","length","push","optionKeyFromName","parseBool","option","optstr","Boolean","parseString","string","parseNumber","num","Number","isNaN","Error","parseInteger","test","parsePositiveInteger","parseDate","date","Date","toString","optionTypes","bool","takesArg","parseArg","helpArg","number","integer","positiveInteger","arrayOfBool","array","arrayOfString","arrayOfNumber","arrayOfInteger","arrayOfPositiveInteger","arrayOfDate","Parser","config","object","arrayOfObject","options","optionalBool","interspersed","self","allowUnknown","map","o","optionFromName","optionFromEnv","group","optionalString","ok","type","optionalArrayOfString","names","help","env","helpGroup","helpWrap","hidden","prototype","optionTakesArg","parse","inputs","Array","isArray","arguments","argv","slice","optionalObject","process","args","opts","_order","addOpt","val","from","parsedVal","arrayFlatten","item","value","_args","outer","idx","indexOf","j","allFound","concat","envname","default","indent","headingIndent","Math","round","nameSort","optionalNumber","maxCol","maxHelpCol","minHelpCol","helpCol","includeEnv","includeDefault","maxWidth","sort","a","b","max","min","helpDefault","helpEnv","envs","e","join","helpLines","filter","ln","rv","bashCompletion","specExtra","argtypes","bashCompletionFromOptions","BASH_COMPLETION_TEMPLATE_PATH","__dirname","bashCompletionSpecFromOptions","context","includeHidden","spec","shortopts","longopts","optargs","optNames","optType","getOptionType","completionType","optName","data","template","readFileSync","createParser","parser","addOptionType","optionType","func","synopsisFromOpt","parts","part","module","exports"],"mappings":"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","file":"dashdash.js","sourcesContent":["/**\n * dashdash - A light, featureful and explicit option parsing library for\n * node.js.\n */\n// vim: set ts=4 sts=4 sw=4 et:\n\nvar assert = require('assert-plus');\nvar format = require('util').format;\nvar fs = require('fs');\nvar path = require('path');\n\n\nvar DEBUG = true;\nif (DEBUG) {\n    var debug = console.warn;\n} else {\n    var debug = function () {};\n}\n\n\n\n// ---- internal support stuff\n\n// Replace {{variable}} in `s` with the template data in `d`.\nfunction renderTemplate(s, d) {\n    return s.replace(/{{([a-zA-Z]+)}}/g, function (match, key) {\n        return d.hasOwnProperty(key) ? d[key] : match;\n    });\n}\n\n/**\n * Return a shallow copy of the given object;\n */\nfunction shallowCopy(obj) {\n    if (!obj) {\n        return (obj);\n    }\n    var copy = {};\n    Object.keys(obj).forEach(function (k) {\n        copy[k] = obj[k];\n    });\n    return (copy);\n}\n\n\nfunction space(n) {\n    var s = '';\n    for (var i = 0; i < n; i++) {\n        s += ' ';\n    }\n    return s;\n}\n\n\nfunction makeIndent(arg, deflen, name) {\n    if (arg === null || arg === undefined)\n        return space(deflen);\n    else if (typeof (arg) === 'number')\n        return space(arg);\n    else if (typeof (arg) === 'string')\n        return arg;\n    else\n        assert.fail('invalid \"' + name + '\": not a string or number: ' + arg);\n}\n\n\n/**\n * Return an array of lines wrapping the given text to the given width.\n * This splits on whitespace. Single tokens longer than `width` are not\n * broken up.\n */\nfunction textwrap(s, width) {\n    var words = s.trim().split(/\\s+/);\n    var lines = [];\n    var line = '';\n    words.forEach(function (w) {\n        var newLength = line.length + w.length;\n        if (line.length > 0)\n            newLength += 1;\n        if (newLength > width) {\n            lines.push(line);\n            line = '';\n        }\n        if (line.length > 0)\n            line += ' ';\n        line += w;\n    });\n    lines.push(line);\n    return lines;\n}\n\n\n/**\n * Transform an option name to a \"key\" that is used as the field\n * on the `opts` object returned from `<parser>.parse()`.\n *\n * Transformations:\n * - '-' -> '_': This allow one to use hyphen in option names (common)\n *   but not have to do silly things like `opt[\"dry-run\"]` to access the\n *   parsed results.\n */\nfunction optionKeyFromName(name) {\n    return name.replace(/-/g, '_');\n}\n\n\n\n// ---- Option types\n\nfunction parseBool(option, optstr, arg) {\n    return Boolean(arg);\n}\n\nfunction parseString(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    return arg;\n}\n\nfunction parseNumber(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not a number: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parseInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9-]+$/.test(arg) || isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not an integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parsePositiveInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9]+$/.test(arg) || isNaN(num) || num === 0) {\n        throw new Error(format('arg for \"%s\" is not a positive integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\n/**\n * Supported date args:\n * - epoch second times (e.g. 1396031701)\n * - ISO 8601 format: YYYY-MM-DD[THH:MM:SS[.sss][Z]]\n *      2014-03-28T18:35:01.489Z\n *      2014-03-28T18:35:01.489\n *      2014-03-28T18:35:01Z\n *      2014-03-28T18:35:01\n *      2014-03-28\n */\nfunction parseDate(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var date;\n    if (/^\\d+$/.test(arg)) {\n        // epoch seconds\n        date = new Date(Number(arg) * 1000);\n    /* JSSTYLED */\n    } else if (/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)?$/i.test(arg)) {\n        // ISO 8601 format\n        date = new Date(arg);\n    } else {\n        throw new Error(format('arg for \"%s\" is not a valid date format: \"%s\"',\n            optstr, arg));\n    }\n    if (date.toString() === 'Invalid Date') {\n        throw new Error(format('arg for \"%s\" is an invalid date: \"%s\"',\n            optstr, arg));\n    }\n    return date;\n}\n\nvar optionTypes = {\n    bool: {\n        takesArg: false,\n        parseArg: parseBool\n    },\n    string: {\n        takesArg: true,\n        helpArg: 'ARG',\n        parseArg: parseString\n    },\n    number: {\n        takesArg: true,\n        helpArg: 'NUM',\n        parseArg: parseNumber\n    },\n    integer: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parseInteger\n    },\n    positiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parsePositiveInteger\n    },\n    date: {\n        takesArg: true,\n        helpArg: 'DATE',\n        parseArg: parseDate\n    },\n    arrayOfBool: {\n        takesArg: false,\n        array: true,\n        parseArg: parseBool\n    },\n    arrayOfString: {\n        takesArg: true,\n        helpArg: 'ARG',\n        array: true,\n        parseArg: parseString\n    },\n    arrayOfNumber: {\n        takesArg: true,\n        helpArg: 'NUM',\n        array: true,\n        parseArg: parseNumber\n    },\n    arrayOfInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseInteger\n    },\n    arrayOfPositiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parsePositiveInteger\n    },\n    arrayOfDate: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseDate\n    },\n};\n\n\n\n// ---- Parser\n\n/**\n * Parser constructor.\n *\n * @param config {Object} The parser configuration\n *      - options {Array} Array of option specs. See the README for how to\n *        specify each option spec.\n *      - allowUnknown {Boolean} Default false. Whether to throw on unknown\n *        options. If false, then unknown args are included in the _args array.\n *      - interspersed {Boolean} Default true. Whether to allow interspersed\n *        arguments (non-options) and options. E.g.:\n *              node tool.js arg1 arg2 -v\n *        '-v' is after some args here. If `interspersed: false` then '-v'\n *        would not be parsed out. Note that regardless of `interspersed`\n *        the presence of '--' will stop option parsing, as all good\n *        option parsers should.\n */\nfunction Parser(config) {\n    assert.object(config, 'config');\n    assert.arrayOfObject(config.options, 'config.options');\n    assert.optionalBool(config.interspersed, 'config.interspersed');\n    var self = this;\n\n    // Allow interspersed arguments (true by default).\n    this.interspersed = (config.interspersed !== undefined\n        ? config.interspersed : true);\n\n    // Don't allow unknown flags (true by default).\n    this.allowUnknown = (config.allowUnknown !== undefined\n        ? config.allowUnknown : false);\n\n    this.options = config.options.map(function (o) { return shallowCopy(o); });\n    this.optionFromName = {};\n    this.optionFromEnv = {};\n    for (var i = 0; i < this.options.length; i++) {\n        var o = this.options[i];\n        if (o.group !== undefined && o.group !== null) {\n            assert.optionalString(o.group,\n                format('config.options.%d.group', i));\n            continue;\n        }\n        assert.ok(optionTypes[o.type],\n            format('invalid config.options.%d.type: \"%s\" in %j',\n                   i, o.type, o));\n        assert.optionalString(o.name, format('config.options.%d.name', i));\n        assert.optionalArrayOfString(o.names,\n            format('config.options.%d.names', i));\n        assert.ok((o.name || o.names) && !(o.name && o.names),\n            format('exactly one of \"name\" or \"names\" required: %j', o));\n        assert.optionalString(o.help, format('config.options.%d.help', i));\n        var env = o.env || [];\n        if (typeof (env) === 'string') {\n            env = [env];\n        }\n        assert.optionalArrayOfString(env, format('config.options.%d.env', i));\n        assert.optionalString(o.helpGroup,\n            format('config.options.%d.helpGroup', i));\n        assert.optionalBool(o.helpWrap,\n            format('config.options.%d.helpWrap', i));\n        assert.optionalBool(o.hidden, format('config.options.%d.hidden', i));\n\n        if (o.name) {\n            o.names = [o.name];\n        } else {\n            assert.string(o.names[0],\n                format('config.options.%d.names is empty', i));\n        }\n        o.key = optionKeyFromName(o.names[0]);\n        o.names.forEach(function (n) {\n            if (self.optionFromName[n]) {\n                throw new Error(format(\n                    'option name collision: \"%s\" used in %j and %j',\n                    n, self.optionFromName[n], o));\n            }\n            self.optionFromName[n] = o;\n        });\n        env.forEach(function (n) {\n            if (self.optionFromEnv[n]) {\n                throw new Error(format(\n                    'option env collision: \"%s\" used in %j and %j',\n                    n, self.optionFromEnv[n], o));\n            }\n            self.optionFromEnv[n] = o;\n        });\n    }\n}\n\nParser.prototype.optionTakesArg = function optionTakesArg(option) {\n    return optionTypes[option.type].takesArg;\n};\n\n/**\n * Parse options from the given argv.\n *\n * @param inputs {Object} Optional.\n *      - argv {Array} Optional. The argv to parse. Defaults to\n *        `process.argv`.\n *      - slice {Number} The index into argv at which options/args begin.\n *        Default is 2, as appropriate for `process.argv`.\n *      - env {Object} Optional. The env to use for 'env' entries in the\n *        option specs. Defaults to `process.env`.\n * @returns {Object} Parsed `opts`. It has special keys `_args` (the\n *      remaining args from `argv`) and `_order` (gives the order that\n *      options were specified).\n */\nParser.prototype.parse = function parse(inputs) {\n    var self = this;\n\n    // Old API was `parse([argv, [slice]])`\n    if (Array.isArray(arguments[0])) {\n        inputs = {argv: arguments[0], slice: arguments[1]};\n    }\n\n    assert.optionalObject(inputs, 'inputs');\n    if (!inputs) {\n        inputs = {};\n    }\n    assert.optionalArrayOfString(inputs.argv, 'inputs.argv');\n    //assert.optionalNumber(slice, 'slice');\n    var argv = inputs.argv || process.argv;\n    var slice = inputs.slice !== undefined ? inputs.slice : 2;\n    var args = argv.slice(slice);\n    var env = inputs.env || process.env;\n    var opts = {};\n    var _order = [];\n\n    function addOpt(option, optstr, key, val, from) {\n        var type = optionTypes[option.type];\n        var parsedVal = type.parseArg(option, optstr, val);\n        if (type.array) {\n            if (!opts[key]) {\n                opts[key] = [];\n            }\n            if (type.arrayFlatten && Array.isArray(parsedVal)) {\n                for (var i = 0; i < parsedVal.length; i++) {\n                    opts[key].push(parsedVal[i]);\n                }\n            } else {\n                opts[key].push(parsedVal);\n            }\n        } else {\n            opts[key] = parsedVal;\n        }\n        var item = { key: key, value: parsedVal, from: from };\n        _order.push(item);\n    }\n\n    // Parse args.\n    var _args = [];\n    var i = 0;\n    outer: while (i < args.length) {\n        var arg = args[i];\n\n        // End of options marker.\n        if (arg === '--') {\n            i++;\n            break;\n\n        // Long option\n        } else if (arg.slice(0, 2) === '--') {\n            var name = arg.slice(2);\n            var val = null;\n            var idx = name.indexOf('=');\n            if (idx !== -1) {\n                val = name.slice(idx + 1);\n                name = name.slice(0, idx);\n            }\n            var option = this.optionFromName[name];\n            if (!option) {\n                if (!this.allowUnknown)\n                    throw new Error(format('unknown option: \"--%s\"', name));\n                else if (this.interspersed)\n                    _args.push(arg);\n                else\n                    break outer;\n            } else {\n                var takesArg = this.optionTakesArg(option);\n                if (val !== null && !takesArg) {\n                    throw new Error(format('argument given to \"--%s\" option '\n                        + 'that does not take one: \"%s\"', name, arg));\n                }\n                if (!takesArg) {\n                    addOpt(option, '--'+name, option.key, true, 'argv');\n                } else if (val !== null) {\n                    addOpt(option, '--'+name, option.key, val, 'argv');\n                } else if (i + 1 >= args.length) {\n                    throw new Error(format('do not have enough args for \"--%s\" '\n                        + 'option', name));\n                } else {\n                    addOpt(option, '--'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                }\n            }\n\n        // Short option\n        } else if (arg[0] === '-' && arg.length > 1) {\n            var j = 1;\n            var allFound = true;\n            while (j < arg.length) {\n                var name = arg[j];\n                var option = this.optionFromName[name];\n                if (!option) {\n                    allFound = false;\n                    if (this.allowUnknown) {\n                        if (this.interspersed) {\n                            _args.push(arg);\n                            break;\n                        } else\n                            break outer;\n                    } else if (arg.length > 2) {\n                        throw new Error(format(\n                            'unknown option: \"-%s\" in \"%s\" group',\n                            name, arg));\n                    } else {\n                        throw new Error(format('unknown option: \"-%s\"', name));\n                    }\n                } else if (this.optionTakesArg(option)) {\n                    break;\n                }\n                j++;\n            }\n\n            j = 1;\n            while (allFound && j < arg.length) {\n                var name = arg[j];\n                var val = arg.slice(j + 1);  // option val if it takes an arg\n                var option = this.optionFromName[name];\n                var takesArg = this.optionTakesArg(option);\n                if (!takesArg) {\n                    addOpt(option, '-'+name, option.key, true, 'argv');\n                } else if (val) {\n                    addOpt(option, '-'+name, option.key, val, 'argv');\n                    break;\n                } else {\n                    if (i + 1 >= args.length) {\n                        throw new Error(format('do not have enough args '\n                            + 'for \"-%s\" option', name));\n                    }\n                    addOpt(option, '-'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                    break;\n                }\n                j++;\n            }\n\n        // An interspersed arg\n        } else if (this.interspersed) {\n            _args.push(arg);\n\n        // An arg and interspersed args are not allowed, so done options.\n        } else {\n            break outer;\n        }\n        i++;\n    }\n    _args = _args.concat(args.slice(i));\n\n    // Parse environment.\n    Object.keys(this.optionFromEnv).forEach(function (envname) {\n        var val = env[envname];\n        if (val === undefined)\n            return;\n        var option = self.optionFromEnv[envname];\n        if (opts[option.key] !== undefined)\n            return;\n        var takesArg = self.optionTakesArg(option);\n        if (takesArg) {\n            addOpt(option, envname, option.key, val, 'env');\n        } else if (val !== '') {\n            // Boolean envvar handling:\n            // - VAR=<empty-string>     not set (as if the VAR was not set)\n            // - VAR=0                  false\n            // - anything else          true\n            addOpt(option, envname, option.key, (val !== '0'), 'env');\n        }\n    });\n\n    // Apply default values.\n    this.options.forEach(function (o) {\n        if (opts[o.key] === undefined) {\n            if (o.default !== undefined) {\n                opts[o.key] = o.default;\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                opts[o.key] = optionTypes[o.type].default;\n            }\n        }\n    });\n\n    opts._order = _order;\n    opts._args = _args;\n    return opts;\n};\n\n\n/**\n * Return help output for the current options.\n *\n * E.g.: if the current options are:\n *      [{names: ['help', 'h'], type: 'bool', help: 'Show help and exit.'}]\n * then this would return:\n *      '  -h, --help     Show help and exit.\\n'\n *\n * @param config {Object} Config for controlling the option help output.\n *      - indent {Number|String} Default 4. An indent/prefix to use for\n *        each option line.\n *      - nameSort {String} Default is 'length'. By default the names are\n *        sorted to put the short opts first (i.e. '-h, --help' preferred\n *        to '--help, -h'). Set to 'none' to not do this sorting.\n *      - maxCol {Number} Default 80. Note that long tokens in a help string\n *        can go past this.\n *      - helpCol {Number} Set to specify a specific column at which\n *        option help will be aligned. By default this is determined\n *        automatically.\n *      - minHelpCol {Number} Default 20.\n *      - maxHelpCol {Number} Default 40.\n *      - includeEnv {Boolean} Default false. If true, a note stating the `env`\n *        envvar (if specified for this option) will be appended to the help\n *        output.\n *      - includeDefault {Boolean} Default false. If true, a note stating\n *        the `default` for this option, if any, will be appended to the help\n *        output.\n *      - helpWrap {Boolean} Default true. Wrap help text in helpCol..maxCol\n *        bounds.\n * @returns {String}\n */\nParser.prototype.help = function help(config) {\n    config = config || {};\n    assert.object(config, 'config');\n\n    var indent = makeIndent(config.indent, 4, 'config.indent');\n    var headingIndent = makeIndent(config.headingIndent,\n        Math.round(indent.length / 2), 'config.headingIndent');\n\n    assert.optionalString(config.nameSort, 'config.nameSort');\n    var nameSort = config.nameSort || 'length';\n    assert.ok(~['length', 'none'].indexOf(nameSort),\n        'invalid \"config.nameSort\"');\n    assert.optionalNumber(config.maxCol, 'config.maxCol');\n    assert.optionalNumber(config.maxHelpCol, 'config.maxHelpCol');\n    assert.optionalNumber(config.minHelpCol, 'config.minHelpCol');\n    assert.optionalNumber(config.helpCol, 'config.helpCol');\n    assert.optionalBool(config.includeEnv, 'config.includeEnv');\n    assert.optionalBool(config.includeDefault, 'config.includeDefault');\n    assert.optionalBool(config.helpWrap, 'config.helpWrap');\n    var maxCol = config.maxCol || 80;\n    var minHelpCol = config.minHelpCol || 20;\n    var maxHelpCol = config.maxHelpCol || 40;\n\n    var lines = [];\n    var maxWidth = 0;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        if (o.group !== undefined && o.group !== null) {\n            // We deal with groups in the next pass\n            lines.push(null);\n            return;\n        }\n        var type = optionTypes[o.type];\n        var arg = o.helpArg || type.helpArg || 'ARG';\n        var line = '';\n        var names = o.names.slice();\n        if (nameSort === 'length') {\n            names.sort(function (a, b) {\n                if (a.length < b.length)\n                    return -1;\n                else if (b.length < a.length)\n                    return 1;\n                else\n                    return 0;\n            })\n        }\n        names.forEach(function (name, i) {\n            if (i > 0)\n                line += ', ';\n            if (name.length === 1) {\n                line += '-' + name\n                if (type.takesArg)\n                    line += ' ' + arg;\n            } else {\n                line += '--' + name\n                if (type.takesArg)\n                    line += '=' + arg;\n            }\n        });\n        maxWidth = Math.max(maxWidth, line.length);\n        lines.push(line);\n    });\n\n    // Add help strings.\n    var helpCol = config.helpCol;\n    if (!helpCol) {\n        helpCol = maxWidth + indent.length + 2;\n        helpCol = Math.min(Math.max(helpCol, minHelpCol), maxHelpCol);\n    }\n    var i = -1;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        i++;\n\n        if (o.group !== undefined && o.group !== null) {\n            if (o.group === '') {\n                // Support a empty string \"group\" to have a blank line between\n                // sets of options.\n                lines[i] = '';\n            } else {\n                // Render the group heading with the heading-specific indent.\n                lines[i] = (i === 0 ? '' : '\\n') + headingIndent +\n                    o.group + ':';\n            }\n            return;\n        }\n\n        var helpDefault;\n        if (config.includeDefault) {\n            if (o.default !== undefined) {\n                helpDefault = format('Default: %j', o.default);\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                helpDefault = format('Default: %j',\n                    optionTypes[o.type].default);\n            }\n        }\n\n        var line = lines[i] = indent + lines[i];\n        if (!o.help && !(config.includeEnv && o.env) && !helpDefault) {\n            return;\n        }\n        var n = helpCol - line.length;\n        if (n >= 0) {\n            line += space(n);\n        } else {\n            line += '\\n' + space(helpCol);\n        }\n\n        var helpEnv = '';\n        if (o.env && o.env.length && config.includeEnv) {\n            helpEnv += 'Environment: ';\n            var type = optionTypes[o.type];\n            var arg = o.helpArg || type.helpArg || 'ARG';\n            var envs = (Array.isArray(o.env) ? o.env : [o.env]).map(\n                function (e) {\n                    if (type.takesArg) {\n                        return e + '=' + arg;\n                    } else {\n                        return e + '=1';\n                    }\n                }\n            );\n            helpEnv += envs.join(', ');\n        }\n        var help = (o.help || '').trim();\n        if (o.helpWrap !== false && config.helpWrap !== false) {\n            // Wrap help description normally.\n            if (help.length && !~'.!?\"\\''.indexOf(help.slice(-1))) {\n                help += '.';\n            }\n            if (help.length) {\n                help += ' ';\n            }\n            help += helpEnv;\n            if (helpDefault) {\n                if (helpEnv) {\n                    help += '. ';\n                }\n                help += helpDefault;\n            }\n            line += textwrap(help, maxCol - helpCol).join(\n                '\\n' + space(helpCol));\n        } else {\n            // Do not wrap help description, but indent newlines appropriately.\n            var helpLines = help.split('\\n').filter(\n                    function (ln) { return ln.length });\n            if (helpEnv !== '') {\n                helpLines.push(helpEnv);\n            }\n            if (helpDefault) {\n                helpLines.push(helpDefault);\n            }\n            line += helpLines.join('\\n' + space(helpCol));\n        }\n\n        lines[i] = line;\n    });\n\n    var rv = '';\n    if (lines.length > 0) {\n        rv = lines.join('\\n') + '\\n';\n    }\n    return rv;\n};\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nParser.prototype.bashCompletion = function bashCompletion(args) {\n    assert.object(args, 'args');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    return bashCompletionFromOptions({\n        name: args.name,\n        specExtra: args.specExtra,\n        argtypes: args.argtypes,\n        options: this.options\n    });\n};\n\n\n// ---- Bash completion\n\nconst BASH_COMPLETION_TEMPLATE_PATH = path.join(\n    __dirname, '../etc/dashdash.bash_completion.in');\n\n/**\n * Return the Bash completion \"spec\" (the string value for the \"{{spec}}\"\n * var in the \"dashdash.bash_completion.in\" template) for this tool.\n *\n * The \"spec\" is Bash code that defines the CLI options and subcmds for\n * the template's completion code. It looks something like this:\n *\n *      local cmd_shortopts=\"-J ...\"\n *      local cmd_longopts=\"--help ...\"\n *      local cmd_optargs=\"-p=tritonprofile ...\"\n *\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.context {String} Optional. A context string for the \"local cmd*\"\n *      vars in the spec. By default it is the empty string. When used to\n *      scope for completion on a *sub-command* (e.g. for \"git log\" on a \"git\"\n *      tool), then it would have a value (e.g. \"__log\"). See\n *      <http://github.com/trentm/node-cmdln> Bash completion for details.\n * @param opts.includeHidden {Boolean} Optional. Default false. By default\n *      hidden options and subcmds are \"excluded\". Here excluded means they\n *      won't be offered as a completion, but if used, their argument type\n *      will be completed. \"Hidden\" options and subcmds are ones with the\n *      `hidden: true` attribute to exclude them from default help output.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionSpecFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.optionalString(args.context, 'args.context');\n    assert.optionalBool(args.includeHidden, 'args.includeHidden');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    var context = args.context || '';\n    var includeHidden = (args.includeHidden === undefined\n        ? false : args.includeHidden);\n\n    var spec = [];\n    var shortopts = [];\n    var longopts = [];\n    var optargs = [];\n    (args.options || []).forEach(function (o) {\n        if (o.group !== undefined && o.group !== null) {\n            // Skip group headers.\n            return;\n        }\n\n        var optNames = o.names || [o.name];\n        var optType = getOptionType(o.type);\n        if (optType.takesArg) {\n            var completionType = o.completionType ||\n                optType.completionType || o.type;\n            optNames.forEach(function (optName) {\n                if (optName.length === 1) {\n                    if (includeHidden || !o.hidden) {\n                        shortopts.push('-' + optName);\n                    }\n                    // Include even hidden options in `optargs` so that bash\n                    // completion of its arg still works.\n                    optargs.push('-' + optName + '=' + completionType);\n                } else {\n                    if (includeHidden || !o.hidden) {\n                        longopts.push('--' + optName);\n                    }\n                    optargs.push('--' + optName + '=' + completionType);\n                }\n            });\n        } else {\n            optNames.forEach(function (optName) {\n                if (includeHidden || !o.hidden) {\n                    if (optName.length === 1) {\n                        shortopts.push('-' + optName);\n                    } else {\n                        longopts.push('--' + optName);\n                    }\n                }\n            });\n        }\n    });\n\n    spec.push(format('local cmd%s_shortopts=\"%s\"',\n        context, shortopts.sort().join(' ')));\n    spec.push(format('local cmd%s_longopts=\"%s\"',\n        context, longopts.sort().join(' ')));\n    spec.push(format('local cmd%s_optargs=\"%s\"',\n        context, optargs.sort().join(' ')));\n    if (args.argtypes) {\n        spec.push(format('local cmd%s_argtypes=\"%s\"',\n            context, args.argtypes.join(' ')));\n    }\n    return spec.join('\\n');\n}\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    // Gather template data.\n    var data = {\n        name: args.name,\n        date: new Date(),\n        spec: bashCompletionSpecFromOptions({\n            options: args.options,\n            argtypes: args.argtypes\n        }),\n    };\n    if (args.specExtra) {\n        data.spec += '\\n\\n' + args.specExtra;\n    }\n\n    // Render template.\n    var template = fs.readFileSync(BASH_COMPLETION_TEMPLATE_PATH, 'utf8');\n    return renderTemplate(template, data);\n}\n\n\n\n// ---- exports\n\nfunction createParser(config) {\n    return new Parser(config);\n}\n\n/**\n * Parse argv with the given options.\n *\n * @param config {Object} A merge of all the available fields from\n *      `dashdash.Parser` and `dashdash.Parser.parse`: options, interspersed,\n *      argv, env, slice.\n */\nfunction parse(config) {\n    assert.object(config, 'config');\n    assert.optionalArrayOfString(config.argv, 'config.argv');\n    assert.optionalObject(config.env, 'config.env');\n    var config = shallowCopy(config);\n    var argv = config.argv;\n    delete config.argv;\n    var env = config.env;\n    delete config.env;\n\n    var parser = new Parser(config);\n    return parser.parse({argv: argv, env: env});\n}\n\n\n/**\n * Add a new option type.\n *\n * @params optionType {Object}:\n *      - name {String} Required.\n *      - takesArg {Boolean} Required. Whether this type of option takes an\n *        argument on process.argv. Typically this is true for all but the\n *        \"bool\" type.\n *      - helpArg {String} Required iff `takesArg === true`. The string to\n *        show in generated help for options of this type.\n *      - parseArg {Function} Require. `function (option, optstr, arg)` parser\n *        that takes a string argument and returns an instance of the\n *        appropriate type, or throws an error if the arg is invalid.\n *      - array {Boolean} Optional. Set to true if this is an 'arrayOf' type\n *        that collects multiple usages of the option in process.argv and\n *        puts results in an array.\n *      - arrayFlatten {Boolean} Optional. XXX\n *      - default Optional. Default value for options of this type, if no\n *        default is specified in the option type usage.\n */\nfunction addOptionType(optionType) {\n    assert.object(optionType, 'optionType');\n    assert.string(optionType.name, 'optionType.name');\n    assert.bool(optionType.takesArg, 'optionType.takesArg');\n    if (optionType.takesArg) {\n        assert.string(optionType.helpArg, 'optionType.helpArg');\n    }\n    assert.func(optionType.parseArg, 'optionType.parseArg');\n    assert.optionalBool(optionType.array, 'optionType.array');\n    assert.optionalBool(optionType.arrayFlatten, 'optionType.arrayFlatten');\n\n    optionTypes[optionType.name] = {\n        takesArg: optionType.takesArg,\n        helpArg: optionType.helpArg,\n        parseArg: optionType.parseArg,\n        array: optionType.array,\n        arrayFlatten: optionType.arrayFlatten,\n        default: optionType.default\n    }\n}\n\n\nfunction getOptionType(name) {\n    assert.string(name, 'name');\n    return optionTypes[name];\n}\n\n\n/**\n * Return a synopsis string for the given option spec.\n *\n * Examples:\n *      > synopsisFromOpt({names: ['help', 'h'], type: 'bool'});\n *      '[ --help | -h ]'\n *      > synopsisFromOpt({name: 'file', type: 'string', helpArg: 'FILE'});\n *      '[ --file=FILE ]'\n */\nfunction synopsisFromOpt(o) {\n    assert.object(o, 'o');\n\n    if (o.hasOwnProperty('group')) {\n        return null;\n    }\n    var names = o.names || [o.name];\n    // `type` here could be undefined if, for example, the command has a\n    // dashdash option spec with a bogus 'type'.\n    var type = getOptionType(o.type);\n    var helpArg = o.helpArg || (type && type.helpArg) || 'ARG';\n    var parts = [];\n    names.forEach(function (name) {\n        var part = (name.length === 1 ? '-' : '--') + name;\n        if (type && type.takesArg) {\n            part += (name.length === 1 ? ' ' + helpArg : '=' + helpArg);\n        }\n        parts.push(part);\n    });\n    return ('[ ' + parts.join(' | ') + ' ]');\n};\n\n\nmodule.exports = {\n    createParser: createParser,\n    Parser: Parser,\n    parse: parse,\n    addOptionType: addOptionType,\n    getOptionType: getOptionType,\n    synopsisFromOpt: synopsisFromOpt,\n\n    // Bash completion-related exports\n    BASH_COMPLETION_TEMPLATE_PATH: BASH_COMPLETION_TEMPLATE_PATH,\n    bashCompletionFromOptions: bashCompletionFromOptions,\n    bashCompletionSpecFromOptions: bashCompletionSpecFromOptions,\n\n    // Export the parseFoo parsers because they might be useful as primitives\n    // for custom option types.\n    parseBool: parseBool,\n    parseString: parseString,\n    parseNumber: parseNumber,\n    parseInteger: parseInteger,\n    parsePositiveInteger: parsePositiveInteger,\n    parseDate: parseDate\n};\n"]}