{"version":3,"sources":["../../../../../node_modules/npm/node_modules/read-cmd-shim/index.js"],"names":["fs","require","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","module","exports","cb","readFile","readFileEr","contents","destination","toString","sync","readFileSync"],"mappings":"AAAA;;AACA,IAAIA,KAAKC,QAAQ,aAAR,CAAT;;AAEA,SAASC,WAAT,CAAsBC,IAAtB,EAA4BC,eAA5B,EAA6C;AAC3C,MAAI,UAAUC,IAAV,CAAeF,IAAf,CAAJ,EAA0B;AACxB,WAAOG,mBAAmBF,eAAnB,CAAP;AACD,GAFD,MAEO;AACL,WAAOG,sBAAsBH,eAAtB,CAAP;AACD;AACF;;AAED,SAASE,kBAAT,CAA6BF,eAA7B,EAA8C;AAC5C,MAAII,UAAUJ,gBAAgBK,KAAhB,CAAsB,0BAAtB,CAAd;AACA,SAAOD,WAAWA,QAAQ,CAAR,CAAlB;AACD;;AAED,SAASD,qBAAT,CAAgCH,eAAhC,EAAiD;AAC/C,MAAII,UAAUJ,gBAAgBK,KAAhB,CAAsB,kCAAtB,CAAd;AACA,SAAOD,WAAWA,QAAQ,CAAR,CAAlB;AACD;;AAED,SAASE,SAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACpCA,WAASC,OAAT,GAAmBF,OAAOE,OAA1B;AACAD,WAASE,IAAT,GAAgBH,OAAOG,IAAvB;AACA,SAAOF,QAAP;AACD;;AAED,SAASG,QAAT,CAAmBZ,IAAnB,EAAyBa,EAAzB,EAA6B;AAC3B,MAAI,CAACA,EAAL,EAAS;AACPA,SAAK,IAAIC,KAAJ,EAAL;AACAA,UAAMC,iBAAN,CAAwBF,EAAxB,EAA4BD,QAA5B;AACD;AACDC,KAAGF,IAAH,GAAU,WAAV;AACAE,KAAGH,OAAH,GAAa,gCAAgCV,IAAhC,GAAuC,uCAApD;AACA,SAAOa,EAAP;AACD;;AAED,IAAIG,cAAcC,OAAOC,OAAP,GAAiB,UAAUlB,IAAV,EAAgBmB,EAAhB,EAAoB;AACrD,MAAIN,KAAK,IAAIC,KAAJ,EAAT;AACAA,QAAMC,iBAAN,CAAwBF,EAAxB,EAA4BG,WAA5B;AACAnB,KAAGuB,QAAH,CAAYpB,IAAZ,EAAkB,UAAUqB,UAAV,EAAsBC,QAAtB,EAAgC;AAChD,QAAID,UAAJ,EAAgB,OAAOF,GAAGZ,UAAUc,UAAV,EAAsBR,EAAtB,CAAH,CAAP;AAChB,QAAIU,cAAcxB,YAAYC,IAAZ,EAAkBsB,SAASE,QAAT,EAAlB,CAAlB;AACA,QAAID,WAAJ,EAAiB,OAAOJ,GAAG,IAAH,EAASI,WAAT,CAAP;AACjB,WAAOJ,GAAGP,SAASZ,IAAT,EAAea,EAAf,CAAH,CAAP;AACD,GALD;AAMD,CATD;;AAWAI,OAAOC,OAAP,CAAeO,IAAf,GAAsB,UAAUzB,IAAV,EAAgB;AACpC,MAAIsB,WAAWzB,GAAG6B,YAAH,CAAgB1B,IAAhB,CAAf;AACA,MAAIuB,cAAcxB,YAAYC,IAAZ,EAAkBsB,SAASE,QAAT,EAAlB,CAAlB;AACA,MAAI,CAACD,WAAL,EAAkB,MAAMX,SAASZ,IAAT,CAAN;AAClB,SAAOuB,WAAP;AACD,CALD","file":"index.js","sourcesContent":["'use strict'\nvar fs = require('graceful-fs')\n\nfunction extractPath (path, cmdshimContents) {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nfunction extractPathFromCmd (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"%~dp0\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nfunction extractPathFromCygwin (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nfunction wrapError (thrown, newError) {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  return newError\n}\n\nfunction notaShim (path, er) {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = \"Can't read shim path from '\" + path + \"', it doesn't appear to be a cmd-shim\"\n  return er\n}\n\nvar readCmdShim = module.exports = function (path, cb) {\n  var er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  fs.readFile(path, function (readFileEr, contents) {\n    if (readFileEr) return cb(wrapError(readFileEr, er))\n    var destination = extractPath(path, contents.toString())\n    if (destination) return cb(null, destination)\n    return cb(notaShim(path, er))\n  })\n}\n\nmodule.exports.sync = function (path) {\n  var contents = fs.readFileSync(path)\n  var destination = extractPath(path, contents.toString())\n  if (!destination) throw notaShim(path)\n  return destination\n}\n"]}