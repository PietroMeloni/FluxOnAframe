{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/request/lib/tunnel.js"],"names":["url","require","tunnel","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","constructProxyHost","uriObject","port","protocol","proxyHost","hostname","constructProxyHeaderWhiteList","headers","proxyHeaderWhiteList","whiteList","reduce","set","header","toLowerCase","Object","keys","filter","constructTunnelOptions","request","proxyHeaders","proxy","tunnelOptions","host","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol","constructTunnelFnName","uri","uriProtocol","proxyProtocol","join","getTunnelFn","tunnelFnName","Tunnel","proxyHeaderExclusiveList","tunnelOverride","prototype","isEnabled","self","setup","options","parse","concat","forEach","removeHeader","tunnelFn","agent","exports"],"mappings":"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","file":"tunnel.js","sourcesContent":["'use strict'\n\nvar url = require('url')\n  , tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost(uriObject) {\n  var port = uriObject.port\n    , protocol = uriObject.protocol\n    , proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy : {\n      host      : proxy.hostname,\n      port      : +proxy.port,\n      proxyAuth : proxy.auth,\n      headers   : proxyHeaders\n    },\n    headers            : request.headers,\n    ca                 : request.ca,\n    cert               : request.cert,\n    key                : request.key,\n    passphrase         : request.passphrase,\n    pfx                : request.pfx,\n    ciphers            : request.ciphers,\n    rejectUnauthorized : request.rejectUnauthorized,\n    secureOptions      : request.secureOptions,\n    secureProtocol     : request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn(request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n    , request = self.request\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n    , request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n"]}