{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/request/lib/multipart.js"],"names":["uuid","require","CombinedStream","isstream","Buffer","Multipart","request","boundary","chunked","body","prototype","isChunked","options","self","parts","data","forEach","emit","Error","undefined","getHeader","part","setHeaders","hasHeader","setHeader","header","indexOf","replace","build","add","toString","append","push","from","preambleCRLF","preamble","Object","keys","key","postambleCRLF","onRequest","exports"],"mappings":"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","file":"multipart.js","sourcesContent":["'use strict'\n\nvar uuid = require('uuid')\n  , CombinedStream = require('combined-stream')\n  , isstream = require('isstream')\n  , Buffer = require('safe-buffer').Buffer\n\n\nfunction Multipart (request) {\n  this.request = request\n  this.boundary = uuid()\n  this.chunked = false\n  this.body = null\n}\n\nMultipart.prototype.isChunked = function (options) {\n  var self = this\n    , chunked = false\n    , parts = options.data || options\n\n  if (!parts.forEach) {\n    self.request.emit('error', new Error('Argument error, options.multipart.'))\n  }\n\n  if (options.chunked !== undefined) {\n    chunked = options.chunked\n  }\n\n  if (self.request.getHeader('transfer-encoding') === 'chunked') {\n    chunked = true\n  }\n\n  if (!chunked) {\n    parts.forEach(function (part) {\n      if (typeof part.body === 'undefined') {\n        self.request.emit('error', new Error('Body attribute missing in multipart.'))\n      }\n      if (isstream(part.body)) {\n        chunked = true\n      }\n    })\n  }\n\n  return chunked\n}\n\nMultipart.prototype.setHeaders = function (chunked) {\n  var self = this\n\n  if (chunked && !self.request.hasHeader('transfer-encoding')) {\n    self.request.setHeader('transfer-encoding', 'chunked')\n  }\n\n  var header = self.request.getHeader('content-type')\n\n  if (!header || header.indexOf('multipart') === -1) {\n    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)\n  } else {\n    if (header.indexOf('boundary') !== -1) {\n      self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, '$1')\n    } else {\n      self.request.setHeader('content-type', header + '; boundary=' + self.boundary)\n    }\n  }\n}\n\nMultipart.prototype.build = function (parts, chunked) {\n  var self = this\n  var body = chunked ? new CombinedStream() : []\n\n  function add (part) {\n    if (typeof part === 'number') {\n      part = part.toString()\n    }\n    return chunked ? body.append(part) : body.push(Buffer.from(part))\n  }\n\n  if (self.request.preambleCRLF) {\n    add('\\r\\n')\n  }\n\n  parts.forEach(function (part) {\n    var preamble = '--' + self.boundary + '\\r\\n'\n    Object.keys(part).forEach(function (key) {\n      if (key === 'body') { return }\n      preamble += key + ': ' + part[key] + '\\r\\n'\n    })\n    preamble += '\\r\\n'\n    add(preamble)\n    add(part.body)\n    add('\\r\\n')\n  })\n  add('--' + self.boundary + '--')\n\n  if (self.request.postambleCRLF) {\n    add('\\r\\n')\n  }\n\n  return body\n}\n\nMultipart.prototype.onRequest = function (options) {\n  var self = this\n\n  var chunked = self.isChunked(options)\n    , parts = options.data || options\n\n  self.setHeaders(chunked)\n  self.chunked = chunked\n  self.body = self.build(parts, chunked)\n}\n\nexports.Multipart = Multipart\n"]}