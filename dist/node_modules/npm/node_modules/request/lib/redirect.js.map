{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/request/lib/redirect.js"],"names":["url","require","isUrl","Redirect","request","followRedirect","followRedirects","followAllRedirects","followOriginalHttpMethod","allowRedirect","maxRedirects","redirects","redirectsFollowed","removeRefererHeader","prototype","onRequest","options","self","undefined","redirectTo","response","statusCode","caseless","has","location","get","debug","method","authHeader","_auth","onResponse","setHeader","uri","call","resume","emit","Error","href","test","resolve","uriPrev","parse","protocol","agent","push","redirectUri","src","req","_started","body","_form","headers","removeHeader","hostname","originalHost","split","init","exports"],"mappings":"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","file":"redirect.js","sourcesContent":["'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.allowRedirect = function () {return true}\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push(\n    { statusCode : response.statusCode\n    , redirectUri: redirectTo\n    }\n  )\n  if (self.followAllRedirects && request.method !== 'HEAD'\n    && response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n"]}