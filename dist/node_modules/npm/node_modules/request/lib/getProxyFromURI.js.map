{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/request/lib/getProxyFromURI.js"],"names":["formatHostname","hostname","replace","toLowerCase","parseNoProxyZone","zone","trim","zoneParts","split","zoneHost","zonePort","hasPort","indexOf","port","uriInNoProxy","uri","noProxy","protocol","noProxyList","map","some","noProxyZone","isMatchedAt","hostnameMatched","length","getProxyFromURI","process","env","NO_PROXY","no_proxy","HTTP_PROXY","http_proxy","HTTPS_PROXY","https_proxy","module","exports"],"mappings":"AAAA;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChC;AACA,SAAOA,SAASC,OAAT,CAAiB,MAAjB,EAAyB,GAAzB,EAA8BC,WAA9B,EAAP;AACD;;AAED,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9BA,SAAOA,KAAKC,IAAL,GAAYH,WAAZ,EAAP;;AAEA,MAAII,YAAYF,KAAKG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAhB;AAAA,MACIC,WAAWT,eAAeO,UAAU,CAAV,CAAf,CADf;AAAA,MAEIG,WAAWH,UAAU,CAAV,CAFf;AAAA,MAGII,UAAUN,KAAKO,OAAL,CAAa,GAAb,IAAoB,CAAC,CAHnC;;AAKA,SAAO,EAACX,UAAUQ,QAAX,EAAqBI,MAAMH,QAA3B,EAAqCC,SAASA,OAA9C,EAAP;AACD;;AAED,SAASG,YAAT,CAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AAClC,MAAIH,OAAOE,IAAIF,IAAJ,KAAaE,IAAIE,QAAJ,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,IAAjD,CAAX;AAAA,MACIhB,WAAWD,eAAee,IAAId,QAAnB,CADf;AAAA,MAEIiB,cAAcF,QAAQR,KAAR,CAAc,GAAd,CAFlB;;AAIA;AACA,SAAOU,YAAYC,GAAZ,CAAgBf,gBAAhB,EAAkCgB,IAAlC,CAAuC,UAASC,WAAT,EAAsB;AAClE,QAAIC,cAAcrB,SAASW,OAAT,CAAiBS,YAAYpB,QAA7B,CAAlB;AAAA,QACIsB,kBACED,cAAc,CAAC,CAAf,IACCA,gBAAgBrB,SAASuB,MAAT,GAAkBH,YAAYpB,QAAZ,CAAqBuB,MAH9D;;AAMA,QAAIH,YAAYV,OAAhB,EAAyB;AACvB,aAAQE,SAASQ,YAAYR,IAAtB,IAA+BU,eAAtC;AACD;;AAED,WAAOA,eAAP;AACD,GAZM,CAAP;AAaD;;AAED,SAASE,eAAT,CAAyBV,GAAzB,EAA8B;AAC5B;AACA;AACA;;AAEA,MAAIC,UAAUU,QAAQC,GAAR,CAAYC,QAAZ,IAAwBF,QAAQC,GAAR,CAAYE,QAApC,IAAgD,EAA9D;;AAEA;;AAEA,MAAIb,YAAY,GAAhB,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED;;AAEA,MAAIA,YAAY,EAAZ,IAAkBF,aAAaC,GAAb,EAAkBC,OAAlB,CAAtB,EAAkD;AAChD,WAAO,IAAP;AACD;;AAED;;AAEA,MAAID,IAAIE,QAAJ,KAAiB,OAArB,EAA8B;AAC5B,WAAOS,QAAQC,GAAR,CAAYG,UAAZ,IACAJ,QAAQC,GAAR,CAAYI,UADZ,IAC0B,IADjC;AAED;;AAED,MAAIhB,IAAIE,QAAJ,KAAiB,QAArB,EAA+B;AAC7B,WAAOS,QAAQC,GAAR,CAAYK,WAAZ,IACAN,QAAQC,GAAR,CAAYM,WADZ,IAEAP,QAAQC,GAAR,CAAYG,UAFZ,IAGAJ,QAAQC,GAAR,CAAYI,UAHZ,IAG2B,IAHlC;AAID;;AAED;AACA;;AAEA,SAAO,IAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBV,eAAjB","file":"getProxyFromURI.js","sourcesContent":["'use strict'\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n    , zoneHost = formatHostname(zoneParts[0])\n    , zonePort = zoneParts[1]\n    , hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n    , hostname = formatHostname(uri.hostname)\n    , noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n      , hostnameMatched = (\n          isMatchedAt > -1 &&\n          (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n        )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n           process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n           process.env.https_proxy ||\n           process.env.HTTP_PROXY  ||\n           process.env.http_proxy  || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n"]}