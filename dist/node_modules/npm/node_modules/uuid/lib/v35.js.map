{"version":3,"sources":["../../../../../../node_modules/npm/node_modules/uuid/lib/v35.js"],"names":["bytesToUuid","require","uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","Array","length","i","charCodeAt","module","exports","name","version","hashfunc","generateUUID","value","namespace","buf","offset","off","isArray","TypeError","concat","idx","err","DNS","URL"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,MAAIC,QAAQ,EAAZ;AACAD,OAAKE,OAAL,CAAa,iBAAb,EAAgC,UAASC,GAAT,EAAc;AAC5CF,UAAMG,IAAN,CAAWC,SAASF,GAAT,EAAc,EAAd,CAAX;AACD,GAFD;;AAIA,SAAOF,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,GAAvB,EAA4B;AAC1BA,QAAMC,SAASC,mBAAmBF,GAAnB,CAAT,CAAN,CAD0B,CACe;AACzC,MAAIN,QAAQ,IAAIS,KAAJ,CAAUH,IAAII,MAAd,CAAZ;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,IAAII,MAAxB,EAAgCC,GAAhC,EAAqC;AACnCX,UAAMW,CAAN,IAAWL,IAAIM,UAAJ,CAAeD,CAAf,CAAX;AACD;AACD,SAAOX,KAAP;AACD;;AAEDa,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkC;AACjD,MAAIC,eAAe,SAAfA,YAAe,CAASC,KAAT,EAAgBC,SAAhB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwC;AACzD,QAAIC,MAAMF,OAAOC,MAAP,IAAiB,CAA3B;;AAEA,QAAI,OAAOH,KAAP,IAAiB,QAArB,EAA+BA,QAAQd,cAAcc,KAAd,CAAR;AAC/B,QAAI,OAAOC,SAAP,IAAqB,QAAzB,EAAmCA,YAAYtB,YAAYsB,SAAZ,CAAZ;;AAEnC,QAAI,CAACX,MAAMe,OAAN,CAAcL,KAAd,CAAL,EAA2B,MAAMM,UAAU,iCAAV,CAAN;AAC3B,QAAI,CAAChB,MAAMe,OAAN,CAAcJ,SAAd,CAAD,IAA6BA,UAAUV,MAAV,KAAqB,EAAtD,EAA0D,MAAMe,UAAU,6DAAV,CAAN;;AAE1D;AACA,QAAIzB,QAAQiB,SAASG,UAAUM,MAAV,CAAiBP,KAAjB,CAAT,CAAZ;AACAnB,UAAM,CAAN,IAAYA,MAAM,CAAN,IAAW,IAAZ,GAAoBgB,OAA/B;AACAhB,UAAM,CAAN,IAAYA,MAAM,CAAN,IAAW,IAAZ,GAAoB,IAA/B;;AAEA,QAAIqB,GAAJ,EAAS;AACP,WAAK,IAAIM,MAAM,CAAf,EAAkBA,MAAM,EAAxB,EAA4B,EAAEA,GAA9B,EAAmC;AACjCN,YAAIE,MAAII,GAAR,IAAe3B,MAAM2B,GAAN,CAAf;AACD;AACF;;AAED,WAAON,OAAOzB,YAAYI,KAAZ,CAAd;AACD,GArBD;;AAuBA;AACA,MAAI;AACFkB,iBAAaH,IAAb,GAAoBA,IAApB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY,CACb;;AAED;AACAV,eAAaW,GAAb,GAAmB,sCAAnB;AACAX,eAAaY,GAAb,GAAmB,sCAAnB;;AAEA,SAAOZ,YAAP;AACD,CAnCD","file":"v35.js","sourcesContent":["var bytesToUuid = require('./bytesToUuid');\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n  var bytes = new Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nmodule.exports = function(name, version, hashfunc) {\n  var generateUUID = function(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n\n    if (typeof(value) == 'string') value = stringToBytes(value);\n    if (typeof(namespace) == 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n    // Per 4.3\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off+idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  };\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {\n  }\n\n  // Pre-defined namespaces, per Appendix C\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n\n  return generateUUID;\n};\n"]}