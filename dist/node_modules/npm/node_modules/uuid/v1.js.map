{"version":3,"sources":["../../../../../node_modules/npm/node_modules/uuid/v1.js"],"names":["rng","require","bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","module","exports"],"mappings":"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","file":"v1.js","sourcesContent":["var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"]}